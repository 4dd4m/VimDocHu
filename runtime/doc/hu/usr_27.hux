*usr_27.txt*	For Vim version 8.2.	Last change: 2019 Jul 14

		  Bram Moolenaar: Vim felhasználói kézikönyv

			 Keresési parancsok és minták


A harmadik fejezetben már megtanulhattuk a keresés alapjait |03.9| Azonban a
Vim ennél sokkal többre képes. A fejezet bemutatja a leggyakrabban alkalmazott
technikákat. A mintákról külön fejezetben tájékozódhatsz: |pattern|.

|27.1|	Kis- és nagybetű ignorálása
|27.2|	Körkörös keresés
|27.3|	Offszetek
|27.4|	Illesztés több alkalommal
|27.5|	Alternatívák
|27.6|	Karaktertartományok
|27.7|	Karakterosztályok
|27.8|	Sortörés illesztése
|27.9|	Példák

Következő fejezet: |usr_28.txt|  Foldolás
    Előző fejezet: |usr_26.txt|  Ismétlés
 Tartalomjegyzék: |usr_toc.txt|

==============================================================================
*27.1*	Kis- és nagybetű ignorálása

Ha az alapértelmezett beállításokon nem változtatunk, akkor a keresés során a
Vim illeszti a nagy- és kisbetűket is. Ezért "include", "INCLUDE" és "Include"
különbözőek, azért a keresésünk csak az egyik szóra fog illeszkedni.
   Most kapcsold be az 'ignorecase' opciót: >

	:set ignorecase

Keress az "include" szóra. A művelet illeszkedett mindhárom szóra, és
illeszkedne például a "InClUdE" szóra is. (Kapcsold be a 'hlsearch' opciót,
mely kiemeli a találatokat).
   Így kapcsolható ki: >

	:set noignorecase

Most azonban még ne kapcsoljuk ki, keressünk rá az "INCLUDE" szóra. Az
eredmény ugyan az, a keresés mindhárom szóra illeszkedett. Kapcsoljuk be a
'smartcase' opciót: >

	:set ignorecase smartcase

Ha a mintának legalább egy karaktere nagybetűs, akkor a keresés betűérzékennyé
válik, hiszen csak abban az esetben használunk nagybetűt, ha azt szeretnénk,
hogy a keresés betűérzékeny legyen. Okos!
    A 'ignorecase' és s 'smartcase' által végzett keresések találatainak
szemléltetés:

	minta			egyezés	~
	word			word, Word, WORD, WoRd, etc.
	Word			Word
	WORD			WORD
	WoRd			WoRd


BETŰÉRZÉKENYSÉG MINTÁNKÉNT

Az előbb említett opciókat nem kell feltétlenül be- és kikapcsolni minden egyes
keresés alkalmával. Ha betűérzéketlenné szeretnéd tenni a keresést, akkor "\c"
stringet fűzd a mintád elejéhez. "\C" betűérzékennyé teszi a keresést. A
prefixum felülírja az 'ignorecase' és a 'smartcase' értékeit. "\c","\C"
használata esetén az  említett két opció értéke nincs figyelembe véve.

	minta			egyezés	~
	\Cword			word
	\CWord			Word
	\cword			word, Word, WORD, WoRd, etc.
	\cWord			word, Word, WORD, WoRd, etc.

A "\c \C" egyik nagy előnye, hogy beépül a mintába. Ezért ha a keresést a
historyból ismétled szintén nem kell hozzányúlni az opciókhoz.

	Megjegyzés:
	Az "\" elemek használata függ a 'magic' opciótól. Ebben a fejezetben
	feltételezzük, hogy 'magic' be van kapcsolva, mert ez az ajánlott és
	alapértelmezett beállítás. Ha megváltoztatnád a 'magic' értékét, akkor
	hirtelen az összes példa invaliddá válna.

	Megjegyzés:
	Hosszan tartó kereséseket megszakíthatunk Unixon CTRL-C, MS-Windowson
	CTRL-Break billentyűkkel.

==============================================================================
*27.2*	Körkörös keresés

Keresésnél (előre irányban), a keresés a kurzortól pontjától a fájl végéig
futtatja a keresést. Amennyiben nem volt találat, akkor a keresés a fájl
elejétől folytatódik és a kurzor pozíciójáig tart.
   A parancs ismétlésénél ("n") a találatok bejárása során visszajutsz a
legelső találathoz is, amit ha nem veszel észre akkor örökké keresni fogsz!
Hogy végképp ne vessz el, a Vim az alábbi üzeneteket írja ki a command-linera:

	search hit BOTTOM, continuing at TOP ~

Ha visszafelé irányban keresel ("?"), akkor az alábbi üzenetet láthatod:

	search hit TOP, continuing at BOTTOM ~

Sajnos még mindig nem láthatod, hog mikor van a kurzorod az első találaton.
Egyik módja, ha bekapcsolod a 'ruler' opciót: >

	:set ruler

A jobb alsó sarokban láthatod (az állapotsoron, ha engedélyezve van)  a 'ruler'-t,
mely megjeleníti kurzor sor- és oszlopszámát:

	101,29       84% ~

Jegyezd meg, hogy melyik soron található az első találat, és legközelebb már
tudni fogod, hogy áthaladtál-e rajta.


KÖRKÖRÖS KERESÉS KIKAPCSOLÁSA

A körkörös keresést kikapcsolhatod: >

	:set nowrapscan

Így, ha a keresésed eléri a fájl végét, akkor hibaüzenetet kapsz:

	E385: search hit BOTTOM without match for: forever ~

Ezért, hogy az összes találatot megtaláld, először a fájl elejére kell
ugranod a "gg" paranccsal és addig keresni, amíg hibaüzenetet nem kapsz.
   A fájl teteje által kiváltott hibaüzenet kereséskor ("?"):

	E384: search hit TOP without match for: forever ~

==============================================================================
*27.3*	Offszetek

Ha a keresés találatot eredményez, akkor a kurzor az egyező minta elejére
kerül. Ha ez nem megfelelő, akkor offszet segítségével a Vim képes
pozícionálni a kurzort. Előre keresésnél "/", a mintát egy "/" karakter, és az
offszet értéke követi: >

	/default/2

A parancs mintája a "default" szó, az offszet pedig 2, így a kurzor a találat
sorához képest két sorral lejjebb (a sor elején) fog elhelyezkedni.

Ha az offszet egy szám, akkor a kurzor a sor elejére kerül. Az offszet lehet
negatív és pozitív is. Ha a szám negatív, akkor a találattól feljebb, ha
pozitív, akkor a találattól lejjebb helyezi a kurzort.


KARAKTER OFSZETEK

Az "e" offszet jelzi a találat végét, a kurzort így a találat végére mozgatja:
>
	/const/e

ez a kurzort a "t" betűre helyezi a "const" szóban.
   Erről a pozíciótól egy szám argumentummal tudunk elmozdulni akár pozitív,
akár negatív irányba. Az argumentum értéke határozza meg az elmozdulást. >

	/const/e+1

Pozitív egész szám a kurzort jobbra mozgatja, negatív elmozdulás pedig balra.
Például: >

	/const/e-1

Ebben az esetben a kurzor a "const" szó "s" betűjére kerül.

A "b" offszet a szó elejére helyezi a kurzort, mely nem túl hasznos
önmagában, hiszen az alapértelmezett keresés is így működik, ezért az
általános használata mindig egy számmal történik, adott karakterszámmal
mozdítja el a kurzort. Például: >

	/const/b+2

A kurzor két karakterrel jobbra mozdul el a keresés után ("n").


ISMÉTLÉS

A keresés ismétlése különböző offszettel, csak hagyjuk ki a mintát: >

	/that
	//e

Egyenértékű ezzel: >

	/that/e

Ismétlés azonos offszettel: >

	/

Az "n" ugyanazt csinálja.  Megismétli a keresést ugyanazzal az offszettel: >

	//


KERESÉS VISSZA IRÁNYBAN

A "?" parancs az offszeteket ugyanígy használja, következetesen "?" kell
használnunk a keresés és az offszet elválasztásánál: >

	?const?e-2

Az "e" és "b" (begin - end) is ugyanúgy működnek, irányuk nem változik meg a "?"
használatánál.


KEZDŐPOZÍCIÓ

A keresés kezdőpontja a kurzor. Ha offszeteled a keresést, gondot okozhat.
Például: >

	/const/-2

A keresés megtalálja a "const" szót, mely után két sor lép felfelé. Ha "n"
paranccsal a következő találatra szeretnél ugrani, akkor második alkalommal is
ugyanarra a találatra érkezel, ezért sohasem fogsz előrébb jutni.
   Rosszabb esetben: Képzeld el, hogy van még egy "const" szó két sorral
feljebb. Ez lényegében visszább viszi a kurzort!

Offszetes keresésnél a Vim kompenzál pár karaktert vissza és előre irányban,
hogy ne legyen egy találat kétszer a körbejárás során.

==============================================================================
*27.4*	Illesztés több alkalommal

A "*" előtt álló elem akárhányszor előfordulhat (akár nulla alkalommal is). 
Ezért: >

	/a*

Ez illeszkedik: "a", "aa", "aaa", stb.  De szintén illeszkedik az  "" 
(üres string), mivel nulla alkalommal is előfordulhat.
   Az "*" csak az őt megelőző elemre vonatkozik. Ezért "ab*" illeszkedik:
"a", "ab", "abb", "abbb", stb.  Ha ezt hosszabb karakterláncra is ki
szeretnénk terjeszti, akkor csoportosítanunk kell őket zárójelek segítségével.
Ezt úgy tehetjük meg, hogy a karakterlánc elé "\(", mögé pedig "\)" írunk.
Azaz: >

	/\(ab\)*

Illeszkedik: "ab", "abab", "ababab", stb,  és persze "".

Az üres sztring illesztését úgy tudjuk elkerülni, ha a "\+" metakaraktert
használjuk, mely megengedi, hogy az előző elem egyszer, vagy többször
forduljon elő. >

	/ab\+

Illeszkedik "ab", "abb", "abbb", stb. Nem illeszkedik az összes olyan
sztringre, melyekben "a" nem "b"-t követi.


Opcionális elem, "\=".  Például: >

	/folders\=

Illeszkedik "folder" és "folders"-re.


SZÁMSZERŰSÍTÉS

Ha egy meghatározott mennyiséget szeretnél engedélyezni, akkor használd a
"\{n,m}" formátumot. Az "n" és "m" pozitív egész szám. Ennek hatására a
megelőző elem minimum "n" és maximum "m" alkalommal szerepelhet. |inclusive|.
Például: >

	/ab\{3,5}

Illeszkedik "abbb", "abbbb" and "abbbbb".
  Ha "n" nincs meghatározva, akkor értéke 0. Ha "m" nincs meghatározva, akkor
értéke a végtelen. Ha ",m" hiányzik a mintából, akkor pontosan "n" alkalommal.
Például:

	minta		egyezések száma ~
	\{,4}		0, 1, 2, 3 or 4
	\{3,}		3, 4, 5, stb.
	\{0,1}		0 vagy 1, azaz \=
	\{0,}		0 vagy többször, azaz *
	\{1,}		1 vagy többször, azaz \+
	\{3}		3


A LEHETŐ LEGKISEBB ILLESZTÉS

Az eddigi minták az összes karakterre illeszkedtek. Lehető legkisebb illesztés
formátuma: "\{-n,m}". Működése megegyezik a "\{n,m}" mintáéval, kivéve, hogy a
lehető legkevesebb karaktert próbálja illeszteni. Például, a következő minta:
>
	/ab\{-1,3}

Illeszkedni fog "ab"-re az "abbb"-ben. Tulajdonképpen, soha nem fog egy b-nél
többre illeszteni, hiszen nincs szükség rá. Más módszerrel kényszeríthetjük,
hogy többet illesszen az alsó határtól.
   Ugyanezek a szabályok vonatkoznak ha "n" és "m"-et eltávolítjuk, "\{-}". Ez
illeszkedik 0  vagy több alkalommal, a lehető legkevesebbszer. Általában
kombinációban használjuk más elemekkel: >

	/a.\{-}b

Illeszkedik "axb"-re az "axbxb"-ben.  Ha így használtuk volna: >

	/a.*b

".*" a lehető legtöbb karakterre illesztett volna, "axbxb"-re is.

==============================================================================
*27.5*	Alternatívák

Az "vagy" operátor szintaktikája az "\|". Például: >

	/foo\|bar

Ez illeszkedik "foo" és "bar" szavakra. A többi alternatívát hozzáfűzzük: >

	/one\|two\|three

Illeszkedik "one", "two" és "three" szavakra.
   Ha megengedjük, hogy többször is előforduljanak, akkor  "\(" közé "\)"
zárjuk őket: >

	/\(foo\|bar\)\+

Ez illeszkedik "foo", "foobar", "foofoo", "barfoobar", stb. szavakra.
   Egy másik példa: >

	/end\(if\|while\|for\)

Ez illeszkedik "endif", "endwhile" és "endfor" szavakra.
???
A related item is "\&".  This requires that both alternatives match in the
same place.  The resulting match uses the last alternative.  Example: >
???  >
	/forever\&...

Ez illeszkedik a "forever" szóban lévő "for"-ra.  A "fortuin" szóra nem fog
illeszkedni.

==============================================================================
*27.6*	Karaktertartományok

"a", "b" vagy "c" illesztéséhez használhatjuk ezt a mintát: "/a\|b\|c". Ha az
összes karakterre szeretnél illeszteni "a"-tól "z"-ig, ezzel a módszerrel
sokáig tartana leírni a mintát. Ezért rövidítést használunk: >

	/[a-z]

A [] szimpla karakterekre illeszt, melyeket a [] belsejében kell
definiálnunk. A karaktereket listaszerűen beírhatjuk így: >

	/[0123456789abcdef]

Ez csak azokra a karakterekre illeszt, amelyek a lista részét képzik. Egymást
követő karakterek esetén meghatározhatjuk a tartományt. "0-3" jelentése
"0123". "w-z" jelentése "wxyz". Ezért a fenti minta így rövidíthető: >

	/[0-9a-f]

Ha konkrétan a "-" karaktert szeretnéd illeszteni, akkor szúrd be külön a
lista elejére (vagy végére). 
    Az alábbi speciális karakterek használhatjuk a [] tartományban (és az
egész mintában:

	\e	<Esc>
	\t	<Tab>
	\r	<CR>
	\b	<BS>

A [] tartománynak vannak speciális esetei, melyekről |/[]| itt olvashatsz.


KOMPLEMENTER TARTOMÁNYOK

A "^" jelölés mindig a következő elemre vonatkozik (megtiltja az egyezést).
A [] illeszti a közbezárt karaktereket. Például: >

	/"[^"]*"
<
	 "	  idézőjel
	  [^"]	  bármilyen karakter, ami nem idézőjel
	      *	  amennyiszer csak lehetséges
	       "  idézőjel újra

Erre illeszkedik "foo" és "3!x", beleértve az idézőjeleket is.


ELŐDEFINIÁLT TARTOMÁNYOK

A tartományokat gyakran használjuk illesztésekben. A Vimben számos tartomány
rendelkezésre áll: >

	/\a

Az összes kis- és nagybetű (alpha). Egyenértékű ezzel "/[a-zA-Z]". A Magyar 
ékezetes karakterek a definíció nem tartalmazza. Tartományok: >
<
	elem	illeszkedik			egyenlő ~
	\d	szám			[0-9]
	\D	nem-szám		[^0-9]
	\x	hex szám		[0-9a-fA-F]
	\X	nem-hex szám		[^0-9a-fA-F]
	\s	üres karakter		[ 	]     (<Tab> és <Space>)
	\S	nem-üres karakter	[^ 	]     (nem <Tab> és <Space>)
	\l	kisbetűs alpha		[a-z]
	\L	nem-kisbetűs alpha	[^a-z]
	\u	nagybetűs alpha		[A-Z]
	\U	nem-nagybetűs alpha	[^A-Z]

	Megjegyzés:
	A csoportok nem szerepelhetnek [] jelen belül. Azaz, "[\d\l]" nem
	nem érvényes illesztés. Ehelyett így határozzuk meg: "\(\d\|\l\)".

Lásd |/\s| a teljes listához.

==============================================================================
*27.7*	Karakterosztályok

A karakterosztályok egy előre meghatározott karakterek halmazára illeszt. A
karakterosztályok hasonlóak, azonban egy lényegi dologban eltérnek: a
karaktereket újradefiniálhatjuk anélkül, hogy a keresési mintát módosítanunk
kellene.
   Például, az alábbi minta: >

	/\f\+

Az "\f" csak fájlnév-karakterekből állhat, azaz minden olyan karakterre
illeszt, amely szerepelhet a fájlnevekben.
   Az osztály tartalma platformfüggő, ugyanis a MS-Windows és a Unix rendszerek
fájlnevei eltérnek egymástól. Windowson a "\" karakter szerepel az elérési
utakban, Unix rendszeren pedig a "/". Az 'isfname' opció leírja az adott 
rendszeren lévő érvényes fájlnév-karaktereket. Alapértelmezett értéke Unix
rendszeren:
>
	:set isfname
	isfname=@,48-57,/,.,-,_,+,,,#,$,%,~,=

Az 'isfname' opció platformonként különböző, azért ha keresést hajtasz végre,
akkor az a rendszerhez fogja igazítani az "\f" értékét.

	Megjegyzés:
	Pontosabban, Unix rendszeren fájlunkat bárminek elnevezhetjük, nincs
	megkötés, akár üres karaktereket is használhatunk. Elméletileg korrekt,
	ha a 'isfname' opció tartalmazná ezen karaktereket, de abban az esetben
	lehetetlen lenne megtalálni a fájl végét a szövegben. Ezért 'isfname'
	értéke kompromisszum a kettő között.

A karakterosztályok:

	elem	illeszkedik			opció ~
	\i	azonosító karakterek		'isident'
	\I	mint \i, kivéve számok
	\k	kulcsszó karakterek		'iskeyword'
	\K	mint \k, kivéve számok
	\p	nyomtatható karakter		'isprint'
	\P	mint \p, kivéve számok
	\f	fájlnév karakter		'isfname'
	\F	mint \f, kivéve számok

==============================================================================
*27.8*	Sortörés illesztése

A Vimben olyan mintákat is írhatunk, melyek magukba foglalják a sortörést.
Meg kell határoznunk a sortörés helyzetét, mert összes eddig említett elem nem
illesztett sortörésre.
   Sortörés illesztése meghatározott helyen "\n" elemmel: >

	/one\ntwo

A mint akkor fog illeszkedni, ha "one" a sor végén szerepel, sortörést
követően pedig a következő sor "two" karakterekkel kezdődik. Ha a "one two"-t
is illeszteni szeretnéd, akkor mindkét karakternek illeszkednie kell (a
sortörésnek is és a szóköznek is). Ehhez a "\_s" elemet használjuk: >

	/one\_stwo

Tetszőleges számú üres karakter: >

	/one\_s\+two

Mely illeszti "one  "-t a sor végén, és "   two"-t is a következő sor elején.
"\s" üres karakterre illeszt, "\_s" üres karakterre vagy sortörésre.

Hasonlóan "\a" kis- nagybetűs karakterekre illeszt, "\_a" kis- nagybetűs
karakterek vagy sortörés. A összes tartomány és karakterosztály módosítható
ily módon "_" hozzáadásával.

Például: "\_." illeszt az összes karakterre, vagy sortörésre.

	Megjegyzés:
	"\_.*" illeszt mindenre a fájl végéig. Légy óvatos, belassíthatja a
	keresést.

Másik példa a "\_[]", tartomány, mely illeszt sortörésre: >

	/"\_[^"]*"

Mely megtalálja az idézőjelek közé zárt szöveget több soron keresztül.

==============================================================================
*27.9*	Példák

Most következzen egy maréknyi hasznos minta. Itt láthatjuk az előbb említett
dolgok kombinációját:


KALIFORNIAI RENDSZÁM ILLESZTÉSE

A formátum: "1MGU103", azaz egy szám, három nagybetűs karakter, három szám. A
legelemibb minta: >

	/\d\u\u\u\d\d\d

Mennyiséggel is elláthatjuk a karakterosztályokat: >

	/\d\u\{3}\d\{3}

[] tartományok használata: >

	/[0-9][A-Z]\{3}[0-9]\{3}

Melyiket használd? Amelyiket megjegyzed. Ha az összeset meg akarod jegyezni,
akkor egy tanács: az utolsót ne használd, sokáig tart gépelni.


AZONOSÍTÓ KERESÉSE

C programokban (és még számos programnyelvben), az azonosító karakterrel
kezdődik, melyeket számok és egyéb karakterek követhetnek. Az "_" karakterek
használata is megengedett. Ezeket így találhatjuk meg: >

	/\<\h\w*\>

A "\<" ás "\>" karakterek csak teljes szavakra illesztenek. A "\h"
karakterosztály definíciója "[A-Za-z_]", a "\w" osztályé "[0-9A-Za-z_]".

	Megjegyzés:
	A "\<" ás "\>" az 'iskeyword' opció függvénye. Ha tartalmazza a "-"
	karaktert, akkor például az "ident-" nem fog illeszkedni. Ebben a
	helyzetben: >

		/\w\@<!\h\w*\w\@!
<
	Mely megvizsgálja, hogy "\w" illeszkedik-e az azonosító előtt és után.
	Lásd |/\@<!| és |/\@!|.

==============================================================================

Következő fejezet: |usr_28.txt|  Foldolás

Jogi információk: lásd |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:

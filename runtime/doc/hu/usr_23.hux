*usr_23.txt*	For Vim version 8.2.	Last change: 2020 Dec 19

		  Bram Moolenaar: Vim felhasználói kézikönyv

			  Egyéb fájlok szerkesztése


Ebben  a fejezetben nem hagyományos fejlesztését mutatjuk be. A Vim képes a
tömörített és titkosított állományok szerkesztésére, interneten hozzáférhető
fájlok szerkesztésére. Bizonyos keretek között, de bináris fájlok is
szerkeszthetőek.

|23.1|	DOS, Mac és Unix fájlok szerkesztése
|23.2|	Interneten lévő fájlok szerkesztése
|23.3|	Titkosítás
|23.4|	Bináris fájlok
|23.5|	Tömörített állományok

Következő fejezet: |usr_24.txt|  Beillesztés gyorsan
    Előző fejezet: |usr_22.txt|  Fájlok keresése
 Tartalomjegyzék: |usr_toc.txt|

==============================================================================
*23.1*	DOS, Mac és Unix fájlok szerkesztése

A régi szép időkben a régi old Teletype típusú gépek két karaktert használtak
az új sor kezdéséhez. Az első karakter felelt a kocsi pozíciójának
visszaállítására (kocsivissza, <CR>), a másik karakter pedig a soremelésért
felet (line feed, <LF>). 
   A computerek kezdeti időszakában a tárolóeszközök drágák voltak. Néhányan
úgy döntöttek, hogy ezért nem alkalmazzák az addig elterjed két karakteres
szabványt. A Unix mérnökei úgy döntöttek, hogy a sorok végét <NL> karakterrel
jelölik. Az apple emberei <CR> karakter mellett döntöttek. A Windows
szakemberei pedig nem döntöttek, ők továbbra is a bevált <CR><NL> karakterek
mellett tartottak ki. (A helpfájlokban mi <NL> karaktereket használunk).
   Ez azt jelenti, hogy a sorok megjelenítése nem biztos, hogy minden
platformon egyezni fog. A Vim természetesen automatikusan felismeri a sorvégi
karaktereket és a színfalak mögött úgy intézi a dolgait, hogy ez számodra
ne okozzon problémát.
   A 'fileformats' opció különböző formátumokat határoz meg, melyet a Vim
sorrendben kipróbál, ha új fájlt nyitunk meg. Az alábbi példa arra utasítja a
Vimet, hogy először a UNIX formátumot próbálja alkalmazni, végül pedig az
MS-DOS formátumot: >

	:set fileformats=unix,dos

A formátumról üzenetek formában tájékozódhatsz. Natív fájlok szerkesztésénél
(Unix fájl - Unix rendszeren) természetesen nincs semmilyen üzenet, hiszen nem
szükséges. Ellenkező esetben (Unix fájl - MS-Windows rendszeren) a Vim
tájékoztatni fog a fájl eredetét illetően: >

	"/tmp/test" [dos] 3L, 71C ~

Mac fájloknál a "[mac]" jelölés látható.
   A fájl formátuma eltárolódik a 'fileformat' változóban. A megnyitott fájl
fájlformátumának kiírása: >

	:set fileformat?

A Vim által használt három név:

	unix		<NL>
	dos		<CR><NL>
	mac		<CR>


MAC FORMÁTUM HASZNÁLATA

Uni rendszeren <NL> jelzi a sorok végét. Nem ritka a sor közepén lévő <CR>
karakter. Sajnos ez igen gyakori a Vi (és Vim) szkriptek esetében.
   A Macintosh rendszeren, ahol <CR> jelenti a sortörést, <NL> karakterek
tartalmazhatnak a sorok. 
   Így nem lehetünk 100%-ig biztosak abban, hogy a <CR> és <NL> karaktereket
tartalmazó fájl melyik rendszeren íródott. A Vim feltételezi, hogy Unix
rendszeren nagy valószínűséggel nem Mac fájlt szeretnél szerkeszteni, ezért a
fájltípushoz nem végez külön ellenőrzést. Ha a "mac" fájlformátumot is
ellenőriztetni szeretnéd, akkor add hozzá a 'fileformats' változóhoz: >

	:set fileformats+=mac

Egy lépéssel közelebb kerültünk, hiszen a Vim még mindig dönthet rosszul.


A FORMÁTUM FELÜLÍRÁSA

Ha emlékszel még a régi jó öreg Vi-os időkre, ahol MS-DOS fájlok szerkesztése
esetén a sorvégek ^M karakterekkel voltak jelölve. (^M a <CR>). Az automatikus
felismerés ezt elkerüli. Dönthetsz, úgy hogy a fájlt egy másik
fájlformátumként szerkeszted, de akkor felül kell írnod a jelenleg érvényben
lévő fájlformátumot: >

	:edit ++ff=unix file.txt

A "++" egy speciális utasítás, melyeket egy változónév követ. Ezek arra
utasítják a Vimet, hogy írja felül a változó alapértelmezett értékét. "++ff" a
'fileformat' változót jelenti, használhatjuk még így is: "++ff=mac" vagy
"++ff=dos". 
   A parancs annyira speciális, hogy csak a "++ff" és az "++enc" parancsokkal
van implementálva. A teljes nevük pedig: "++fileformat" és "++encoding".


ÁTALAKÍTÁS

A 'fileformat' opció használatával átalakíthatod a fájlokat egyik formátumról
a másikra. Tegyük fel, hogy van egy MS-DOS fájlod README.TXT néven, amit át
szeretnél konvertálni Unix formátumra. Töltsd be a fájlt a szerkesztőbe: >

	vim README.TXT

A Vim felismeri a dos formátumot. Most változtasd meg a formátumot UNIX
formátumra: >

	:set fileformat=unix
	:write

A fájl Unix formátumban íródik ki.

==============================================================================
*23.2*	Interneten lévő fájlok szerkesztése

E-mailben kapsz egy fájlhivatkozást. Például:

	Itt még többet megtudhatsz: ~
		ftp://ftp.vim.org/pub/vim/README ~

Megnyitod a böngésződet, begépeled az címet, kiválasztod, hogy..... A többit
le sem érdemes írni.
   Az egyszerűbb mód. Vidd a kurzort a címre: >

	gf

Ha szerencséd van, akkor Vim felismeri a protokollt, letölti és megnyitja
szerkesztésre. A fájl megnyitása új ablakban: CTRL-E f.
   Ha valami nem a terv szerint megy, akkor a program hibaüzenettel
tájékoztat. Ez lehet hibás cím, hiányzó jogosultság, hálózati hiba stb. A
pontos hiba okát nem mindig egyszerű megállapítani, ezért jobb ha tényleg
kézzel töltöd le a fájlt.

Az interneten lévő fájlokhoz a beépített netrw beépülő segítségével
hozzáférhetünk. Jelenleg az alábbi protokollok támogatottak:

	ftp://		uses ftp
	rcp://		uses rcp
	scp://		uses scp
	http://		uses wget (reading only)

A Vim nem képes az önálló kommunikációra, azért a rendszereden lévő programok
közül csemegézik. A legtöbb Unix rendszeren az "ftp", "rcp" rendelkezésre áll.
Érdemes telepíteni az "scp" és "wget" programokat is.

Új fájlok szerkesztése estén (beleértve ":edit" és ":split") a Vim felismeri a 
fájlokra mutató hivatkozásokat. Az írási műveletek természetesen nem működnek,
ha a forrásunk egy webcím.

További olvasnivaló, jelszavak, stb. |netrw|.

==============================================================================
*23.3*	Titkosítás

Vannak információk, melyeket nem szívesen hozol nyilvánosságra. Például, olyan
munkaállomásokon, melyeken több felhasználó is dolgozhat. Ha titkosítod a fájl,
akkor rajtad kívül senki más nem tudja majd azt olvasni. 
   A titkosításhoz használd a "-x" argumentumot a Vim indításakor. Például: >

	vim -x exam.txt

Egy promptan meg kell adnod a titkosításhoz használt kulcsot:

	Enter encryption key: ~

Írd be a jelszót. A begépelt karakterek helyett csillagokat fogsz látni. A
gépelési hibák kiszűrésére a jelszót meg kell ismételni:

	Enter same key again: ~

Ezek után a fájl szerkesztése a már megszokott módon történik. Mentéskor a fájl
titkosítva lesz.
   A fájl újbóli megnyitásakor már nem kell használnod az "-x" argumentumot.
Amennyiben a fájl titkosított, be kell írnunk azt a fájl megjelenítéséhez.
   Más szerkesztőben sem olvasható a fájl, mert a tartalma nem lesz 
felismerhető. A jelszó biztonságos, nehezen törhető, mivel a Vim nem ellenőrzi,
hogy a helyes jelszót adtuk-e meg.


TITKOSÍTÁS BE ÉS KIKAPCSOLÁSA

A titkosítás kikapcsolásához adjunk át egy üres stringet a 'key' opciónak: >
>
	:set key=

A következő mentés alkalmával a fájl nem lesz titkosítva. 
   A titkosítás 'key' opción keresztüli beállítása nem jó ötlet, mert a jelszó
a képernyőre íródik, így azt bárki elolvashatja.
   Az ":X" parancs használata viszont csillagozza a jelszót (ugyanúgy, mint az
   "-x" argumentum: >

	:X
	Enter encryption key: ******
	Enter same key again: ******


A TITKOSÍTÁS KORLÁTAI

A Vim által használt titkosítási algoritmus nem túl erős. Elég arra, hogy
távol tartsa a bámészkodókat, de nem tudja felvenni a versenyt egy képzett
szakemberrel szemben. A swapfájl és az undo file tartalma szintén titkosítva
van (ha alkalmazzuk a titkosítást). Letilthatod a swapfájlt, de ezzel emeled a 
potenciális adatvesztést lehetőségét, hiszen az összes fájl a memóriában
tárolódik. Az undo file tiltásával nem tudsz visszavonni a fájl újbóli
megnyitását követően.
   A swapfájlt megkerülhető, ha a terminálból átadjuk az "-n" argumentumot.
Például, egy titkosított fájl szerkesztése swapfájl nélkül: >

	vim -x -n file.txt

Swapfájl kikapcsolása szerkesztés alatt álló fájlokban: >

	:setlocal noswapfile

Swapfájl használata nélkül a helyreállítás lehetetlen. Mentsd a fájlt
gyakrabban, hogy elkerüld a veszélyt.

Amíg a fájl a memóriában tartózkodik, addig egyszerű szöveges formátumként
tekintünk rá. Megfelelő jogosultságokkal a memóriát olvasva kiolvasható a
szerkesztő tartalma.
   Viminfo használatakor tisztában kell lennünk azzal, hogy regisztereink
tartalma is titkosítatlanul jelenik meg.
   Ha biztonságban szeretnél lenni, akkor fájljaidat csak hordozható
számítógépen, hálózat nélkül, megfelelő titkosítási eszközökkel ellátva
szerkeszd. A gépet pedig tartsd széfben, ha nem használod.

==============================================================================
*23.4*	Bináris fájlok szerkesztése

Képesek vagyunk bináris fájlokat szerkeszteni, noha a Vim nem erre lett
tervezve, ezért csak korlátozott mértékben. A fájlok megnyithatóak,
karaktereket tudsz cserélni, menteni úgy, hogy csak azok a karakterek
változnak amelyeket megváltoztattál.
   Meg kell akadályoznunk, hogy a Vim használja az okos trükkjeit (melyek itt
negatívan hatnának), ezért a fájl megnyitása a "-b" argumentummal történik: >

	vim -b datafile

Ez bekapcsolja a 'binary' opciót. Így a szerkesztő nem végez el olyan
beállításokat, mely olvashatatlanná tenné a fájl. Például, a 'textwidth'
opciót az argumentum 0-ra állítja, letiltva ezzel a sorok automatikus
formázását. A fájl minden esetben Unix formátumban kerül beolvasásra.

Bináris módban megváltoztathatjuk a programok kimenetét. Légy óvatos, ne
törölj, vagy cserélgess karaktereket, ez futtathatatlanná teheti a programot.
Cseréhez használd az "R" parancsot.

A fájl nagy része olvashatatlan lehet. A hex formátum megjelenítése: >

	:set display=uhex

Egyéb esetben a "ga" paranccsal nézhetjük meg a kurzor alatti karakter
értékét. A kimenet, ha a kurzor az <Esc> karakteren áll:

	<^[>  27,  Hex 1b,  Octal 033 ~

Elképzelhető, hogy nincs sok sortörés a fájlban. Áttekintéshez kapcsoljuk ki a
'wrap' opciót: >

	:set nowrap


BYTE POZÍCIÓ

Kurzor alatt lévő byte megjelenítése: >

	g CTRL-G

A kimenet informatív:

    Col 9-16 of 9-16; Line 277 of 330; Word 1806 of 2058; Byte 10580 of 12206 ~

Az utolsó két szám a byte-pozíció fájlban és az összes byte. Ez figyelembe
veszi a 'fileformat' általi megjelenítést okozó byte-differenciát, melyeket a
sortörések okoznak.
    Adott bytehoz a "go" paranccsal tudunk ugrani. Például, ugrás a 2345
bytehoz: >

	2345go


XXD HASZNÁLATA

A valódi bináris szerkesztők kétféleképpen mutatják a szöveget: ahogy látod,
illetve hex formátumban. Ezt úgy érheted el, ha először átkonvertálod a fájlt
az "xxd" programmal (a Vim tartalmazza).
   Elsőként nyisd meg a fájlt bináris módban: >

	vim -b datafile

Konvertált át a fájlt hex dumppal (xxd): >

	:%!xxd

A fájl valahogyan így fog kinézni:

	0000000: 1f8b 0808 39d7 173b 0203 7474 002b 4e49  ....9..;..tt.+NI ~
	0000010: 4b2c 8660 eb9c ecac c462 eb94 345e 2e30  K,.`.....b..4^.0 ~
	0000020: 373b 2731 0b22 0ca6 c1a2 d669 1035 39d9  7;'1.".....i.59. ~

Most már úgy szerkeszted a fájlt, ahogy szeretnéd. Ebben az állapotban még
egyszerű szövegként tekintünk az állományra. Ezért vissza kell alakítanod, ha
végeztél:
>
	:%!xxd -r

A hex részben történt változás íródik ki (a jobb oldal csak a megjelenítést
szolgálja, ezért figyelmen kívül lesz hagyva).

Az xxd man oldalait érdemes átnézned.

==============================================================================
*23.5*	Tömörített állományok

Ez könnyű: a tömörített állományokat ugyanúgy szerkesztheted, mintha szöveges
állományok lennének. A "gzip" elintézi a kibontást szerkesztés előtt, és
újratömöríti  mentéskor.
   Az alábbi tömörítő algoritmusok támogatottak:

	.Z	compress
	.gz	gzip
	.bz2	bzip2

A szerkesztő a rendszeren lévő programokat használja a műveletek elvégzéséhez,
ezért elképzelhető, hogy a használatuk előtt azt telepítened kell.

==============================================================================

Következő fejezet: |usr_24.txt|  Beillesztés gyorsan

Jogi információk: lásd |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:

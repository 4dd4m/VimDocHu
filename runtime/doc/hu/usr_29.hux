*usr_29.txt*	For Vim version 8.2.	Last change: 2016 Feb 27

		  Bram Moolenaar: Vim felhasználói kézikönyv

			    Mozgás kódbázisban

A Vim alkotója maga is programozó, így nem csoda, hogy ennyi funkció került a
Vimbe. Ugorj oda a változókhoz és találd meg a használati helyeiket.
Deklarációk előnézete külön ablakban. Még több a következő fejezetben.

|29.1|	Tagek használata
|29.2|	Az előnézeti ablak
|29.3|	Mozgás kódbázisban
|29.4|	Globális azonosítók keresése
|29.5|	Lokális azonosítók

Következő fejezet: |usr_30.txt|  Programok szerkesztése
    Előző fejezet: |usr_28.txt|  Foldolás
 Tartalomjegyzék: |usr_toc.txt|

==============================================================================
*29.1*	Tagek használata

Mi a tag? A tag leírja, hogy az adott kód eleme, melyik fájlban van
definiálva. Például képzeljünk el egy függvénydefiníciót C vagy C++
programokban. A tagek listáját a tagfájl tartalmazza. A Vim ezt arra használja
fel, hogy közvetlenül definícióhoz ugorjon (függvény, változó, osztály stb.).
   Tagfájl generálása a (könyvtárban lévő) összes C fájlhoz: >

	ctags *.c

"ctags" egy külső program. A legtöbb Unix rendszeren alapból installálva van.
Ha nincs a gépeden, akkor innen töltheted le (Exuberant): 

	http://ctags.sf.net ~

A fájl generálása után megkereshetjük a függvénydefiníciókat, melyekhez
odaugorhatunk. >

	:tag startlist

A parancs megtalálja a "startlist" nevezetű függvényt még akkor is, ha az egy
másik fájlban található.
   A CTRL-] parancs kurzor alatt lévő tagre ugrik (éppen úgy, mint itt a
kézikönyvben), mellyel gyorsan bejárhatjuk a kódot. Tegyük fel, hogy a
"write_block" függvényben vagy. Látod, hogy a függvény meghívja a "write_line"
nevű függvényt. De mit csinál "write_line"? Vigyük a kurzort a "write_line"
szóra és nyomjunk CTRL-] billentyűket, a függvény pedig  megjelenik előttünk.
   A "write_line" függvény "write_char" függvényt hívja. Elért a kurzort a
"write_char"-ra viszed és CTRL-]-t nyomsz. Már láthatod "write_char"
definícióját.

	+-------------------------------------+
	|void write_block(char **s; int cnt)  |
	|{				      |
	|   int i;			      |
	|   for (i = 0; i < cnt; ++i)	      |
	|      write_line(s[i]);	      |
	|}	    |			      |
	+-----------|-------------------------+
		    |
	     CTRL-] |
		    |	 +----------------------------+
		    +--> |void write_line(char *s)    |
			 |{			      |
			 |   while (*s != 0)	      |
			 |	write_char(*s++);     |
			 |}	  |		      |
			 +--------|-------------------+
				  |
			   CTRL-] |
				  |    +------------------------------------+
				  +--> |void write_char(char c)		    |
				       |{				    |
				       |    putchar((int)(unsigned char)c); |
				       |}				    |
				       +------------------------------------+

A ":tags" parancs mutatja azokat a tageket, melyeket utad során bejársz:

	:tags
	  # TO tag	   FROM line  in file/text ~
	  1  1 write_line	   8  write_block.c ~
	  2  1 write_char	   7  write_line.c ~
	> ~
>
A CTRL-T parancs az előző tagre lép. A példában így léphetsz vissza a 
"write_line" függvényhez (a "write_char" függvényből). 
   Argumentumként fogadja a visszafelé lépések számát. Most menjünk előre.
Eddig visszafelé léptünk. Az alábbi parancs a taglista legtetején elhelyezkedő
taghez ugrik: >

	:tag

Argumentumként fogadja az előrelépések számát. Például: ":3tag". CTRL-T pedig
a visszalépésekét.
   A híváslistában az ismertetett parancsokkal fel-le mozoghatunk. Ha
eltévedtél, akkor ":tags" parancs.


SPLITEK

A ":tag" megjeleníti az új függvényt az aktív ablakban. Mindkettőt látni
akarod? Splitelheted az ablakot (":split"), melyet kombinálhatsz a ":tag"
paranccsal. A parancs rövidítése pedig: >

	:stag tagname

Az ablak splitelése és ugrás a kurzor alatti taghez: >

	CTRL-W ]

A mennyiség prefixum meghatározza az új ablak magasságát.


MÉG TÖBB TAGFÁJL

Az összes fájlhoz létrehozható tagfájl az adott könyvtárban, melyet a Vim fel
tud használni a definíciók megkereséséhez. Ebben az esetben a
könyvtárszerkezetben nem mozoghatunk. Önmagában a Vim nem képes könyvtárat
váltani.
   Ezért a 'tags' változóba nekünk kell hozzáadnunk a tagfájlok útvonalait.
Például: >

	:set tags=./tags,./../tags,./*/tags

Tagfájlok hozzáadása az aktív könyvtárból, az összes alkönyvtárból és a
szülőkönyvtárból. 
   Szép kis mennyiség, de lehet, hogy elég sem lesz. Például, ha a
"~/proj/src" könyvtárban fájlt szerkesztünk, akkor nem fogjuk látni
"~/proj/sub/tags" fájlokat. Kijelölhetjük az egész könyvtárfát. Például: >

	:set tags=~/proj/**/tags


ONE TAGS FILE

Ha a Vim több helyen kutat tagfájlok után, akkor lehet hallani, hogy dolgozik
a rendszer, esetenként be is lassulhat. Ilyenkor ajánlott ezt az időt egy
"globális" tagfájl létrehozására fordítani. Valószínűleg bekapcsolva kell
hagyni a gépet éjszakára. 
   Ennek követelménye a Exuberant ctags programja. Argumenttel tudjuk
feldolgozni a könyvtárfát: >

	cd ~/proj
	ctags -R .

A program legszebb tulajdonsága, hogy kezeli a fájltípusokat, mely nem csak C és
C++ programokkal működik, kezeli az Eiffelt és a Vim szkriptet is. Érdemes
átböngészni a ctags dokumentációját az egyéb trükkökért:
   Már csak el kell mondanunk a Vimnek, hogy merre találja ezt a nagy
tagfájlt: >

	:set tags=~/proj/tags


TÖBB EGYEZÉS

Ha egy függvényt több helyen is definiálunk (vagy metódust osztályokban), a
":tag" parancs mindig a legelsőhöz ugrik. Ha a jelenlegi fájlhoz van találat,
akkor kivételesen ez lesz a legelső találat.
   A jelenlegi tag további találataira ugrás: Ha egy függvényt több helyen is
definiálunk (vagy metódust osztályokban), a ":tag" parancs mindig a
legelsőhöz ugrik. Ha a jelenlegi fájlhoz van találat, akkor kivételesen ez
lesz a legelső találat.
   Ugrás a tagfájl további találataihoz:  >

	:tnext

Ismételd kedved szerint. Ha nagyon nagyon sok találatod van, akkor itt
kiválaszthatod, hogy melyikhez szeretnél ugrani: >

	:tselect tagname

A felbukkanó listából választhatsz:

	  # pri kind tag	       file ~
	  1 F	f    mch_init	       os_amiga.c ~
		       mch_init() ~
	  2 F	f    mch_init	       os_mac.c ~
		       mch_init() ~
	  3 F	f    mch_init	       os_msdos.c ~
		       mch_init(void) ~
	  4 F	f    mch_init	       os_riscos.c ~
		       mch_init() ~
	Enter nr of choice (<CR> to abort):  ~

Az azonosítókat az első oszlopban találod. A többi oszlopban elhelyezett
információ jó utalás a definíciót illetően.

Navigációs parancsok, melyekkel a találatok bejárhatók: 

	:tfirst			első egyezés
	:[count]tprevious	[count] előző egyezés
	:[count]tnext		[count] következő egyezés
	:tlast			utolsó egyezés

[count] értéke 1, ha nem adjuk meg az argumentumot.


TAGEK KITALÁLÁSA

A command-line kiegészítés jó kiindulópont a hosszú tagnevek rövidítésére.
Csak írd be az első részt és nyomj <Tab>-ot:j >

	:tag write_<Tab>

Az első találatra egészül tagnév. Ha ez nem az, amit kerestél, akkor addig
nyomj <Tab> billentyűt, amíg a helyeset meg nem találod.
   Valamikor a függvény nevének csak egy részére emlékszel (vagy több tag is
ugyanazzal a karakterekkel kezdődik, de mással végződik). A tagek kereséséhez
minta is felhasználható. 
   Tegyük fel, hogy ahhoz a taghez szeretnél ugrani, mely tartalmazza a "block"
szót. Először keresd meg: >

	:tag /block

Most használd a kiegészítést: nyomj <Tab>-ot. A keresés lefut "block" és a Vim
a legelső találathoz ugrik. 
   A tagnév előtt lévő "/" jel jelzi, hogy nem tagnév a keresés tárgya, hanem
egy minta. Az összes metakarakter használható. Ezért ha csak arra emlékszel,
hogy a tag "write_"-al kezdődött, akkor így találod meg: >

	:tselect /^write_

A "^" jel jelzi, hogy ez a minta eleje: a találatnak mindenképpen "write_"-al
kell kezdődjön, egyébként akkor is illeszkedne a keresésünk, ha a tag
közepében szerepel.


A TAGBÖNGÉSZŐ

A CTRL-] parancs a kurzor alatt lévő azonosító definíciójához ugrik, tehát
használhatod az azonosítók listáját "tartalomjegyzékként". Példa:
   Generáljuk le az azonosítók listáját (követelmény: Exuberant ctags): >

	ctags --c-types=f -f functions *.c

Most indítsuk el a szerkesztőt fájl nélkül, vertikális splitben pedig
szerkesszük (az elkészített fájlt): >

	vim
	:vsplit functions

Az összes függvényt láthatjuk az ablakban. A többit egyelőre hagyd figyelmen
kívül. Állítsd a 'setlocal' változót: ":setlocal ts=99", hogy egy kicsit
megtisztítsd a fájlt. 
   Ugyanebben az ablakban hozz létre egy mappet: >

	:nnoremap <buffer> <CR> 0ye<C-W>w:tag <C-R>"<CR>

Menj a kurzorral arra a sorra, amelyik függvényéhez ugrani szeretnél. Most
nyomj <Enter>-t. A választott függvény definíciója új splitben megnyílik.


RELATED ITEMS

A tag neveit betűérzéketlenné teheted, ha beállítod a 'ignorecase' és a
'tagcase' "followic"-n hagyod, vagy állítsd a 'tagcase'-t "ignore"-ra.

A 'tagbsearch' opció leírja, hogy a tagfájl rendezett-e vagy sem.
Alaphelyzetben feltételezzük, hogy a fájl rendezett, ezért a keresés sokkal
gyorsabb, viszont nem működik, ha a fájl rendezetlen.

A 'taglength' opció a tag szignifikáns karaktereit definiálja.

A |cscope| ingyenes szoftver. Nem csak a deklarálás, hanem a használatok helyeit
is nyilvántartja.

==============================================================================
*29.2*	Az előnézeti ablak

Függvényhívás esetén tudnod kell pontosan a függvény paramétereit,
argumentumait. A legjobb módszer, ha megvizsgáljuk a függvény definícióját. A
tagek mechanizmusa ezt is lehetővé teszi. A definíciót megjeleníthetjük külön
ablakban.
   "write_char" előnézeti ablaka: >

	:ptag write_char

A szerkesztő új ablakot nyit és a "write_char" taghez ugrik. Aztán visszavisz
a kezdeti pozícióra. A gépelést zavartalanul folytathatod, hiszen nem kell
használni a CTRL-W parancsot.
   Ha aa függvénynév megjelenik a szövegben, a definíciójához ugorhatunk
(előnézeti ablakban): >

	CTRL-W }

Létezik egy szkript, mely automatikusan megjeleníti a kurzor alatt lévő szó
definíciójának szövegkörnyezetét (pár sor). Lásd |CursorHold-example|.

Az előnézeti ablak bezárása: >

	:pclose


Fájl szerkesztése az előnézeti ablakban: ":pedit". Headerfájlok
szerkesztésénél jól jön, például: >

	:pedit defs.h

Végül a ":psearch", mely megtalálja a szót az aktív fájlban és includeolt
fájlokban, a találatot pedig az előnézeti ablakban jeleníti meg. Library
függvények szerkesztésénél jó szolgálatot tesz, ezekhez nem rendelkezel
tagfájllal. Például: >

	:psearch popen

Az előnézeti ablakban megjeleníti "stdio.h" fájl tartalmát: popen():

	FILE	*popen __P((const char *, const char *)); ~

A 'previewheight' opcióval szabályozható az előnézeti ablak magassága.

==============================================================================
*29.3*	Mozgás kódbázisban

A programok struktúrált szöveges állományok, ezért a Vim felismeri az
alkotóelemeket, melyekhez számos navigációs parancs köthető.
   A C programok gyakran használnak konstruktorokat: 

	#ifdef USE_POPEN ~
	    fd = popen("ls", "r") ~
	#else ~
	    fd = fopen("tmp", "w") ~
	#endif ~

Sokkal hosszabban, akár  egymásba ágyazva is. Vidd a kurzort az "#ifdef"-re és
nyomj %-t. A kurzor most az "#else" szón áll, újbóli % paranccsal pedig az
"#endif" utasításon landolunk. Újból %, "#ifdef" újra.
   Ha a konstruktor be van ágyazva, a szerkesztő megtalálja az utasítás párját.
Jó módszer, mellyel ellenőrizni lehet az "#endif" meglétét.
   Ha valahol az "#if" - "#endif"-ben tartózkodsz, akkor az utasítás elejére
így ugorhatsz:  >

	[#

Ha nem "#if" vagy "#ifdef" környezetben vagy, akkor azt a Vim hanggal jelzi.
Ugrás a következő "#else" vagy "#endif"-re: >

	]#

A két parancs átugorja az összes "#if" - "#endif" utasításokat. Például:

	#if defined(HAS_INC_H) ~
	    a = a + inc(); ~
	# ifdef USE_THEME ~
	    a += 3; ~
	# endif ~
	    set_width(a); ~

A kurzor az utolsó sorban van, "[#" az első sorra visz. Az "#ifdef" - "#endif"
blokkot a közepén kihagyja.


KÓDBLOKKOK MOZGATÁSA

A C programok blokkjai {} karakterekkel vannak elválasztva. Elég hosszúak
lehetnek. Ugrás a blokk elejéhez "[[". A végéhez  ugrás "][". Ez feltételezi
azt, hogy "{" és "}" jelek az első oszlopban vannak.
   A "[{" parancs a jelenlegi blokk elejéhez ugrik. Áthalad minden {} jelekkel
közrezárt kódon. "]}" a végéhez ugrik.
   Áttekintés:

			function(int a)
	   +->		{
	   |		    if (a)
	   |	   +->	    {
	[[ |	   |		for (;;)	       --+
	   |	   |	  +->	{			 |
	   |	[{ |	  |	    foo(32);		 |     --+
	   |	   |   [{ |	    if (bar(a))  --+	 | ]}	 |
	   +--	   |	  +--		break;	   | ]}  |	 |
		   |		}		 <-+	 |	 | ][
		   +--		foobar(a)		 |	 |
			    }			       <-+	 |
			}				       <-+

Ha C++ vagy Java nyelven fejlesztesz, akkor a legkülső {} blokk mindig az
osztályt határolja. Az osztályon belül "[m" ugrik az előző metódus elejére,
"]m" pedig a következő metódus elejére.

Ráadásul, a "[]" visszafelé mozog, az előző metódus végére és "]]" mozog a
előre, a következő metódus kezdetéhez. A metódus elejét az első oszlopban lévő
"}" jel definiálja.

				int func1(void)
				{
					return 1;
		  +---------->  }
		  |
	      []  |		int func2(void)
		  |	   +->	{
		  |    [[  |		if (flag)
	start	  +--	   +--			return flag;
		  |    ][  |		return 2;
		  |	   +->	}
	      ]]  |
		  |		int func3(void)
		  +---------->	{
					return 3;
				}

Ne feledd, "%"-al bejárhatod a (), {}, [] párokat. Akkor is, ha sorok
választják őket el egymástól.


MOZGÁS ZÁRÓJELEKBEN

A "[(" és "])" parancsok a "[{" és "]}" parancsokhoz hasonlóan működnek,
kivéve, hogy a művelet () párokon hajtódik végre, és nem a {} párokon.

>
				  [(
<		    <--------------------------------
			      <-------
		if (a == b && (c == d || (e > f)) && x > y) ~
				  -------------->
			  --------------------------------> >
				       ])

MOZGÁS KOMMENTEKBEN

Ugrás a komment kezdetéhez "[/", a komment végéhez ugrás "]/". Ez csak a /* -
*/ típusú kommentek esetében működik.

	  +->	  +-> /*
	  |    [/ |    * A comment about      --+
       [/ |	  +--  * wonderful life.	| ]/
	  |	       */		      <-+
	  |
	  +--	       foo = bar * 3;	      --+
						| ]/
		       /* a short comment */  <-+

==============================================================================
*29.4*	Globális azonosítók keresése

Programírás (C) közben az a kérdés merül fel, hogy a változót "int" -ként, vagy
"unsigned"-ként definiáltuk. Ismerjük meg a "[I" parancsot.
   Tegyük fel, hogy kurzor a "column" szón áll. Gépeld:  >

	[I

Listázásra kerül az összes egyező sor. Nem csak az aktív fájlban, hanem az
includeolt (és az abban includeolt stb.) fájlokban is. A lista így nézhet ki:

	structs.h ~
	 1:   29     unsigned     column;    /* column number */ ~

Az előny a tagek használatához képest, hogy az includeolt fájlokban is keres.
A legtöbb esetben a megfelelő deklaráció jelenik meg. Továbbá nagy előny, ha a
tagfájlod már túl régi, vagy csak nincs tagfájlod az includeolt fájlokhoz.
   Azt hozzá kell tenni, hogy pár beállításnak a helyén kell lennie, mielőtt
"[I" működne. Először is, az 'include' opciónak le kell írnia, hogy a fájl
hogyan van includeolva. Az alapértelmezett érték C és C++ nyelveken belül
működik. Más nyelvek esetén lehet, hogy módosításra szorul.


INCLUDEOLT FÁJLOK FELDERÍTÉSE

   Az includeolt fájlok keresése a 'path' változóban meghatározott elérési
utakon történik. Ha egy könyvtár ebből hiányzik, akkor az includeolt fájlokat
a Vim értelemszerűen nem fogja megtalálni. Futtasd az alábbi parancsot: >

	:checkpath

Kilistázza az ismeretlen includeolt fájlokat. Még azokat is, melyek az
icludenak az includejai. Példakimenet:

	--- Included files not found in path --- ~
	<io.h> ~
	vim.h --> ~
	  <functions.h> ~
	  <clib/exec_protos.h> ~

Az "io.h" file az aktív fájlba van beágyazva és nem található. A "vim.h"
megtalálható, ezért a ":checkpath" megvizsgálja a fájlt, kideríti, hogy a
fájlban milyen egyéb fájlok vannak beágyazva. A "functions.h" és
"clib/exec_protos.h" fájl a "vim.h" fájlban vannak beágyazva, ami ugye nem
található.

	Megjegyzés:
	A Vim nem compiler. Nem ismeri fel az "#ifdef" utasításokat. Ugyanez
	vonatkozik az összes "#include"-ra, és az összes "#if NEVER"-re is.

A probléma megoldása, ha a hiányzó könyvtárakat pótoljuk a 'path' változóba. A
Makefile egy jó kiindulópont. Keress olyan sorokat, melyek a "-I"-t
tartalmazzák, például "-I/usr/local/X11", majd add hozzá ezt a könyvtárat: >

	:set path+=/usr/local/X11

Ha túl sok alkönyvtár van, akkor használd a "*" metakaraktert. Például: >

	:set path+=/usr/*/include

Ami megtalálja a fájlokat a "/usr/local/include" és a  "/usr/X11/include"
könyvtárakban is.

Nagyobb projektekben a "**" használata hasznos. Ez jelenti az adott könyvtár
összes alkönyvtárát és fájljait. Például: >

	:set path+=/projects/invent/**/include

Érvényes elérési utak a parancsot követően:

	/projects/invent/include ~
	/projects/invent/main/include ~
	/projects/invent/main/os/include ~
	etc.

Még több lehetőség van, nincs vége. Nézd meg a 'path' dokumentációját. 
   Ha látni szeretnéd a fájlokat, melyeket megtalált a szerkesztő: >

	:checkpath!

A végeredmény (egy nagyon) hosszú lista, beágyazott, valamint az abban
beágyazott stb. fájlokkal. A lista rövidítésére a Vim "(Already listed)"
üzenettel látja el a fájlokat, melyeket már megtalált, ezért azokat nem is
listázza többször.


UGRÁS EGYEZÉSHEZ

Az "[I" parancs egy listát hoz létre, egyetlen egy sorral. Ha közelebbről is
megszeretnéd nézni az adott elemet, akkor odaugorhatsz: >

	[<Tab>

Odajuthatsz a "[ CTRL-I" paranccsal is, hiszen a CTRL-I <Tab>-bal
egyenértékű.

A "[I" parancs azonosítókkal ellátott listát készít. Ha nem az első elemre
szeretnél ugrani, akkor először írd be az azonosítóját: >

	3[<Tab>

Ez a lista harmadik eleméhez fog ugrani. Ne feledd, CTRL-O-val egy szintet
vissza léphetsz.


EGYÉB PARANCSOK

	[i		csak az első egyezés listázza
	]I		csak a kurzor alatti elemek listázása
	]i		csak a kurzor alatt lévő első elem listázása

    Megjegyzés: Kurzor alatt lévő, azaz a kurzort követő sor egészen a fájl
    végéig.


DEFINED AZONOSÍTÓK KERESÉSE

Az "[I" parancs bármilyen azonosítót megtalál. Csak makrókhoz, melyek
"#define"-al deklaráltak: >

	[D

Mely keres a beágyazott fájlokban is. A 'define' opció azt írja le, hogy
hogyan néznek ki azok a sorok, melyek a "[D" számára definiálnak elemeket. Ez
megváltoztathatod, hogy kompatibilis legyen más nyelvekkel is.


	[d		csak az első találat listázása
	]D		csak a kurzor alatt lévő találatok listázása
	]d		csak a kurzor alatt lévő első elem listázása

    Megjegyzés: Kurzor alatt lévő, azaz a kurzort követő sor egészen a fájl
    végéig.

==============================================================================
*29.5*	Helyi azonosítók keresése

Az "[I" parancs a beágyazott fájlokban keres. Keresés csak az aktív fájlban, a
kurzor alatt lévő szó első használati helyéhez ugrás: >

	gD

Tipp: goto Definition. A parancs  hasznos, ha olyan változót, vagy függvényt
keresünk, mely lokálisan lett deklarálva ("static", C-s terminológia szerint).
Például (kurzorunk a "counter" szón áll):


	   +->   static int counter = 0;
	   |
	   |     int get_counter(void)
	gD |     {
	   |	     ++counter;
	   +--	     return counter;
		 }

Hogy még tovább szűkítsük a keresést, limitáljuk le a keresést csak az aktív
függvényre:  >

	gd

Ez visszamegy a függvényünk legelejére és megtalálja a kurzor alatt lévő szó
első előfordulását. Lényegében az első oszlopban található "{" karakter
feletti üres sorig keres. Onnantól kezdve előre keres, a megadott azonosítóig.
Például (kurzor az "idx"-en):

		int find_entry(char *name)
		{
	   +->	    int idx;
	   |
	gd |	    for (idx = 0; idx < table_len; ++idx)
	   |		if (strcmp(table[idx].name, name) == 0)
	   +--		    return idx;
		}

==============================================================================

Következő fejezet: |usr_30.txt|  Programok szerkesztése

Jogi információk: lásd |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:

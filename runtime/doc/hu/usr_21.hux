*usr_21.txt*	Vim Verzió 8.2.	Utolsó módosítás: 2019 Apr 25

		  Bram Moolenaar: Vim felhasználói kézikönyv

			   Visszatérés adott pontra


Az alábbi fejezetben a szerkesztő és egyéb külsős programok interakcióját
tárgyaljuk, legyen az akár parancs futtatása Vimből vagy a szerkesztő bezárása
és a munkamenet folytatása adott pontról. Továbbá, hogyan tárolhatjuk el a
szerkesztő állapotát és hogyan állíthatjuk azt vissza később.

|21.1|	Felfüggesztés és folytatás
|21.2|	Shell parancsok futtatása
|21.3|	Információk tárolása; viminfo
|21.4|	Munkamenetek
|21.5|	Nézetek
|21.6|	Módsorok

Következő fejezet: |usr_22.txt|  Fájlok keresése
    Előző fejezet: |usr_20.txt|  Command-line parancsok gyors gépelése
  Tartalomjegyzék: |usr_toc.txt|

==============================================================================
*21.1*	Felfüggesztés és folytatás

Ahogyan a legtöbb Unixos programot, a Vimet is fel lehet függeszteni
CTRL-Z-vel. A parancs megállítja a szerkesztőt is visszakerülünk abban a
shellbe, ahonnan indultunk, ahol azt csinálhatod amit szeretnél addig, amíg
meg nem unod. Az "fg" (foreground) paranccsal a szerkesztőt visszahozhatjuk
előtérbe. >

	CTRL-Z
	{any sequence of shell commands}
	fg

Arról a pontról folytathatod a munkamenetet, ahol abbahagytad.
   Ha a CTRL-Z nem működne, a ":suspend" parancs garantáltan fog.
Ne felejtsd el a szerkesztőt az előtérbe hozni, különben az összes
változtatásod el fog veszni.

Ez csak Unix rendszereken működik. A többi rendszeren a Vim külön shell indít
számodra. A mechanizmus lehetővé teszi számunkra, hogy shell parancsokat
futtassunk, de új shellben, nem onnan ahonnan indítottuk a Vimet. 
   Ha a szerkesztő GUI felületét futtatod, akkor nincs lehetőség a shellbe
visszatérni. CTRL-Z ebben az esetben minimalizálja az ablakot.

==============================================================================
*21.2*	Shell parancsok futtatása

A parancsok futtatásának általános alakja: ":!{command}. Például, a könyvtár
listázása: >

	:!ls
	:!dir

Az első sor Unix, a második MS-Windows platformon működik.
   Ha a program lefutott, akkor <Enter> billentyűvel térhetsz vissza a
szerkesztőbe, így megnézheted a program kimenetét, mielőtt végleg eltűnne.
   A "!" több helyen is szerepelhet (de egyszerre csak egy helyen), ahol a
programot hívjuk. Tekintsük át:

	:!{program}		{program} futtatása és  
	:r !{program}		{program} futtatása és kimenetének olvasása
	:w !{program}		{program} futtatása, szöveg küldése a bementére
	:[range]!{program}	tartomány feldolgozás {program}-mal

Figyeld meg, hogy hogyan helyezkedik el a [range] a "!{program}" előtt,
hatalmas különbség. Nélküle a program csak szimplán lefut (anélkül, hogy
átadtunk volna bármit is a parancsnak), tartománnyal viszont a hivatkozott
részt átadja a program bementére.

Így egy sor parancsot is futtathatunk, viszont a shell sokkal eredményesebb
ebben. Új shellt indítása: >

	:shell

Ez nagyon hasonló a CTRL-Z-s felfüggesztéshez. Itt azonban új shell nyílik
meg.

Ha GUI üzemmódban indítottuk el a szerkesztőt, a Vim ablakát kezelő shell
dolgozza fel a kimenetet és a bemenetet egyaránt. A Vim nem terminál emulátor,
ezért nem biztos, hogy az összes shell interakció hibamentesen lefut. Problémák
esetén érdemes kipróbálni a 'guipty' opciót. Ha így sem megy, akkor indíts egy
új terminált és futtasd shellben. Például:
>
	:!xterm&

==============================================================================
*21.3*	Információk tárolása; viminfo

Szerkesztéseid során a Vim sok adatot tárol az adott környezetről, ilyenek
például a regiszterek, jelölők, fájlok, command-line history, gondosan
megszerkesztett parancsok stb. Az összes törlődik a szerkesztő bezárásával, de
visszaszerezheted!

A viminfo fájl állapot-információk tárolására létrehozott fájl:
	
	Command-line, keresés history
	regiszterek tartalma
	Jelölők
	Bufferlista
	Globális változók

A viminfo fájlba ezek az információk minden alkalommal kiíródnak, ha bezárjuk
a szerkesztőt. Indításkor, a fájlt megnyitja és visszatölti az elmentett
adatokat.

A 'viminfo' alapértelmezetten csak korlátozott információt tárol. Be tudjuk
állítani, hogy jelenleginél több információt mentsen a munkamenetről, ezzel a
paranccsal: >

	:set viminfo=string
	:set viminfo=!,'100,<50,s10,h

A változó tartalma azt határozza meg, hogy mi legyen elmentve. A változóban
szereplő értékek szintaxisa:vesszővel elválasztott beállító_karakter-argumentum. 
   Nézzük meg, hogy hogyan állíthatjuk be kedvünkre. Elsőként a ' karaktert
láthatjuk beállításként, mely meghatározza, hogy mennyi fájlként tároljuk a
jelelőket (a-z) visszamenőlegesen. Válassz egy szép kerek számot (például
1000-et). Ha ezt módosítani szeretnéd, akkor add át a viminfo változónak így:
>
	:set viminfo='1000

Az f beállító-karakter a globális jelölők tárolásáért felel (A-Z és 0-9). Ha
ez az opció 0, akkor a Vim egyáltalán nem tárolja a helyzetüket (egy szimpla
munkamenetben természetesen igen). Ha az érték 1, vagy meghatározatlan, akkor
a jelölők pozíciója eltárolódik. Így kapcsolhatod be: >

	:set viminfo='1000,f1

Az < beállító-karakter a regiszterekben tárolt sorok számát határozza meg.
Alapértelmezettként az összes sor el van mentve. Nem szerencsés több 1000 sort
tárolni a regiszterenként, mely lassíthatja a Vim indulását. Ha nem szeretnéd
még csak az esélyt sem megadni az ilyen jellegű malőrökre, korlátozd le a
beállítást (500 relevánsnak tűnhet). Ha az érték 0, a regiszterek törlődnek új
munkamenet esetén. Beállítása: >

	:set viminfo='1000,f1,<500
<
Egyéb opciók, melyek beállíthatóak:
	:	command-line history mérete (sorok száma)
	@	input-line history mérete (sorok száma)
	/	keresés history mérete (sorok száma)
	r	a nem tárolandó jelölők meghatározása
	!	nagybetűs GLOBÁLIS_VÁLTOZÓK, melyek nem tartalmaznak kisbetűt
	h	'hlsearch' letiltása a szerkesztő indításánál
	%	csak a bufferlista (csak akkor olvasódik be, ha a Vimet
	 	argumentum nélkül indítjuk.
	c	szöveg átkódolása 'encoding'-ra
	n	a viminfo fájl neve (az utolsóként KELL szerepeljen)

A 'viminfo' és a |viminfo-file| lapokon még többet megtudhatsz.

Ha egyszerre több példányban fut a szerkesztő, akkor az utoljára bezárt
példány adataival frissül a viminfo fájl. Figyeljünk az adatvesztésre, mely az
utolsó előtti példányok bezárásánál jelentkezik (felülírás). Ezek az
információk csak egyszer menthetők.


MUNKAMENET FOLYTATÁSA

Félig készen vagyunk, azonban itt az idő, hogy hosszabb szünetet tartsunk, egy
nyaralás Thaiföldön. A kilépéssel együtt felejted el a kódolást és a Vimet pár
hétre. Pár hét után, hazatérve az első parancsunk: >
>
	'0

És pontosan ott vagy, ahol abbahagytad a munkát, így már befejezheted a
projektet. 
   Minden egyes kilépésedkor egy jelölő készül. Az utolsó '0. A következő pont
   a '1, majd '2,'3,'4 stb. A '9 pont után nem található semmi, így ha egy
munkamenet túlhaladja a '9-es pontot, akkor örökké elveszik.
   A |:marks| paranccsal kiderítheted, hogy hová mutatnak a jelölők, nem kell
végigpróbálgatnod az összeset.


VISSZATÉRÉS FÁJLOKHOZ

Ha a munkamenet megszakítása nélkül szeretnél visszatérni egy adott fájlhoz,
akkor a feladat egy picit nehezebb. Az alábbi parancs kiadásával egy listát
kapsz (a fájlt nem tudod interaktívan megnyitni, a fájlnév előtt lévő
azonosítóval hivatkozhatsz rá, például az :edit parancs használatánál, lásd
alább): >

	:oldfiles
<	1: ~/.viminfo ~
	2: ~/text/resume.txt ~
	3: /tmp/draft ~

A 2. sorszámú fájl szerkesztéséhez a parancs az alábbi: >

	:e #<2

Az ":e" parancs helyett bármely más fájlnév argumentumot kezelő parancs
használható. A ":e #<2" az |:oldfiles| lista azonosítója, különös forma
(hivatkozás a fájlra), érvényes, olyan, mintha például azt írtuk volna: ":e %" 
(aktuális fájl), vagy ":e #" előző fájl.  >

	:split #<2

A #<123 rész bonyolult, ha a fájlt csak szerkeszteni szeretnéd. Szerencsére
könnyebben is megoldható: >

	:browse oldfiles
<	1: ~/.viminfo ~
	2: ~/text/resume.txt ~
	3: /tmp/draft ~
	-- More --

A kimenet kísértetiesen hasonlít az |:oldfiles| parancs kimenetére. Ha
meggondoltad magad és nem szeretnéd a régi fájlt megnyitni, "q" paranccsal
kiléphetsz. A lista alján pedig láthatod a promptot:

	Type number and <Enter> (empty cancels): ~

Üss "2" és nyomj <Enter>-t a második fájl szerkesztéséhez.

Több információ itt: |:oldfiles|, |v:oldfiles| és |c_#<|.


VIMBŐL VIMBE

A |:wviminfo| és a |:rviminfo| parancsokkal manuális menthetjük a viminfo
fájlt. A parancs képes két futásban lévő Vim példány közötti információ cserére
(például regiszterek tartalmának mentése és visszaolvasása egy másik
példányból). Például, az első Vimben: >

	:wviminfo! ~/tmp/viminfo

Majd a másodikban: >

	:rviminfo! ~/tmp/viminfo

Nyilvánvalóan, a "w" a mentés rövidítése (write), az "r" pedig a betöltésé
(read). 
   A ! karakter használatával a ":wviminfo" kényszerítetten felülírhatjuk. Ha
elhagyjuk a "!" karaktert, akkor a tartalmat összefésüli. 
   A ! karakter az ":rviminfo" esetében az összes információt jelenti, mely
felülírja a régit. A "!" parancs nélkül csak azokat az információkat tölti be
a szerkesztő, melyek a Vim példányában nem voltak beállítva.
   Az említett két paranccsal rengeteg információt lehet tárolni és
újrahasznosítani, egy könyvtárnyi viminfo fájlt létrehozhatunk más és más
célokra.

==============================================================================
*21.4*	Munkamenetek

Egész nap dolgoztál, lejárt a munkaidőd, jó lenne holnap ugyaninnen folytatni.
A munkamenet elmentésével ez valóra válik. 
   A munkamenetek az összes információt tartalmazzák melyekre szükséged van,
fájllisták, ablak elrendezések, globális változók, opciók, egyéb információk.
(A 'sessionoptions' beállítás tartalmazza a pontos paramétereket.)
   Új munkamenet létrehozása:  >

	:mksession vimbook.vim

A visszaállításhoz pedig csak egyszerűen be kell olvasnod: >

	:source vimbook.vim

Ha egy bizonyos munkamenetet szeretnél visszaállítani (mert többel is
rendelkezel), akkor: >

	vim -S vimbook.vim

A parancs hatására a Vim lefuttatja az argumentumként átadott fájlt (-S,
source). Nem csak munkamenet fájlokat, lényegében bármilyen Vim szkript fájlt.

A rendszer visszaállítja az ablakokat, ugyanolyan mérettel és elrendezéssel.
Billentyűmappek és opciók szintén (a munkamenetben változtatott opciók, melyek
még nincsenek kiírva a vimrc fájlokba).
   Tekintsük át a 'sessionoptions' lehetőségeit. Az alapértelmezett érték: >

     "blank,buffers,curdir,folds,help,options,tabpages,winsize,terminal".
<
	blank		üres ablakok megtartása
	buffers		összes buffer (nem csak az ablakban lévők)
	curdir		az aktív könyvtár
	folds		foldok, a manuálisan létrehozottak is
	help		help ablak
	options		összes opció és mapping
	tabpages	összes fül
	winsize		ablakméretek
	terminal	terminálablakok

Szabd testre. A Következő beállítás a Vim ablak méretét is visszaállítja: >

	:set sessionoptions+=resize


MUNKAMENET ITT, MUNKAMENET OTT

A legtriviálisabb oka a munkamenetek használatának, ha egyszerre több
projekten is dolgozol. Tételezzük, fel, hogy munkamenet-fájljaidat a "~/.vim"
könyvtárban tárolod. Éppen a maszek melódat (secret) végzed, miközben látod a 
főnöködet közeledni, ezért át kell válts a "boring" projektre: >

	:wall
	:mksession! ~/.vim/secret.vim
	:source ~/.vim/boring.vim

A ":wall" parancs gondoskodik, hogy az összes módosított fájlod mentve legyen
(write all), az aktív munkamenetet a ":mksession!" paranccsal mentjük el. A
régi munkamenet természetesen felülíródik. Legközelebb, ha ezt a munkamenetet
visszatöltöd, akkor ugyaninnen folytathatod. Végül betöltjük a "boring"
munkamenetet.

Ha gyakran nyitsz új spliteket, dokumentációt, könnyű tönkretenni az ablakok
elrendezését. A munkamenetet bármikor újra beolvashatod (a fájlok nem fognak
változni, azokat nem érinti a munkamenet, a forrásfájlok mindig utolsó mentési
állapota töltődik be): >

	:source ~/.vim/boring.vim

Ezért teljes irányítást kapsz, használhatod a munkamenetet az "innen
folytatom" típusú munkához, de betöltőfájlként is használhatod:
   Állítsd be az ablakaid elrendezését a neked legjobban tetszőre és készíts 
róla egy munkamenetet. A munkamenet betöltésekor az ablakok elrendezése
visszaállítódik.
   Például ez álmaid elrendezése:

	+----------------------------------------+
	|		   VIM - main help file  |
	|					 |
	|Move around:  Use the cursor keys, or "h|
	|help.txt================================|
	|explorer   |				 |
	|dir	    |~				 |
	|dir	    |~				 |
	|file	    |~				 |
	|file	    |~				 |
	|file	    |~				 |
	|file	    |~				 |
	|~/=========|[No File]===================|
	|					 |
	+----------------------------------------+

Dokumentáció az ablak tetején splitben, balra a fájlböngésző (mely lehet egy
beépülő is) a fájlok gyors eléréséhez, jobbra pedig a forrás.
   A Vim indítását követően ezt így hozhatod létre: >

	:help
	CTRL-W w
	:vertical split ~/

Méretezd át az ablakokat ízlésed szerint, majd ments a munkamenetet:
>
	:mksession ~/.vim/mine.vim


Betöltéshez indítsd a Vimet: >

	vim -S ~/.vim/mine.vim


Vagy Vimből: >

	:so mine

Tipp: Fájlböngészőben található fájlok megnyitásához az "O" parancs
használható (dupla klikk is működik).


UNIX ÉS  MS-WINDOWS

Az sem okoz fejfájást, ha napi szinten mindkét platformon kénytelen vagy
dolgozni. Add hozzá a "slash" és a "unix" paramétereket a 'sessionoptions'
opcióhoz. Így a viminfo fájl oly módon íródik ki, hogy azt mindkét rendszer
tudja majd írni és olvasni is. Természetesen véglegesítsük vimrc fájlban:

	:set sessionoptions+=unix,slash

Így a Unix formátum lesz a mérvadó, hiszen az MS-Windows tudja olvasni a Unix
formátumot, de ezt fordítva nem igaz. A fájlnevekkel hasonló a helyzet. A
Windowsos Vim tudja értelmezni az elérési utakban található / karaktert, de a
Unix számára ismeretlen a \ használata.


MUNKAMENETEK ÉS VIMINFO

A munkamenetek számos paraméter mellett viszont a jelölők helyzetét, a
regiszterek tartalmát ás a command-line historyt nem tárolják. Ezek
kivételével a viminfo fájlra vagyunk kénytelenek támaszkodni.
   A legtöbb esetben a munkameneteket és viminfót szeparáltan kell
használnunk. Így munkamenetek váltásánál a keresési és command-line historyn
nem cserélődik le. A regiszterek tartalma nem íródik felül a viminfo által. 
   Ha ellentétes véleményen vagy, akkor ezt magadnak kell elvégezni. Például:
   >
	:mksession! ~/.vim/secret.vim
	:wviminfo! ~/.vim/secret.viminfo

Visszaállítása pedig: >

	:source ~/.vim/secret.vim
	:rviminfo! ~/.vim/secret.viminfo

==============================================================================
*21.5*	Nézetek

A munkamenetek a Vim ablakot, mint egészet definiálják. Ha csak egyetlen egy
ablak tulajdonságait kell megváltoztatod, akkor használt nézeteket.
   A nézetek akkor tesznek jó szolgálatot, ha a fájlt specifikus módon
szeretnénk szerkeszteni. Például, sorok számának megjelenítése a 'number'
opcióval, valamint néhány foldot létrehoztunk és bezártunk, de meg szeretnénk
tartani őket.  A munkamenetekhez hasonlóan ezt ablakszinten is meg lehet
tenni, elmenthetjük a jelenlegi állapotot, melyet később visszaállíthatunk. A
session tulajdonképpen az összes ablak nézetét tárolja.
   Két módon használhatjuk a nézeteket. Az első módszer szerint a Vim maga
dönt a nézet nevéről. Ezt a típusú nézetet a fájl megnyitásakor automatikusan
betöltheted. Az aktív ablak nézetének tárolása: >

	:mkview

A Vim gondoskodik a fájl helyéről. Később, ha vissza kell töltened a nézetet:
>
	:loadview

Könnyű, ugye?
   Most egy olyan nézetet szeretnél, ahol a sorszámok ('number') ki vannak
kapcsolva, az összes fold nyitva van. Hozd létre a kívánt nézetet és mentsd el
így: >

	:mkview 1

Természetesen így kapid vissza: >

	:loadview 1

A két fájl nézete között most a ":loadview" parancs meghívásával argumentum
nélkül, illetve ":loadview 1"-el való meghívásával válthatunk.
   Egy fájlnévhez 10 nézet párosítható, egy névtelen és kilenc paraméterezett
1 - 9.

NÉVVEL ELLÁTOTT NÉZETEK

Nézetek második tárolási módja, ha a nézetet egy tetszőleges névvel ellátott
fájlba mentjük el. A nézetet szerkesztés közben betölthetjük, így a nézet
lecserélődik. Kiváló módszer a gyors nézetváltásra. 
   Példa a nézet létrehozására: >

	:mkview ~/.vim/main.vim

És visszatöltésére: >

	:source ~/.vim/main.vim

==============================================================================
*21.6*	Módsorok

Lehetőség van a beállításokat meghatározni fájlszinten. Minden egyes
alkalommal értékes időt veszíthetünk, ha mindent újra be kell gépelnünk. A
munkamenetek és nézetek nem működnek, ha a fájllal több felhasználó is
dolgozik. 
Hogy mindenkinél egységes jelen a megjelenés, módsorokat kell  
alkalmaznunk.  Ez voltaképpen csak egyetlen egy sor a fájlban, mely alapján a
Vim konfigurálja az adott fájl megjelenítését.
   Tipikus példa C programok esetében a behúzások alkalmazása, melyek mérete a 4
többszöröseivel felelhet meg. Ehhez be kell állítanunk a 'shiftwidth' opciót
4-re. Az alábbi módsor ugyanezt teszi:

	/* vim:set shiftwidth=4: */ ~

Másold be a sort a fájlod első, vagy utolsó 5 sorába. Ha ezek után újra
megnyitod a fájlt, látni fogod a shiftwidth hatását. Más fájl szerkesztésénél
a szerkesztőben beállított értékek szerint történik a szerkesztés
(alapértelmezett érték 8).
   Egyes fájlokban nem jelent problémát a módsor fájl eleji használata, ha
útban van, akkor nyugodtan tedd a fájl végére.

A 'modelines' opció meghatározza, hogy mennyi soron keresztül keresse a Vim a
módsort. Ha tíz soron keresztül szeretnéd értelmezni, akkor módosítsd az
alapértelmezett beállítást: >

	:set modelines=10

A 'modeline' opciót ki tudjuk kapcsolni. Tedd ezt, ha rootként dolgozol Unix
rendszeren, vagy adminisztrátori jogosultságokkal kell futtatni valamit
Windowson, illetve ha szimplán nem bízol a fájl eredetében: >

	:set nomodeline

A módsor általános alakja:

	any-text vim:set {option}={value} ... : any-text ~

Az "any-text" azt jelenti, hogy oda bármilyen tartalmat elhelyezhetsz, nem
lesz hatása a módsorra. Ezzel a trükkel kommentként is feltüntethetjük a
fájljainkban, /* */.
   A " vim:" szövegrészlet az, ami miatt a Vim felismeri a módsor
definícióját (a szóközre figyeljünk). Kivétel, ha a "vim" szó a sor legelején 
található, ebben az esetben elhagyható a szóköz. 
   A ":" karakterek az opciók között a ":set" parancsot reprezentálják,
egyenértékű azzal, mintha a szerkesztőbe gépeltük volna, hogy ":set".

Második példa:

	// vim:set textwidth=72 dir=c\:\tmp:  use c:\tmp here ~

Egy extra backslash található második ":" után (dir=c\:\tmp), ez az átadott
dir paraméter része, ezért ki kell escapelnünk (ellenkező esetben az opció
végét jelentené).

Még több információ: |modeline|.

==============================================================================

Következő fejezet: |usr_22.txt|  Fájlok keresése

Jogi információk: lásd |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:

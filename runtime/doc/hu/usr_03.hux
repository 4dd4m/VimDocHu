*usr_03.txt*	Vim Verzió 8.2.	Utolsó módosítás: 2020 Sep 03

		  Bram Moolenaar: Vim felhasználói kézikönyv

				  Navigáció

Mielőtt beszúrnál, vagy törölnél, a kurzor a megfelelő helyre kell pozícionálni.
Ehhez a Vim rengeteg parancsot biztosít. A fejezet ezek közül a legfontosabbakat
mutatja be, a teljes listát itt találod |Q_lr|.

|03.1|	Szavankénti mozgás
|03.2|	Mozgás a sor végére, elejére
|03.3|	Ugrás karakterhez
|03.4|	Zárójelek párjai
|03.5|	Adott sorra ugrás
|03.6|	Aktuális pozíció
|03.7|	Görgetés
|03.8|	Egyszerű keresések
|03.9|	Egyszerű keresési minták
|03.10|	Jelölők használata

Következő fejezet: |usr_04.txt|  Kisebb szerkesztések
    Előző fejezet: |usr_02.txt|  A legelső lépések
  Tartalomjegyzék: |usr_toc.txt|

==============================================================================
*03.1*	Szavankénti mozgás

A "w" parancs egy szóval mozdítja előre a kurzort. Természetesen numerikus
értékkel prefixálva a művelet ismételhető, így egyszerre több szót is
átugorhatunk. Például "3w" három szónyit mozdul előre irányban. Az alábbi ábra
szemlélteti a működést (a kurzor kezdőpozíciója "x"):

	This is a line with example text ~
	  x-->-->->----------------->
	   w  w  w    3w

A "w" parancs a következő szó kezdetéhez ugrik.
   A "b" paranccsal ugyanezt a mozdulatot végezhetjük el vissza irányban (a
   kurzor itt is a szó elejéhez kerül):

	This is a line with example text ~
	<----<--<-<---------<--x
	   b   b b    2b      b

Az "e" parancs a következő szó végére ugrik, "ge" pedig az előző szó végéhez:

	This is a line with example text ~
	   <----<----x---->------------>
	   2ge   ge     e       2e

Amennyiben a sorban található utolsó  szón állsz, "w" parancs ebben az esetben
a következő sor első szavára fog ugrani (hiszen ez a következő sző). Egy
bekezdést sokkal könnyebb átugrani "w","b" parancsokkal, mint karakterenkénti
"l" paranccsal.

A szó végét a következő "nem szó karakter" jelenti, például ".", "-" vagy ")".
A működést befolyásolhatjuk az 'iskeyword' beállítás megváltoztatásával.
Amennyiben így teszel (a kézikönyv használata során), akkor a további példák
nem fognak a leírtaknak megfelelően működni. >
	:set iskeyword&

Lehetőség van szóközönkénti SZÓ mozgásokra. Ez nem a normál értelemben vett szó,
ezért van nagy betűvel írva. Logikusan, az ilyen SZAVAKHOZ a parancs is nagy-
betűs, melyet az alábbi ábra mutat:

	       ge      b	  w				e
	       <-     <-	 --->			       --->
	This is-a line, with special/separated/words (and some more). ~
	   <----- <-----	 -------------------->	       ----->
	     gE      B			 W			 E

A parancsok megfelelő használata esetén a bekezdés bejárható pillanatok alatt
mindkét irányban.

==============================================================================
*03.2*	Mozgás a sor végére, elejére

A "$" parancs a kurzort a sor végére mozgatja. Ha a billentyűzeteden van
<End> billentyű, azt is használhatod, a hatás ugyan az.

A "^" parancs a sorban található első nem üres karakterre viszi a kurzort. A
"0" parancs figyelmen kívül hagyja a működést és a sor legelső karakterére
ugrik akár csak a <Home> billentyű. Az ábrán "." szóköz karaktert jelöl:

		  ^
	     <-----------x
	.....This is a line with example text ~
	<----------------x   x-------------->
		0		   $

(az "....." üres karaktereket jelölnek)

   A "$" parancs prefixálható mennyiséggel a legtöbb paranccsal megegyezően.
A műveletnek nincs sok értelme, hiszen a sor végére ugrani több alkalommal
ugyanazt a pozíciót eredményezi. Ezért, ha mennyiséggel prefixáljuk a "$"
parancsot, az mindig az aktuális sor végére fog ugrani. Tehát, "1$" az aktív
sor (kurzor sora) végére ugrik, míg "2$" a következő sor végére visz és így
tovább.

   A "0" parancs nem prefixálható mennyiséggel, mivel a "0" karakter is
mennyiség részét képezni. Kivételesen a "^" parancs sem prefixálható, azaz
semmilyen hatása nincs.

==============================================================================
*03.3*	Ugrás karakterhez

Az egyik leghasznosabb parancs a soron belüli keresés. Az "fx" parancs előre
irányban "x" karakterre ugrik. (Az "f" a "Find" igéből származtatható).
   Például tegyük fel, hogy az alább ábrázolt sorban tartózkodsz és a "h"
betűre szeretnél ugrani a "human" szóban. Add ki az "fh" parancsot és a kurzor
a "h" karakterre kerül.

	To err is human.  To really foul up you need a computer. ~
	---------->--------------->
	    fh		 fy

Az ábrán az is látható, hogy "fy" lényegében a szó végére ugrik.
   Prefixálható mennyiséggel, így az "l" parancs esetében a kezdeti pozícióról
a "3fl" paranccsal a "foul" szóban található "l" karakterre ugrunk:

	To err is human.  To really foul up you need a computer. ~
		  --------------------->
			   3fl

Az "F" parancs az ellenkező irányban keres, azaz visszafelé:

	To err is human.  To really foul up you need a computer. ~
		  <---------------------
			    Fh

A "tx" parancs az "fx" parancshoz hasonlóan működik azzal a kivétellel, hogy a
keresés tárgyát képző karakter elé ugrik. A parancs inverz változata "Tx" amely
vissza irányban keresi a karaktert. Ilyenkor a kurzor ismét a karakter elé ugrik
oly módon, hogy a karakter és a kurzor pozíciója inverz lesz "tx"-hez képest.
A kurzor a célkarakter elé ugrik (mindig a keresés irányából):

	To err is human.  To really foul up you need a computer. ~
		   <------------  ------------->
			Th		tn

Az előbb említett keresési parancsok megismételhetőek ";" billentyűt nyomva.  A
"," vissza irányban ismétli meg a keresést. A kurzor soha nem lép át másik
sorba (még akkor sem, ha a mondtad tovább folytatódik).

Esetenként, miután már elkezdted írni a keresési parancsot, rájössz, hogy a
rossz paranccsal kezdted a keresést. Például "f"-et írtál "F" helyett. Nem
kell befejezned a parancsot. A megszakításhoz nyomj <Esc> parancsot. Tehát
"f<Esc>" egy megszakított keresés, nincs hatása semmire. <Esc> billentyű a
legtöbb parancsot megszakítja, nem csak a keresést.

==============================================================================
*03.4*	Zárójelek párjai

Programok írása során szinte kivétel nélkül egymásba ágyazott zárójelekkel
találkozhatunk. A "%" parancs nagyon hasznos: A zárójel párjára ugrik. Ha a
kurzor "(" karakteren áll, akkor a zárójel ")" párjára ugrik és fordítva.

			    %
			 <----->
		if (a == (b * c) / d) ~
		   <---------------->
			    %

A parancs [] és {} párokkal is működik. (a 'matchpairs' opcióval ezt
módosíthatjuk).

Ha a kurzor nem zárójelpárokon tartózkodik, akkor az aktív sor következő
zárójelére ugrik (ha van), az azt következő végrehajtáskor pedig a párjára.

		if (a == (b * c) / d) ~
		---+---------------->
			   %

==============================================================================
*03.5*	Adott sorra ugrás

Ha C vagy C++ programozó vagy, akkor az alábbi üzenet ismerősnek tűnhet:

	prog.c:33: j   undeclared (first use in this function) ~

Ez gyakorlatilag azt mondja, hogy ki kell valamit javítanunk a 33. sorban.
Hogyan csinálnád? Az egyik mód, hogy "9999k"-t ütsz, amivel (feltehetőleg) a
legelső sorra kerülsz, majd ott kiadod a "32j" parancsot. Abszolút nem
elegáns (viszont működik). Ennél jobb, ha a "G" parancsot használjuk.
Prefixálva ahhoz a sorhoz kerülünk, amit prefixumként megadtunk. Tehát "33G" a
33. sorba visz bennünket. (A fordító hibáinak feldolgozásához egy jobb
módjához olvasd el |user_30.txt|, :make parancs).
   Prefixum nélkül "G" a fájl legutolsó sorára ugrik. A fájl elejére gyorsan a
"gg" paranccsal ugorhatunk. "1G" paranccsal szintén, de picivel nehezebben
írható.

	    |	first line of a file   ^
	    |	text text text text    |
	    |	text text text text    |  gg
	7G  |	text text text text    |
	    |	text text text text
	    |	text text text text
	    V	text text text text    |
		text text text text    |  G
		text text text text    |
		last line of a file    V

A fájlban a "%" görgethetünk is, hiszen a fájl feléhez "50%", míg a fájl
90%-hoz a "90%" paranccsal ugorhatunk.

Az előzőek azt feltételezték, hogy egy adott sorra kell ugranunk függetlenül
attól, hogy látható-e vagy sem. Mi a teendő akkor, ha azokon a sorokon belül
szeretnél mozogni, melyeket látsz? Az alábbi ábrán három új parancs látható:

			+---------------------------+
		H -->	| text sample text	    |
			| sample text		    |
			| text sample text	    |
			| sample text		    |
		M -->	| text sample text	    |
			| sample text		    |
			| text sample text	    |
			| sample text		    |
		L -->	| text sample text	    |
			+---------------------------+

Így jegyezd meg: "H" - High, "M" - Mid, "L" - Low.

==============================================================================
*03.6*	Aktuális pozíció

Három módszerrel derítheted ki az aktuális pozíciódat.

1.  A CTRL-G parancs üzenetet jelenít meg az állapotsoron (feltételezve, hogy a
    'ruler' opció nincs bekapcsolva):

	"usr_03.txt" line 233 of 650 --35%-- col 45-52 ~

    Ez mutatja a fájl nevét, az aktív sor számát, az összes sor számát, a
    kurzor helyzetét %-ban, sor- és oszlopszámot.
       Előfordulhat, hogy olykor osztott szám van feltüntetve. Például:
    "col 2-9". Ez azt jelenti, hogy a kurzor a második karakteren áll, de az
    első karakter egy tab, 8 karakternyi helyet elfoglalva.

2.  Állítsd be a 'number' opciót, mely megjeleníti a sorok számát: >

	:set number
<
    Kikapcsolásához: >

	:set nonumber
<
    A 'number' változó típusa boolean, a "no" prefixumot hozzáadva a beállítás
    inaktívvá válik. A boolean típusnak két értéke lehet, jelen esetben on és
    off.
       A Vimnek számos opciója van. Boolean értékek mellett találkozhatunk a
       klasszikus String és int típusokkal. A későbbiekben lesz példa ezekre.

3.  Állítsd be a 'ruler' opciót, mely megjeleníti a kurzor pozícióját a jobb
    alsó sarokban: >

	:set ruler

A 'ruler' használata előnyös, mivel nem sok helyet foglal.

==============================================================================
*03.7*	Görgetés

A CTRL-U parancs fél képernyőnyit gördít lefelé. Képzeld el, hogy az ablakot
nézve a szöveg elmozdul felfelé fél képernyőnyit. Azaz az ablak mozog a szöveg
fölött, mellyel visszafelé görgetsz. Ne aggódj, ha kissé bonyolultnak tűnik, a
legtöbb felhasználónál problémát jelent a kezdetekkor.
   A CTRL-D parancs fél képernyőnyit gördít lefelé. (U, azaz Up és D, azaz
   Down).

				       +----------------+
				       | some text	|
				       | some text	|
				       | some text	|
	+---------------+	       | some text	|
	| some text	|  CTRL-U  --> |		|
	|		|	       | 123456		|
	| 123456	|	       +----------------+
	| 7890		|
	|		|	       +----------------+
	| example	|  CTRL-D -->  | 7890		|
	+---------------+	       |		|
				       | example	|
				       | example	|
				       | example	|
				       | example	|
				       +----------------+

Egyetlen egy sort a CTRL-E kombinációval (fel) és CTRL-Y (le) tudunk görgetni.
To scroll one line at a time use CTRL-E (scroll up) and CTRL-Y (scroll down).
Képzeld azt, hogy CTRL-E extra sort ad számunkra. (Ha MS Windows platformon
használod a Vimet, akkor a CTRL-Y visszavonást produkál).

Egy teljes képernyő előre irányban történő görgetése CTRL-F (két sor
kivételével). Hátrafelé görgetéshez pedig CTRL-B. Ezt könnyű megjegyezni, F -
Forward, B - Backward.

Gyakori probléma, hogy miután az utolsó sorok egyikébe navigáltál, szeretnéd
látni a kurzor alatti sorokat. A "zz" parancs a képernyő közepére húzza az
aktív sort.

	+------------------+		 +------------------+
	| earlier text	   |		 | earlier text	    |
	| earlier text	   |		 | earlier text	    |
	| earlier text	   |		 | earlier text	    |
	| earlier text	   |   zz  -->	 | line with cursor |
	| earlier text	   |		 | later text	    |
	| earlier text	   |		 | later text	    |
	| line with cursor |		 | later text	    |
	+------------------+		 +------------------+

A "zt" ugyanilyen módon a képernyő tetejére, a "zb" pedig a képernyő aljára
helyezi az aktív sort. Ennél sokkal több görgető parancs létezik, olvasd el
|Q_sc|. Ha meg szeretnéd akadályozni, hogy a kurzor "n" sorral megálljon a
képernyő alja és teteje előtt, tanulmányozd a 'scrolloff' opciót.

==============================================================================
*03.8*	Egyszerű keresések

A "String" szó kereséséhez használd a "/String" parancsot. Az "include" szó
kereséséhez pedig a /include parancsot. >

	/include

Mihelyst leütöd a "/" billentyűt, a kurzor az utolsó sorba ugrik (ugyan úgy,
mint a ":" parancsoknál). Ide írhatod a keresendő szót. Törléshez klasszikusan
a <BS>, további korrekcióhoz a nyilak használhatóak.
    Az <Enter> billentyű elindítja a keresést.

	Megjegyzés:
	A .*[]^%/\?~$ karaktereknek speciális jelentésük van. Ha használni
	akarod őket a keresés tárgyaként, akkor escapelni kell őket (egy \
	karaktert eléjük rakni. Lásd alul.

A következő találathoz az "n" betű használatával jutsz (a keresés után): >

	/#include

Most üss még párszor "n" karaktert. A karakter a következő #include
találatához fog ugrani. Mennyiséggel is prefixálhatod, például "3n". Ez a
harmadik találathoz fog ugrani. A keresési parancs "/" is prefixálható,
"4/the" egyből a "the" szó negyedik találatához fog ugrani.

A "?" parancs tökéletes ellentéte a "/" parancsnak, visszafelé keres: >

	?word

Az "N" parancs megismétli a keresést, amit a keresés irányához hűen megtart.
Így, ha vissza irányban kerestél, az "N" parancs előre keres, ha előre irányba
kerestél, akkor az "N" parancs vissza irányba fog keresni.


BETŰÉRZÉKENYSÉG KIKAPCSOLÁSA

Normál esetben, a nagy- és kisbetűket úgy kell alkalmaznod a keresésben, ahogy
a találatban szerepelnek (ügyelve a nagybetűkre). Ha nem számítanak a kis- és
nagybetűk, kapcsold be az 'ignorecase' opciót: >

	:set ignorecase

Ha ezután keresel a "word" szóra, az illeszkedni fog a "Word" és "WORD"
szavakra is. A betűérzékenység bekapcsolása ismét: >

	:set noignorecase


KERESÉSI ELŐZMÉNYEK

Tételezzük fel, hogy háromszor kerestél az alábbi szavakra: >

	/one
	/two
	/three

Indítsuk keresést a "/" billentyűvel, a keresési mezőt pedig hagyjuk üresen.
Ha most a <Up> (nyíl) billentyűt ütünk, akkor a Vim kitölti a mezőt a
legutolsó keresésünk (/three) szövegével. <Enter> lenyomása után a keresés
újraindul a /three stringre, ha viszont még egyszer <Up> billentyűt ütünk,
akkor a Vim lecseréli a keresés szövegét az utolsó előtti kereséssel megegyező
stringre /two. Újabb <Up> alkalmazásakor pedig /one-ra.
   A <Down> (nyíllal) előre lapozhatunk a kereséseink között.

Abban az esetben ha hasznosítani szeretnél egy keresést (tudod, hogy kerestél
de ez a historyban már túl körülményes lenne visszalapozni, akkor üsd be az
első pár karaktert a keresésből, majd nyomj <Up> billentyűt. Ha a keresés
egyedi, azaz nem egyezik meg az előző kereséseinkkel, akkor a Vim kiegészíti.
Az előző példa alapján, "/o<Up>" kiegészíti a keresést "/one"-ra.

A ":"-al kezdődő parancsok historyja ugyanezen az elven működik. Így a
futtatott keresések és parancsok könnyen előhívhatóvá válnak. A két history
természetesen szeparált.


SZÓ KERESÉSE A SZÖVEGBEN

Tegyük fel, hogy meg kell találnod "TheLongFunctionName" második találatát.
Időbe telik egy ilyen hosszúságú szó begépelése "/TheLongFunctionName".
Ráadásul, ha hibát vétesz, akkor a Vim nem fogja megtalálni. A könnyebb
módszer: állítsd rá a kurzort és üss "*" karaktert. A parancs egyszerűen fogja
a kurzor alatt lévő szót és automatikusan keresést indít.
   A "#" parancs ugyanezt a keresést hátrafelé hajtja végre. Mindkét parancs
   prefixálható mennyiséggel, mellyel az n. találatra érkezünk.


KERESÉS TELJES SZAVAKRA

Ha a keresésed "/the", az illeszkedni fog a "there" szóra is. A szavak végét a
következő szintaxissal határozhatod meg: >

	/the\>

A "\>" egy speciális határoló karakterpár, csak és kizárólag a szavak végére
illeszkedik. Ennek mintájára, "\<" pedig a szavak elejére illeszkedik, ezért:
>
	/\<the\>

Ez nem fog illeszkedni sem a "there", sem a "soothe" szavakra. A "*" és "#"
parancs pontosan ezeket a határolókat használja fel arra, hogy teljes szavakat
találjon. "g*" és "g#" parancsokat használhatod szótöredékek illesztésére.

TALÁLATOK KIEMELÉSE

Programot szerkesztesz, és látni szeretnéd az "nr" változó előfordulásait.
"nr"-re viheted a kurzort, a "*" parancsot alkalmazva, majd "n"-el lépkedve.
Itt egy másik módszer: >

	:set hlsearch

Ha most keresel az "nr" szóra, akkor a Vim az összes előfordulását ki fogja
emelni. Nagyszerű módja a gyors áttekintésnek. Kikapcsolhatjuk: >

	:set nohlsearch

A kikapcsolt állapot azt jelenti, ha látni szeretnéd a kiemelést a következő
kiemelésnél, akkor be kell kapcsolnod újra. Amennyiben csak az aktuális
keresés kiemelését szeretnéd eltávolítani, add ki ezt a parancsot: >

	:nohlsearch

Mivel a parancs ténylegesen nem kapcsolja ki a 'nohlsearch' opciót, így nem
kell visszaállítani. Új keresésnél viszont újból alkalmazódik a kiemelés ("n"
és "N" parancsoknál is).


KERESÉSEK FINOMHANGOLÁSA

Léteznek olyan beállítások, melyek befolyásolják a keresés működését. Ezek az
alapvetőek: >
>
	:set incsearch

Az opció már akkor elkezdeni megjeleníteni a keresés tartalmát, amikor még írjuk
a keresést. <Enter> billentyűvel ugorhatunk ténylegesen az első találatra,
vagy tovább folytatjuk a keresés szerkesztését. >
>
	:set nowrapscan

Az opció megállítja a keresést a fájl végéhez érve. Ellentétes irányban pedig
a fájl elejénél. A 'wrapscan' beállítás alapértelmezetten bekapcsolt állapotba
van, ezért a keresés a fájl elejéről automatikusan folytatódik (a kurzorig).


INTERMEZZO

Ha tetszenek az előbb említett beállítások, akkor tedd bele a .vimrc fájlba.
   Szerkeszd a fájlt |not-compatible| módban. Ha nincs meg a fájl, akkor ezzel
   a paranccsal megnézheted az elérési útját. >

	:scriptnames

Szerkeszd a fájlt például így: >

	:edit ~/.vimrc

Adj hozzá egy új sort és írd be, mintha Vimbe írnád: >

	Go:set hlsearch<Esc>

A "G" az utolsó sorra lép, az "o" új sort nyit a kurzor alatt, most jöhet a
":set parancs_nev". Insert módból kilépés végül <Esc>. Mentsd a fájlt, és lépj
ki: >
	ZZ

Ha újraindítod a Vimet, a 'hlsearch' opció már be lesz állítva.

==============================================================================
*03.9*	Egyszerű keresési minták

Keresésekben a Vim Reguláris Kifejezéseket használ (RegExp), mely egy hatékony
leírónyelv keresési minták létrehozásához. Ennek azonban ára van, hiszen a
reguláris kifejezések trükkös lehet.
   A következő bekezdésben csak az alapvetőek szerepelnek. A keresési mintákat
a  |usr_27.txt| fejezet tárgyalja.  A teljes leírást itt találod:  |pattern|.

SOR KEZDETE ÉS VÉGE

A ^ karakter a sor kezdetére illeszkedik. Angol-US billentyűzetkiosztáson a
6-os billentyűn találod. Az "include" szó illeszkedik önmagára, bárhol is
legyen a sorban. A "^include" minta viszont csak akkor illeszkedik, ha az
"include" szó a sor elején található.
   A $ karakter jelöli a sor végét., ezért "was$" csak akkor illeszkedik, ha a
   szó a sor végén található.

Jelöljük meg azokat a helyeket az alábbi mondatban, ahol szerepel a "the" szó:

	the solder holding one of the chips melted and the ~
	xxx			  xxx		       xxx

"/the$" erre fog illeszkedni:

	the solder holding one of the chips melted and the ~
						       xxx

"/^the" pedig erre:

	the solder holding one of the chips melted and the ~
	xxx

A "/^the$" csak akkor illeszkedik, a sorban csak a "the" szó szerepel. Üres
karakterek nem szerepelhetnek, hiszen "the " és " the" egyikre sem
illeszkedik.


EGYETLEN EGY KARAKTER ILLESZTÉSE

A . (pont) karakter bármilyen karakter helyettesíthet. Például, a minta "c.m"
azokra a szavakra illeszkedik, melyeknek első betűje c, a második karakter
bármi lehet, a harmadik pedig m. Például:

	We use a computer that became the cummin winter. ~
		 xxx		 xxx	  xxx


SPECIÁLIS KARAKTEREK ILLESZTÉSE

Ha ténylegesen illeszteni szeretnéd a pont karaktert, akkor escapelned kell
egy \ karakterrel.
   A "ter." keresés illeszkedése:

	We use a computer that became the cummin winter. ~
		      xxxx			    xxxx

"ter\." csak a második találatra fog illeszkedni.

==============================================================================
*03.10*	Jelölők használata

Ha "G" paranccsal egy ugrást hajtasz végre, a Vim megjegyzi a kurzor
kezdő pozícióját, melyet jelölőnek hívunk. Ahhoz, hogy ide visszalépj:  >

	``

Ez egy ` (backtick). Ha a parancsot másodjára is kiadod, akkor még hátrébb
ugrik. A backtick funkciója egyébként is ugrás, a pozíciót pedig
jegyzi a Vim.

Általában, minden alkalommal, amikor sort váltasz, ugrást (jump) hajtasz
végre, beleértve a "/" és "n" parancsokat, nem számít, hogy a találatok milyen
messze helyezkednek el egymástól. "fx" és "tx", valamint "w" és "e"
hatókörüket tekintve soron belüli parancsok, így nem számítanak ugrásnak. "j"
és "k" parancsok szintén nem, hiába használsz egy nagy számot, hogy minél
távolabb kerülj.


A "``" parancs oda és vissza ugrik két pozíció között. A CTRL-O parancs
régebbi pontokhoz ugrik. (O, azaz older). CTRL-I visszaugrik az újabb
pozíciókhoz. Képzeld el az alábbi bevitelt: >

	33G
	/^The
	CTRL-O

Az alábbi példában először a 33. sorra ugrasz, majd ott indítasz egy keresést a
"Tthe" szóra. CTRL-O visszavisz a 33. sorra. CTRL-O még egyszer visszavisz a
kezdeti pozícióra. Ha most CTRL-I-t ütsz, akkor visszakerülsz a 33. sorra
újra. Aztán a "The" találatra ismételt CTRL-I-vel.

	     |	example text   ^	     |
	33G  |	example text   |  CTRL-O     | CTRL-I
	     |	example text   |	     |
	     V	line 33 text   ^	     V
	     |	example text   |	     |
       /^The |	example text   |  CTRL-O     | CTRL-I
	     V	There you are  |	     V
		example text

	Megjegyzés:
	CTRL-I == <Tab>.

A ":jumps" parancs kilistázza a bejárható pozíciókat. A legutolsó használt
pozíció ">" karakterrel van megjelölve.


NÉVVEL ELLÁTOTT JELÖLŐK					    *bookmark*

Saját magadnak is készíthetsz jelölőket a szövegben. Az "ma" parancs egy
képzeletbeli jelölőt tesz a kurzor helyére "a" néven. Összesen 26 jelölő
alkalmazható (a-tól z-ig). Vizuálisan nem látszanak, a Vim csak a pozíciójukat
jegyzi.
   Az ugrás jelölőhöz paranccsal  `{mark}, ahol {mark} a jelölő azonosítója.
Ugrás "a" azonosítójú jelölőhöz:
>
	`a

A 'mark parancs (aposztróf), a megjelölt sor elejére viszi a kurzort. Az igen
hasonló `mark parancs (backtick) nem csak a pontos sorra navigál, hanem
pontosan arra az oszlopszámra is, ahová a jelölő le lett rakva.

A jelölők megkönnyítik a munkát, ha fájl két külön pontján kell dolgozni.
Tegyük fel, hogy a fájl elején és végén kell dolgoznod.
   Csak menj a szóban forgó első részhez, majd rakj le egy jelölőt: >

	ms

A másik részhez pedig egy másikat: >

	me

Innentől kezdve szabadon mozoghatsz a fájlban, hiszen ha vissza kell térned,
akkor csak oda kell ugornod:  >

	's

Visszaugrani pedig a kurzor eredeti pozíciójára '', vagy a másik jelölőhöz 'e.
   Az említett példában az s és e karaktereknek nincs jelentőségük, egyszerűen
csak egyszerű megjegyezni s start, e end.

    Megjegyzés: A jelölők érvényben maradnak a szerkesztő bezárása után is.
    Így ha olyan jelölőhöz ugrunk, melynek buffere nincs megnyitva,
    automatikusan megnyitja az adott fájlt a szokásos módon (kurzor az adott
    oszlop- és vagy sorszámra).

A szerkesztőben használt összes jelölő listázása: >

	:marks

Feltűnhet pár érdekes jelölő, melyek:

	'	A kurzor pozíciója az ugrás előtt
	"	A fájl utolsó szerkesztési pontja
	[	Utolsó szerkesztés kezdete
	]	Utolsó szerkesztés vége

==============================================================================

Következő fejezet: |usr_04.txt| Kisebb változtatások

Jogi információk: lásd |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:

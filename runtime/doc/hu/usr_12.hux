*usr_12.txt*	For Vim version 8.2.	Last change: 2021 Apr 19

		  Bram Moolenaar: Vim felhasználói kézikönyv

			       Tippek, Trükkök


A parancsok kombinálásával a Vim szinte bármit képes elvégezni. Ebben a
fejezetben számos példát fogunk látni a beépített parancsok és külső programok 
kombinációjára. Az előző fejezetben ismertetett parancsok újra felhasználjuk,
illetve ki is egészítjük.

|12.1|	Szavak cseréje
|12.2|	Csere "Last, First" erre "First Last"
|12.3|	Lista rendezése
|12.4|	Fordított sorrend
|12.5|	Szavak számolása
|12.6|	Help fájlok keresése
|12.7|	Üres karakterek levágása
|12.8|	Mi használja az adott szót?

Következő fejezet: |usr_20.txt|  Command-line parancsok gépelése gyorsan
    Előző fejezet: |usr_11.txt|  Helyreállítás
  Tartalomjegyzék: |usr_toc.txt|

==============================================================================
*12.1*	Szavak cseréje

A substitute (csere) parancs lecseréli az összes egyező szót: >

	:%s/four/4/g

A "%" tartomány, a teljes fájlra kiterjed. A "g" flag a végén pedig a sorban
szereplő összes előfordulást lecseréli. 
   A parancs nem hibátlan, hiszen ha a fájl tartalmazza például a "thirtyfour"
szót, akkor a parancs futtatása után "thirty4" lesz az eredmény. Hogy elkerüld
a problematikát, és ne érjen meglepetés "\<" karakterekkel illeszthetsz a szó
elejére: >

	:%s/\<four/4/g

Ha szereted a meglepetéseket, akkor itt van még egy: "fourteen". A mintánk nem
illesztett a szó végére, hiába a "four" karakter valóban szókezdet. A szavak
végét "\>" karakterekkel illesztheted: >

	:%s/\<four\>/4/g

Ha programozó vagy, akkor például sokszor csak a kommentekben kell valamit
lecserélned anélkül, hogy a kódhoz hozzányúlnál. A nem teljesen egyértelmű,
vagy veszélyesnek tűnő cseréknél kérj megerősítést a "c" flaggel és minden
csere előtt validálnod kell a műveletet: >


	:%s/\<four\>/4/gc


CSERÉK TÖBB FÁJLBAN

Tegyük fel, hogy egy adott stringet kell lecseréled, viszont a String több
fájlban is szerepel. Megnyithatod őket egyesével és manuálisan elvégezheted a
keresés. Ez végképp nem elegáns. Egyszerűbb, ha rögzíted és visszajátszod.
   Azt is feltételezzük, hogy van egy könyvtárnyi C++ fájlod, melyek .cpp
kiterjesztéssel végződnek. Mindegyikben van egy "GetResp" függvény, de át
szeretnéd nevezni "GetAnswer"-re. 

	vim *.cpp		Indítsd el a Vimet, argumentumként add át az
				összes C++ fájlt. Az első fájlban vagy.
	qq			Kezdd el a rögzítést a q regiszterbe.
	:%s/\<GetResp\>/GetAnswer/g
				Végezd el a cserét az első fájlban.
	:wnext			Mentsd a fájlt és lépj a következőre.
	q			Állítsd le a felvételt
	@q			Futtasd a @q regisztert.  Ez mind a cserét,
				mind a fájlváltást is ":wnext" elvégzi.
				Győződj meg arról, hogy nem kaptál
				hibaüzenete.
	999@q			Futtasd a többi fájlon is.

Az utolsó fájlon kötelezően hibaüzenetet kell kapj (ha tényleg 999 fájlra
hívtad meg a parancsot, de az argumentumlistában kevesebb szerepel, a fájlok
elfogynak, a ":wnext" pedig nem tud mire továbblépni). Hibaüzenet hatására a
futtatás azonnal leáll.

	Megjegyzés:
	Ha a hibaüzenet nem az utolsó fájlnál jelentkezik, hanem előtte, akkor
	az azt jelenti, hogy a maradék fájlokon nem futott le a makró.

A bökkenő: az egyik fájl nem tartalmazza a "GetResp" függvényt, hibaüzenetet
kapsz és a művelet megszakad. Add hozzá az "e" flaget a csere parancshoz: >

	:%s/\<GetResp\>/GetAnswer/ge

Az "e" flag azt jelenti: hogy a csere nem fog hibát dobni, ha egyáltalán nem
talált egyezést

==============================================================================
*12.2*	"Last, First" cseréje erre "First Last"

Van pár név a listádon:

	Doe, John ~
	Smith, Peter ~

Meg szeretnéd cserélni őket:

	John Doe ~
	Peter Smith ~

Ez egyetlen egy paranccsal megoldható:

	:%s/\([^,]*\), \(.*\)/\2 \1/

Szedjük darabokra. Az utasítás keresés "s" paranccsal kezdődik, mely előtt a
"%" tartomány található (fájl összes sora), azaz a teljes fájlban cserélünk.
   Két argumentumot adunk át a parancsnak, amit le szeretnénk cserélni és
amire cserélni szeretnénk "/from/to/". A "from" és "to" perjelekkel van
tagolva. A "from" az alábbi mintát tartalmazza:
							\([^,]*\), \(.*\) ~

   A  \( \) közötti rész illeszkedik a  "Last"-ra,	\(     \)
	    mely a számok és a vessző kivételével	  [^,]
	    bármire, bármennyiszer illeszkedik		      *
	szó szerint ", "-re illeszkedik				 ,
   A  \( \) közötti rész illeszkedik a  "First"-re,		   \(  \)
	    bármely karakter					     .
	    bármennyiszer					      *

A "to" részben a "\2" és "\1" karaktereket láthatjuk. Ezeket hivatkozásoknak
hívjuk. Arra a szövegrészletre hivatkozik, melyet az első "\( \)"-ra
illeszkedett. "\2" pedig a második "\( \)" által illeszkedett szövegre
hivatkozik.  Azaz, ha John Doet vesszük alapul, akkor "\1" a Doe,-ra "\2" pedig
Johnra hivatkozik. A helyettesítésben jól látható, hogy a hivatkozások meg
vannak fordítva "\2 \1". Escapelés nélkül a kifejezés így nézne ki: > 


	:%s/([^,]*), (.*)/\2 \1/


A keresés kilenc hivatkozást képes egyszerre kezelni. A "\0" a teljes
illeszkedést jelenti, egyben. A csere parancs még több speciális elemet
tartalmaz, lásd |sub-replace-special|.

==============================================================================
*12.3*	Lista rendezése

A Makefájlok többnyire fájllistákat rejtenek. Például:

	OBJS = \ ~
		version.o \ ~
		pch.o \ ~
		getopt.o \ ~
		util.o \ ~
		getopt1.o \ ~
		inp.o \ ~
		patch.o \ ~
		backup.o ~

A fájllista tartományát adjuk át a "sort" parancsnak rendezésre: >

	/^OBJS
	j
	:.,/^$/-1!sort

A parancs arra a sorra ugrik, ahol "OBJS" karakterek a sor elején találhatóak.
Egy sorral lejjebb ugrunk. Majd a "sort" parancsnak átadjuk az aktuális
tartományként az aktuális sort ".", és a következő üres sorig tartó
tartományt.  A tartomány végét a minta definiálja /^$/, mely megkeresi a
következő üres sort.  Ha a parancsot "-1" nélkül hajtjuk végre, akkor az üres
sort is átadná a "sort" parancsnak.
    Visual módú kijelöléseket is átadhatunk a "!sort" parancsnak. Rövid
tartalmak kezelésére megfelelő, nagyobb területeknél a parancs módszer
gyorsabb.
    Az eredmény:

	OBJS = \ ~
		backup.o ~
		getopt.o \ ~
		getopt1.o \ ~
		inp.o \ ~
		patch.o \ ~
		pch.o \ ~
		util.o \ ~
		version.o \ ~


Ezzel viszont hibát generáltunk. A sor végi "\" azt jelzi, hogy a sor
értelmezése folytatódik, ez "backup.o" fájl után a rendezés miatt megszakadt. 
"backup.o" fájl a lista alján volt eredetileg (ahová a "\" karaktert nem
kötelező kitenni).
   A legegyszerűbb korrekció ha mi magunk adjuk hozzá "A \<Esc>" paranccsal.
Ha ügyelünk rá, hogy a felsorolás utáni sor üres marad, mindegyik sorban
kitehetjük a "\" jelet, így a probléma soha többé nem fog jelentkezni.

==============================================================================
*12.4*	Fordított sorrend.

A |:global| és a |:move| parancsokat kombinálhatjuk, hogy az összes sort a
fájl elejére mozgassuk, így a fájl sorai fordított sorrendben rendeződnek. A
parancs: >

	:global/^/move 0

Rövidítve: >

	:g/^/m 0

A "^" egyszerű RegExp meta karakter, mely illeszkedik a sor elejére (akkor is,
ha a sor üres). A |:move| parancs pedig másolja a sort a képzeletbeli 0.
sorba, ezért mindig az aktuális illeszkedő sor kerül a fájlt tetejére. A
|:global| parancsot ne tévesszük össze az ugyancsak hasonló global "G"
paranccsal (mellyel sort váltunk), |:global| itt tartományt jelöl (a fájl
összes sora).

A technika alkalmazható kisebb tartományra. Jelöljük ki a tartományt. Vigyük a
kurzort a rendezni kíván tartomány részét képző felső sorába, "k"-val lépjünk
eggyel feljebb és jelöljük meg a sort "mt" (top). Menjünk a tartomány részét
képző utolsó sorba és futtassuk:

	:'t+1,.g/^/m 't

==============================================================================
*12.5*	Szavak számolása

Ha megadott hosszúságú szöveget kell gépelned a Vim nyomon tudja követni az
aktuális szavak számát. 
   Szavak számolása az egész fájlban: >

	g CTRL-G

Ne üss szóközt a g után, a szóközt csak a tagolás miatt tartalmazza a példa. 
   A kimenet pedig:

	Col 1 of 0; Line 141 of 157; Word 748 of 774; Byte 4489 of 4976 ~

Mely alapján a kurzor a 748. szón tartózkodik, a teljes szavak száma a fájlban
pedig 774.

Ha a fájlnak csak egy részére vagy kíváncsi, akkor menj a kurzorral a kezdeti
pontodhoz és üss "g CTRL-G"-t, menj a végponthoz: "g CTRL-G", az utolsó
parancs kimenetét le kell vonnod az elsőből és megkapod, hogy a kérdéses rész
mennyi szóból áll. Jó gyakorlat, de nem hatékony. Visual módban jelöld ki a
szöveget, majd "g CTRL-G". Az eredmény:

	Selected 5 of 293 Lines; 70 of 1884 Words; 359 of 10928 Bytes ~

Szavak számolásának egyéb módszerei és más számolással kapcsolatos elemek
(sorok, egyebek) lásd |count-items|.

==============================================================================
*12.6*	Man oldalak keresése				*find-manpage*

Shell szkriptek vagy C programok szerkesztésekor egy adott függvényhez vagy
parancshoz sokszor meg szeretnénk nyitni a manuált (Unixon). Nézzük a
legegyszerűbb megoldást. Vidd a kurzort a szó fölé, melynek manuálját meg
szeretnéd nyitni és üss: >

	K

A Vim futtatja a "man" parancsot, argumentumként pedig a kurzor alatti szó
kerül átadásra. Találat esetén a dokumentáció megjelenik az alapértelmezett
pager programmal (többnyire a "more"), biztosítva a görgetést. Az olvasást
befejezvén "q" vagy <Enter> billentyűkkel térhetünk vissza a szerkesztőbe.

Ha így nyitjuk meg a man oldalakat, akkor azzal a hátránnyal kell
szembesüljünk, hogy látjuk ugyan a dokumentációt, viszont a forráskódunkat
nem. A következő trükkel a Vim ablakába tölthetjük be a manuált. Először,
engedélyezzük a filetype beépülőt: >

	:runtime! ftplugin/man.vim

Érdemes a parancsot a vimrcben tartani, ha sokszor keresgélünk a leírásokban.
A beépülő elérhetővé teszi számunkra a ":Man" használatát a command-lineban: >

	:Man csh

Splitben nyílik meg a dokumentáció, így a részletek azonnal másolhatóvá
válnak, navigációhoz a megszokott görgetési parancsok, kereséshez a / parancs
használható. Az alapértelmezett split-navigációval válthatunk az ablakok
között (CTRL-W w).
   Ha a manuált egy meghatározott bekezdésnél szeretnéd megnyitni, akkor tedd a
bekezdés számát a parancs elé. Például az "echo" megnyitása a 3. bekezdésnél.
>
	:Man 3 echo


Ha a megnyitott splitben a manuált olvasva egy újabb manuálra szeretnénk
ugrani, akkor vigyük oda a kurzort és nyomjunk CTRL-] rajta (ezek tipikusan
ilyen formában szerepelnek "word(1)"). További ":Man" parancsok ugyanabban az
ablakban fognak megjelenni.

A kurzor alatt lévő szó dokumentációjának elérése: >

	\K

(Ha lecserélted a <Leader> billentyűdet, akkor használd azt a backslash
helyett).
Például azt szeretnéd megtudni, hogy mi a "strstr()" visszatérési értéke,
miközben az alábbi sort szerkeszted:

	if ( strstr (input, "aap") == ) ~

Vidd a kurzort az "strstr" szóra és gépelj "\K". Az strstr() dokumentációja új
ablakban fog megnyílni.

==============================================================================
*12.7*	Sorvégi üres karakterek törlése

Egyes emberek csúnyának, hasznavehetetlennek és pocsékolásnak tartják a sor
végi üres karaktereket (szóköz, tab stb.). Az ilyen jellegű karaktereket
eltávolíthatod az összes sor végéről így: >

	:%s/\s\+$//

Tartományként a "%"-ot használtuk, ami a teljes fájlra kiterjed. A
":substitute" parancs a "\s\+$" keresésre illeszt, ami megtalálja az összes
szóköz karaktert (\s), egy- vagy több alkalommal (\+), a sor vége előtt ($). A
|usr_27.txt| fejezetben át fogjuk venni az ilyen kereséshez hasonló meta
karaktereket.
   Az említett karakterek lecserélésre kerülnek a semmivel "//". Azaz az üres
karakterek kitörlődnek.

A szóközök pazarlásának másik módja, ha a tabulátorok előtt használjuk.
Gyakran lecserélhetjük őket anélkül, hogy ez az üres karakterek számának
csökkenését eredményezné. De nem mindig! Ezért, a műveletet manuálisan
ajánlott elvégezni. A parancs pedig: >
    
	/
    
Sajnos nem láthatod, hogy parancsban szóköz és tabulátor karakterek
szerepelnek, azaz: /<Space><Tab>. Próbáld meg törölni az üres karakterek az
"x" segítségével és figyeld az esetleges változást. Próbálj meg egy tabot
beilleszteni, ha nem tapasztalsz változást. A következő találathoz az "n"
paranccsal léphetsz. Ismételd addig, amíg az összeset ki nem javítod.

==============================================================================
*12.8*	Szavak előfordulási helyei

Ha UNIX felhasználó vagy, akkor a Vim és grep parancsok együttes használatával
a szavakat az összes fájlban szerkesztheted egyszerre. Roppant hasznos
projekteben, illetve több fájlt átölelő programokban, így azonnal
megnyithatjuk azokat a fájlokat, melyben szerepel a keresésünk tárgya.
   Például, szerkeszteni szeretnéd az összes C forrásfájlod, melyben szerepel a 
"frame_counter" szó. Megvalósítása: >

	vim `grep -l frame_counter *.c`

Nézzünk be a színfalak mögé. A grep parancs keresést hajt végre az általunk
átadott szóra (frame_counter) és fájlokban (*.c). Az -l argumentum pedig azért
felelős, hogy a grep fájl találat esetén csak a fájlok nevével térjen vissza
(és ne listázza ki a konkrét sorokat a fájlokból). A grep parancs képes
értelmezni a RegExp mintákat is. (Megjegyzés: A grep és Vim hasonló, de mégis
különböző RegExp szintaktikával rendelkeznek.)
   Az egész parancs backtick (`) közé van zárva. Ez azt mondja a UNIX
shellnek, hogy futtassa a programot, de az eredményt ne írja ki a képernyőre,
hanem tegyen úgy, mintha a program végeredményét mi magunk írtuk volna be. 
Szóval a grep parancs visszatér a fájllistával, melyek a vimnek átad
argumentumként, így csak azok a fájlok nyílnak meg a szerkesztőben, melyekben
szerepelt a "frame_counter" szó. A fájlok közötti navigációhoz pedig az alábbi
parancsok használhatóak: :next, :previous, :first, :last.


AZ ÖSSZES SOR MEGTALÁLÁSA

Az imént említett parancs csak a fájlok listájával tér vissza, melyben a szó
megtalálható. Ahhoz, hogy a sorokat is megkapjuk, újabb keresést kell
végrehajtanunk.
   A Vimben található :grep parancs segítségével végezhetjük keresésünket több
fájlon. Ha az "error_string" összes előfordulását meg szeretnénk találni az
összes C fájlban, akkor adjuk ki az alábbi parancsot: >

	:grep error_string *.c

A szerkesztő az "error_string"-et az összes fájlban keresni fogja (*.c). Az
első találatot tartalmazó fájlt megnyílik és a kurzort a találat sorára helyezi.
A következő előfordulásra a ":cnext" paranccsal ugorhatunk (nem számít, hogy
melyik fájlban található), ":cprev" paranccsal pedig vissza. Az összes
előfordulás megtekintése a ":clist" paranccsal lehetséges.
   A ":grep" parancs a shell grep programját használja (UNIX), Windows esetében
pedig a findstr programot. A 'grepprg' változóval módosítható az
alapértelmezett program.

==============================================================================

Következő fejezet: |usr_20.txt| Command-line parancsok gépelése gyorsan 

Jogi információk: lásd |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:

*usr_25.txt*	For Vim version 8.2.	Last change: 2016 Mar 28

		  Bram Moolenaar: Vim felhasználói kézikönyv

		       Formázott szövegek szerkesztése


A szövegek nem csak mondatonként érkeznek. A fejezet arról szól, hogy hogyan
igazítsuk mondatainkat egy adott tartományhoz, illetve egyéb formázási
szerkesztéseket tárgyal. Bemutatja a Vim egysoros bekezdések és táblázatok
formázási lehetőségeit.

|25.1|	Sortörések
|25.2|	Igazítás
|25.3|	Behúzások és tabulátorok
|25.4|	Munka hosszú sorokkal
|25.5|	Táblázatok szerkesztése

Következő fejezet: |usr_26.txt|  Ismétlés
    Előző fejezet: |usr_24.txt|  Beszúrás gyorsan
 Tartalomjegyzék: |usr_toc.txt|

==============================================================================
*25.1*	Sortörések

A Vim számos funkciójával megkönnyíti a szöveggel való munkát.
Alapértelmezetten a szerkesztő nem tördeli a hosszú sorokat, azaz erről az
<Enter> billentyű segítségével neked kell gondoskodnod. Ha programokat írunk
ez optimális hiszen mi magunk dönthetjük, hogy hol érjen véget a sor.
Dokumentációk szerkesztésekor ez ellenkezőleg hat, ha éppen a soronkénti
karakterek számát le szeretnénk rövidíteni például 70 karakterre.
   Ha beállítod a 'textwidth' opciók, akkor a Vim automatikusan kezeli a
sortöréseket. Tegyük fel, hogy csak egy szűk, 30 karakteres oszlopba szeretnél
írni. Ezt beállíthatod így: >

	:set textwidth=30

Kezdj el írni (a vonalzó csak szemléltetés):

		 1	   2	     3
	12345678901234567890123456789012345
	I taught programming for a whi ~

Ha ebben az esetben begépeled az "l"karaktert, akkor meghaladod a 'textwidth'
opció által meghatározott soronkénti karaktermennyiséget. A Vim ezt látja,
ezért automatikusan beszúrja számodra a sortörést, mely után ezt látod:

		 1	   2	     3
	12345678901234567890123456789012345
	I taught programming for a ~
	whil ~

Tovább folytatva a bekezdést:

		 1	   2	     3
	12345678901234567890123456789012345
	I taught programming for a ~
	while. One time, I was stopped ~
	by the Fort Worth police, ~
	because my homework was too ~
	hard. True story. ~

Egyik sor végére sem kellett sortörést beszúrnunk. A szerkesztő ezt
automatikusan megtette helyettünk:

	Megjegyzés:
	A 'wrap' opció bekapcsolásával a Vim megjeleníti a sortöréseket,
	azonban ez csak vizuális, az eredeti fájlban nincsenek sortörések.


ÚJRAFORMÁZÁS

A Vim nem "szövegszerkesztő" (az angol különbséget tesz a "text editor" és
"text processor" között). A mai elterjedt szövegszerkesztőkben, ha a bekezdés
elején törölsz valamit, akkor az a sortörést újra-feldolgozását eredményezi. A 
Vim másképpen működik. Például, ha kitörlöd a "programming" szót az első
sorból, akkor egy rövidebb  sort kapsz:

		 1	   2	     3
	12345678901234567890123456789012345
	I taught for a ~
	while. One time, I was stopped ~
	by the Fort Worth police, ~
	because my homework was too ~
	hard. True story. ~

Nem néz ki jól. Újraformázhatod a bekezdést a "gq" operátorral.
   Használjuk visual módot a kijelöléshez. Az első sorban van a kurzor: >

	v4jgq

"v" Visual módra vált, "4j" négy sort jelöl ki lefelé és végül "gq" operátor.
A végeredmény:

		 1	   2	     3
	12345678901234567890123456789012345
	I taught for a while. One ~
	time, I was stopped by the ~
	Fort Worth police, because my ~
	homework was too hard. True ~
	story. ~

Megjegyzés: a szövegeket automatikusan formázhatjuk: |auto-format|.

Mivel "gq" egy operátor, ezért háromféleképpen használhatod: Visual módban,
elmozdulással a szöveg-objektumon.
   Az fenti példában használhattunk volna "gq4j" parancsot is. Kevesebb
gépeléssel jár, viszont ismernünk kell a pontos tartományt (sorok számában). 
Sokkal optimálisabb a "}" használata, mely a bekezdés végére ugrik. Ezért
"gq}" a kurzortól a bekezdés végig formáz. 
   Rendkívül hasznos szövegobjektum az "ap", próbáld ki: >

	gqap

Az "ap" jelentése (a bekezdést). Ez csak az adott mondatot formázza, melyben a
kurzor akárhol tartózkodhat, a bekezdésben több sortörés is szerepelhet.
   Ha a bekezdéseid üres sorral elválasztottak, akkor az egész fájlt
formázhatod: >

	gggqG

A "gg" parancs az első sorra ugrik, a "gqG" pedig formáz az utolsó sorig. 
   Figyelem: Ha a bekezdéseid nincsenek megfelelően elválasztva (üres sorok
által), akkor egyesítve lesznek. Gyakori hiba, hogy a sor csak egy szóközt,
vagy tabot tartalmaz, mely első nem nyilvánvaló.

A Vim egyszerű szövegek formázásánál többre képes. Lásd |fo-table| . A sorok
egyesítésénél használt szóközök mennyiségét a 'joinspaces' paranccsal
állíthatod.
   A fájlban lévő szöveget külső paranccsal is formázhatod, ha a Vimbe épített
parancsokkal nem sikerül a megfelelő eredményt elérned ('formatprg').

==============================================================================
*25.2*	Szöveg igazítása

Középre igazításhoz: >

	:{range}center [width]

{range} a command-lineban meghatározott tartományra utal. a  [width] egy nem
kötelező érték, mely a sor hosszát jelenti karakterekben (alapértelmezett
értéke 'textwidth'). Ha a 'textwidth' értéke 0, akkor a width alapértelmezett
értéke 80 lesz.
   Például: >

	:1,5center 40

A kimenet:

       I taught for a while. One ~
       time, I was stopped by the ~
     Fort Worth police, because my ~
      homework was too hard. True ~
		 story. ~


JOBBRA IGAZÍTÁS

Hasonlóan, a ":right" parancs jobbra igazítja a szöveget: >

	:1,5right 37

A kimenete pedig:

	    I taught for a while. One ~
	   time, I was stopped by the ~
	Fort Worth police, because my ~
	  homework was too hard. True ~
			       story. ~

BALRA IGAZÍTÁS

Nem meglepő módon: >

	:{range}left [margin]

A ":center" és a ":right" parancsokkal ellentétben, a ":left" argumentuma nem
a sorok hossza, hanem a bal margó. Ha ezt nem határozzuk meg, akkor a szöveg
teljesen a képernyő széléhez igazodik. Ha ez érték 5, akkor a szöveg 5
szóközzel lesz behúzva. Példa parancsok: >

	:1left 5
	:2,5left

Az eredmény pedig az alábbi:

	     I taught for a while. One ~
	time, I was stopped by the ~
	Fort Worth police, because my ~
	homework was too hard. True ~
	story. ~


SORKIZÁRT SZÖVEG

A Vim nem rendelkezik olyan beépülővel, ami sorkizárná a szöveget. Egy okos
makró el tudja végezni helyettünk a munkát. A csomag használatához futtasd: >

	:packadd justify

Vagy másold be a |vimrc| fájlodba: >

	packadd! justify

A parancs elérhetővé tesz egy új Visual módú parancsot "_j". Jelöld ki a
kívánt szöveget Visual módban, majd futtasd a makrót "_j".
   Olvad el makró utasításait. Hogy odatalálj, használd a "gf" parancsot az
alábbi elérési úton:
   Look in the file for more explanations.  To go there, do "gf" on this name:
$VIMRUNTIME/pack/dist/opt/justify/plugin/justify.vim.

Alternatív megoldásként dolgozzuk fel a szöveget egy külső programmal,
például: >

	:%!fmt

==============================================================================
*25.3*	Behúzások és tabulátorok

A behúzással készített szövegek kitűnnek a többi közül. A kézikönyv példái 8
szóközzel beljebb vannak húzva. Ezt úgy hozhatod létre, hogy minden egyes sor
elejére nyolc szóközt szúrsz be:

	the first line ~
	the second line ~

A fenti két sor tabulátor felhasználásával íródott. A sor végén <Enter>, újra
egy tabulátor és a második sor.
   Ha bekapcsolod az 'autoindent' funkciót, akkor a szöveg behúzása
   automatikus: >

	:set autoindent

A behúzás öröklődik, így az újonnan megkezdett sornak is ugyanannyi lesz a
behúzás, mint az előző sornak. Így az előző példában nem kell tab billentyűt
ütnünk az <Enter> után.


BEHÚZÁS NÖVELÉSE

A behúzás mértékének növeléséhez az ">" operátort használjuk. Gyakran
">>"-ként használjuk, amely az aktív sor behúzását növeli.
   Az értéket a 'shiftwidth' opció értéke határozza meg. Az alapértelmezett
érték 8 szóköz. Ahhoz, hogy ">>" csak négy karaktert húzzon be, állítsd át a
'shiftwidth' értékét: >

	:set shiftwidth=4

Ha ezt a második soron alkalmazzuk, akkor így néz ki a példánk:

	the first line ~
	    the second line ~

"4>>" négyszer alkalmazza a ">" operátort, azaz a behúzást.


TABSTOP

Ha a behúzások értékének a 4 többszöröseit szeretnéd beállítani, akkor
módosítsd a 'shiftwidth' opciót 4-re. <Tab> billentyű viszont még mindig 8 
szóközt fog beszúrni. Állítsd a 'softtabstop' értékén: >

	:set softtabstop=4

Ezzel a <Tab> négy karakternyi szóközzel húz be. Ha már 4 szóköz a behúzásban,
akkor <Tab> karakterre cserélni (megspórolva ezzel 7 karakternyi helyet a
fájlban). Ha állandóan <Tab> karaktereket szeretnél, akkor engedélyezd az
'expandtab' opciót.

	Megjegyzés:
	Beállíthatod a 'tabstop'-ot 4-re. Viszont, ha egy másik fájlt
	szerkesztesz, amiben a 'tabstop' alapértelmezetten 8-ra van állítva,
	akkor rosszul fog kinézni. Más programban és nyomtatásban a behúzások
	nem lesznek megfelelőek. Ezért ajánlott a 'tabstop' értékét 8
	karakteren tartani állandóan.


TABOK CSERÉJE

Olyan fájlt szerkesztesz, ami 3-as tabstoppal íródott. A Vimben ez csúnyán
jelenik meg, hiszen a Vim 8 karaktert használ a tabstophoz. Igazítsd a Vim
tabstopját 3-ra. Ezt minden egyes alkalommal meg kell tenni ha megnyitod a
fájlt. 
   A Vim át tudja konvertálni a tabstopokat a fájlodban. Állítsd a 'tabstop'
értékét megfelelőre, majd add ki a ":retab" parancsot. >

	:set tabstop=3
	:retab 8

A ":retab" parancs a 'tabstop' értékét 8-ra állítja, a szöveg viszont alig
változik. Megfelelő arányban kitölti a területet tabok és szóközök
felhasználásával, így a következő alkalommal a behúzások rendben fognak
kinézni beállítások nélkül is.
   Figyelem: A ":retab" parancs megváltoztathatja a programban definiált
stringek összetételét. Már csak ezért is ajánlott a tab karaktereket
helyettesíteni "\t" karakterrel.

==============================================================================
*25.4*	Munka hosszú sorokkal

Néha olyan fájlokkal kell dolgozzunk, melynek sorai annyira hosszúak, hogy a
szerkesztőnk ezt nem képes megjeleníteni egy sorban. Ha ez megtörténik, akkor
a Vim automatikusan tördeli a hosszú sorokat, hogy minden elférjen a
képernyőn.
   Ha a 'wrap' opciót kikapcsolod, akkor minden sor az eredeti hosszában fog
megjelenni. A hosszú sorok jobb oldala teljesen el fog tűnni.
   Ha olyan pontra mozgatod a kurzort, amely nem esik bele a képernyő
látószögébe, akkor a vim oda mozgatja az ablakot. 
   A GUI verzióban nincs engedélyezve a horizontális görgetősáv. Ha használni
szeretnéd, akkor engedélyezned kell:  >

	:set guioptions+=b

A görgetősáv a Vim ablakának  alján jelenik meg.

Ha nincs engedélyezve a görgetősáv, vagy csak nem akarod használni, akkor
parancsok segítségével is görgethetsz. A kurzor tartja a pozícióját, amíg
látható tartományban van, majd követi a nézőpontot, ha ez szükséges.

	zh		görgetés jobbra
	4zh		görgetés négy karaktert jobbra
	zH		görgetés fél képernyőnyit jobbra
	ze		görgetés jobbra, kurzor a sor végéhez
	zl		görgetés balra
	4zl		görgetés négy karaktert balra
	zL		görgetés fél képernyőnyit balra
	zs		görgetés balra, kurzort a sor elejéhez

Próbáljuk meg bemutatni ezt egy sornyi szövegen. A kurzor a "which" szó "w"
betűjén áll. Az ablak jelöli a képernyőn látható szöveg mennyiségét. Az
"ablak" sorok jelzik a képernyő helyzetet a parancs lefutása után.

			      |<--     ablak      -->|
		some long text, part of which is visible in the window ~
	ze	  |<--	   ablak     -->|
	zH	   |<--     ablak     -->|
	4zh		  |<--	   ablak     -->|
	zh		     |<--     ablak	 -->|
	zl		       |<--	ablak	   -->|
	4zl			  |<--	   ablak     -->|
	zL				|<--	 ablak     -->|
	zs			       |<--	ablak	   -->|


MOZGÁSOK (WRAP: OFF)

Ha a 'wrap' opció ki van kapcsolva, az alábbi parancsokkal tudjuk mozgatni a
kurzort (az ablakon belül). A parancs nem veszi figyelembe a az ablakból balra 
és jobbra kilógó szövegeket, így soha nem történik gördítés. 

	g0		ugrás az első látható karakterhez
	g^		ugrás a sor első nem üres karakterére
	gm		ugrás a ablak sorának közepére
	gM		ugrás sor közepére
	g$		ugrás az utolsó látható karakterhez

		|<--	  ablak     -->|
	some long    text, part of which is visible in one line ~
		 g0  g^    gm	   gM g$


SORTÖRÉS SZAVAKBAN				*edit-no-break*

Valamikor a szöveg feldolgozása azt kívánja, hogy a bekezdéseinkben ne
alkalmazzunk sortörést. A 'nowrap' egyik nagy hátránya, hogy a hosszú sorok
nem láthatóak. A 'wrap' opció a szavak közepén is alkalmaz sortöréseket, de ez
a szöveget nehezen olvashatóvá teszi.
   A szerkesztésnek az optimális módja, ha a 'linebreak' opciót beállítjuk.
Így a sortörésein jó helyen lesznek és a szöveg olvashatóvá válik.
Beállításával a fájl tartalma nem változik meg, csupán a megjelenítése.
   A 'linebreak' opció nélkül:

	+---------------------------------+
	|letter generation program for a b|
	|ank.  They wanted to send out a s|
	|pecial, personalized letter to th|
	|eir richest 1000 customers.  Unfo|
	|rtunately for the programmer, he |
	+---------------------------------+
Állítsuk be: >

	:set linebreak

Az eredmény pedig:

	+---------------------------------+
	|letter generation program for a  |
	|bank.  They wanted to send out a |
	|special, personalized letter to  |
	|their richest 1000 customers.    |
	|Unfortunately for the programmer,|
	+---------------------------------+

Releváns beállítások:
    - 'breakat': sortörés megadott karaktereknél történik
    - 'showbreak': sornyitó üres karakterek kijelzése
    - 'textwidth': állítsd 0-ra, hogy a bekezdések ne legyenek feldarabolva


MOZGÁS A VIZUÁLIS SOROK KÖZÖTT

A "j" és "k" parancsokkal sorokat válthatunk le és fel. Ha ezt egy nagyon
hosszú tesszük, akkor észrevesszük, hogy több sort és léphetünk egyszerre.
Ennek oka, hogy a szerkesztő különbséget tesz a valós sorok és a vizuális
sorok között. 
   Ha csak egyetlen egy sorral szeretnél feljebb vagy lejjebb mozogni, akkor a
"gj" és "gk" parancsokat használd. Ha a sorban nincs sortörés, akkor a parancs
továbbra is egy sort fog ugrani. Amennyiben van a sorban sortörés, akkor a
kurzor a kurzor fölötti (vagy alatti) karakterre lép (mely gyakorlatilag még
ugyan az a sor).
   Talán hasznos lehet az alábbi mapping, mely a nyilakat állítja relatív
sorváltásra: >

	:map <Up> gk
	:map <Down> gj


BEKEZDÉS EGY SORRÁ ALAKÍTÁSA			*edit-paragraph-join*

MS-Wordben importálandó szöveg esetén minden sornak egy sorban kell lennie
(hogy a Word bekezdésként értelmezze). Ha a bekezdéseidet a sztenderd egy üres
sor választja el, akkor így alakíthatod őket egysorossá: >

	:g/./,/^$/join

Ijesztően néz ki? Daraboljuk szét:

	:g/./		A ":global" parancs olyan sorokat keres, melyek
			legalább egy karaktert tartalmaznak.
	     ,/^$/	A tartomány az aktív sortól az első üres sorig tart.
		  join	A ":join" parancs egyesíti a sorokat egy sorba.

Vizsgáljuk meg az alábbi szövegen, mely nyolc tördelt sort tartalmaz a 30.
sorban:

	+----------------------------------+
	|A letter generation program	   |
	|for a bank.  They wanted to	   |
	|send out a special,		   |
	|personalized letter.		   |
	|				   |
	|To their richest 1000		   |
	|customers.  Unfortunately for	   |
	|the programmer,		   |
	+----------------------------------+

A két sornyi bekezdés pedig:

	+----------------------------------+
	|A letter generation program for a |
	|bank.	They wanted to send out a s|
	|pecial, personalized letter.	   |
	|To their richest 1000 customers.  |
	|Unfortunately for the programmer, |
	+----------------------------------+

Megjegyzés: Ez nem működik akkor, ha bekezdéseket nem üres sorok választják el
egymástól (a sor nem üres ha szóközöket, vagy tabot tartalmaz).

Az alábbi parancs működik üres sorok esetén:
>
	:g/\S/,/^\s*$/join

Ha a legutolsó bekezdésünk a fájl végén helyezkedik el, akkor gondoskodjunk az
azt követkő üres sorról is, ellenkező esetben az utolsó bekezdés sorai nem
lesznek egyesítve.

==============================================================================
*25.5*	Táblázatok szerkesztése

Tegyük fel, hogy az alábbi négy oszlopos táblázatot kell szerkeszteni:

	nice table	  test 1	test 2	    test 3 ~
	input A		  0.534 ~
	input B		  0.913 ~

A harmadik oszlopot számokkal kell feltöltenünk. Átválthatsz a második sorba,
majd "A" parancs után rengeteg szóközt alkalmazva beírod a az adatot.
   Az ilyen jellegű szerkesztésekhez van egy speciális beállítás: >

	set virtualedit=all

Így képes leszel olyan helyekre is pozícionálni a kurzort, ahol nincs szöveg
("virtual space"). Sokkal egyszerűbb a táblázatok szerkesztése ily módon.
   Vidd a kurzor a táblázat fejlécére az következő kereséssel: >

	/test 3

Most nyomj "j"-t és jó helyen vagy, végül add meg az adatot "0.693":

	nice table	  test 1     test 2	 test 3 ~
	input A		  0.534			 0.693 ~
	input B		  0.913 ~

A színfalak mögött a Vim automatikusat kitölti az üres részt. Lépj a következő
sorba "Bj". "B" vissza irányban mozog az első karakterig, mely üres karakter
után "található", "j" pedig egy sorral lejjebb helyezi a kurzort, ahol
megkezdődhet az adatbevitel.


	Megjegyzés:
	A kurzor akárhová viheted a képernyőt. Még az utolsó sor alá is (ide
	nem kerül semmilyen karakter, amíg te magad nem szúrsz be egyet).


OSZLOP MÁSOLÁSA

Hozzá szeretnél adni egy oszlopot a táblázathoz, mely a 3. oszlop másolata
lesz és a "test 1" oszlop elé fog kerülni. Hét lépésben:
1.  Vidd a kurzort a másolandó oszlopra (például /test 3).
2.  Nyomj CTRL-V-t, a blokk kijelöléséhez Visual módban.
3.  Vidd a kurzort két sorral lejjebb "2j". Most már a "virtual space"-ben
    vagy (input B;test 3).
4.  Jelöld  ki jobbra a teljes oszlopot plussz a két oszlop közötti térközt.
    "9l" megfelelőnek tűnik.
5.  Másol a kijelölést "y'.
6.  Vidd a kurzort "test 1"-re, ahová be szeretnéd illeszteni.
7. Illeszt be P-vel.

Ha mindent jól csináltál:

	nice table	  test 3    test 1     test 2	   test 3 ~
	input A		  0.693     0.534		   0.693 ~
	input B			    0.913 ~

Vedd észre, hogy a teljes "test 1" oszlop jobbra eltolódott, illetve azok az
oszlopok is melyek nem tartalmaztak adatot.

A virtuális szerkesztés visszaállítása: >

	:set virtualedit=


VIRTUAL REPLACE MÓD

A 'virtualedit' egyik nagy hátránya, hogy "másabb". Nem érzed a tabokat és a
szóközöket navigálás közben. A Virtual replace móddal ugyanezt a problémát
másképpen oldhatjuk meg. 
   Tegyük fel, hogy a táblázatodban lévő sorok tabokat és szóközöket is
tartalmaznak. Add ki az "rx" parancsot az első tab karakteren: 

	inp	0.693   0.534	0.693 ~

	       |
	   rx  |
	       V

	inpx0.693   0.534	0.693 ~

Az elrendezés elcsúszott, add ki a "gr" parancsot:

	inp	0.693   0.534	0.693 ~

	       |
	  grx  |
	       V

	inpx	0.693   0.534	0.693 ~

A "gr" parancs biztosította, hogy az új karakterek pontosan annyi helyet 
foglaljanak, amennyit szükséges. Az extra hely szóközök és tabulátorok
segítségével ki lett töltve. Tulajdonképpen egy tabulátor lecserélődött "x"
karakterre, a szöveg elején és végén hozzáadott üres karakterek biztosították,
hogy a szöveg a helyén maradt. Ebben az esetben egy tabbal egészült ki a
szöveg.
   Ha több, mint egy karaktert kell lecserélned, akkor használd az "R"
parancsot a csere módhoz (|04.9|), mely nem tartja meg az elrendezést:

	inp	0	0.534	0.693 ~

		|
	 R0.786 |
		V

	inp	0.78634	0.693 ~

A "gR parancs Virtual Csere módot használ. Ez megtartja az elrendezést:

	inp	0	0.534	0.693 ~

		|
	gR0.786 |
		V

	inp	0.786	0.534	0.693 ~

==============================================================================

Következő fejezet: |usr_26.txt|  Ismétlés

Jogi információk: lásd |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:

*usr_28.txt*	Vim Verzió 8.2.	Utolsó módosítás: 2008 Jun 14


		  Bram Moolenaar: Vim felhasználói kézikönyv

				   Foldolás


A struktúrált szöveget logikailag elkülöníthetjük. Részekre bonthatjuk, aztán
azokat később még tovább. Foldolással kódrészleteket tömöríthetsz egy sorba.
A fejezetben a foldolás különböző módszereit tárgyaljuk.

|28.1|	Mi a foldolás?
|28.2|	Kézi foldolás
|28.3|	Munka a foldokkal
|28.4|	Foldok mentése és visszaállítása
|28.5|	Foldolás behúzás alapján
|28.6|	Foldolás jelölők alapján
|28.7|	Foldolás szintaxis alapján
|28.8|	Foldolás kifejezések által
|28.9|	Változatlan sorok foldolása
|28.10|	Melyik foldolási módszert válasszam?

Következő fejezet: |usr_29.txt|  Mozgás a kódban
    Előző fejezet: |usr_27.txt|  Keresési parancsok és minták
  Tartalomjegyzék: |usr_toc.txt|

==============================================================================
*28.1*	Mi a foldolás?

Foldolással a bufferben lévő tartományokat egy sorként jelenítjük meg a
képernyőn. Mint egy darab papír, melyet ha összehajtunk, rövidebbé válik:

	+------------------------+
	| sor 1 		 |
	| sor 2 		 |
	| sor 3 		 |
	|_______________________ |
	\			 \
	 \________________________\
	 / foldolt sorok	  /
	/________________________/
	| sor 12		 |
	| sor 13		 |
	| sor 14		 |
	+------------------------+

A tartalmazott szöveg még mindig a bufferben van. Csak a megjelenítés módja
változott.

A foldolás egyik előnye, hogy jobb képet kaphatunk a fájlról, hiszen a
logikailag összetartozó sorok nagy részét egy sorba tömörítjük, helyét csak
egyetlen egy sorral jelezzük.

==============================================================================
*28.2*	Kézi foldolás

Próbáld ki: vidd a kurzort egy bekezdésre: >

	zfap

A bekezdést helyettesítette egyetlen egy sor. Egy foldot hoztál létre. |zf|
egy operátor, |ap| pedig a szöveg-objektum volt. A |zf| operátort bármilyen
elmozdulással kombinálhatjuk, mely létrehozza a kijelölésen átívelő foldot. 
A |zf| Visual módban is működik.

A fold kinyitásához gépeld be: >

	zo

Bezárása pedig: >

	zc

Az összes folddal kapcsolatos parancs "z"-vel kezdődik. Kis fantáziával ugyan
de a "z" betű éppen úgy néz ki, mint egy összehajtott papírlap oldalról. A
"z"-t követő betűt pedig így érdemes megjegyezni: >

	zf	Fold létrehozása (Fold)
	zo	Fold kinyitása (Open)
	zc	Fold bezárása (Close)

A foldok egymásba ágyazhatóak: a dokumentum bekezdéseit foldoljuk, aztán még
egyszer foldoljuk az összeset (fejezet). Ha kinyitjuk a fejezet foldot, akkor
az visszaállítja (megjeleníti) a bekezdések foldjait az eredeti állapotukba
(melyek lehetnek nyitottak, lehetnek zártak, attól függően, hogy hogyan
hagytuk őket).

Tegyük fel, hogy készítettél pár foldot, de látni szeretnéd az összes
szöveget. Ha türelmes vagy, akkor bejárhatod az összeset, külön futtatva a
"zo" parancsot. Gyorsabb módja: >

	zr

Ez csökkenti a foldokat (Reduce). Ellentéte: >

	zm

Zárja a foldokat (More). Megismételheted a "zr" és "zm" parancsokat, ha egymásba
ágyazott foldokkal dolgozol.

Ha foldjaid több szintesek, akkor az összeset kinyithatod egyszerre: >

	zR

Csökkenti a foldokat (kinyitja őket). Az összes fold bezárása: >

	zM

Mely bezárja az összes foldot (More).

A foldolás engedélyezése, tiltása a |zn| paranccsal változtatható. A |zN|
visszaállítja a foldokat, ahogyan voltak. A |zi| változtatja a 'foldenable'
állapotát. Példa munkafolyamat:

    - foldok létrehozás
    - navigáció, szerkesztési pontra
    - |zi| szöveg szerkesztése
    - |zi| navigáció

A kézi foldolás részletes leírása: |fold-manual|

==============================================================================
*28.3*	Munka a foldokkal

"j" és "k" parancsok üres sorként haladnák át a zárt foldokon, meggyorsítva a
navigációt.

A foldokat egyszerű sorként másolhatjuk, törölhetjük és illeszthetjük be. Így
a fájlt nagyon gyorsan át lehet rendezni. Győződj meg arról, hogy minden
fold egy teljes függvényt tartalmaz (vagy picivel kevesebbet, ami a
'foldmethod' opció függvénye). Töröld ki a függvényt "dd"-vel, menj a
megfelelő melyre és illeszd be "p". Ha a függvény (alja vagy teteje) kilóg a
foldból, Visual módban jelöld ki a területet:

    - vidd a kurzort az első sorra
    - válts át "V" Visual módra
    - jelöld ki az utolsó sort is
    - töröld ki "d" a sorokat
    - menj az új helyre, majd illeszd be "p"

Néha nehéz észrevenni, hogy egy fold merre található, azaz, hogy melyik soron
használhatjuk a |zo| parancsot. A jobb szemléltetéshez: >

	:set foldcolumn=4

Mely létrehoz egy (jelen esetben) 4 oszlopból álló sávot az ablak bal oldalán,
ahol "+" jelölést láthatunk a zárt állapotú foldok helyén, "-" jelet pedig a
nyitott foldok esetén. A fold által tartalmazott sorokat "|" karakter jelzi.

Egér használatával is elvégezhetjük a foldok nyitását a "+" jelölésre
kattintva, zárását a "-" vagy "|" jelekre kattintva. 

Kurzor alatt lévő össze fold kinyitása |zO|.
Kurzor alatt lévő összes fold bezárása |zC|.
Kurzor sorában lévő fold törlése |zd| (csak a fold definícióját).
Kurzor alatt lévő összes fold törlése |zD| (csak a fold definícióját).

Insert módban a kurzor alatt lévő sor soha nem záródik be (ha zárva van, akkor
kinyílik). Így láthatod, hogy mit írsz!

A foldok automatikusan megnyílnak, ha a kurzort rajtuk jobbra vagy balra
mozgatjuk. Például, a "0" parancs megnyitja a kurzor alatt lévő foldot (ha
'foldopen' "hor"-ként van konfigurálva, ami az alapértelmezés). A 'foldopen'
opció meghatározza, hogy mely parancsok hatására nyíljon ki a fold. A kurzor
alatt lévő fold minden esetben kinyílik, ha: >

	:set foldopen=all

Figyelem: Így nem tudsz zárt foldra ugrani.  Ideiglenes jó ötletnek tűnik, de
próbáljuk alapértelmezetten tartani: >

	:set foldopen&

A foldokat automatikusan bezárhatod, ha kilépsz belőlük: >

	:set foldclose=all


Ez újra-alkalmazza a 'foldlevel' opciót azokon a foldokon, melyben nem
szerepel a kurzor. Próbáld ki, hogy hogyan érzed. A |zm| egy szintet bezár a
|zf| egy szintet kinyit.

A foldolás az ablak tekintetében lokális, ezért egy fájlt megnyithatsz
többször is, egyik ablakban foldokkal, másikban anélkül. (Vagy az egyikben
nyitott foldokkal, a másikban pedig zártakkal).

==============================================================================
*28.4*	Foldok mentése és visszaállítása

Ha "elhagysz" egy fájlt (egy másikat nyitsz meg), akkor a foldok helyzete
elveszik. A kézzel kinyitott és bezárt foldok felveszik kezdő állapotukat
visszatéréskor. Ha kézzel hozol létre foldot, akkor az összes elveszik.
Mentésükhöz használt a |:mkview| parancsot: >

	:mkview

Mely elmenti a nézetet befolyásoló beállításokat. A menthető opciókat a
'viewoptions'-ban  állíthatjuk be. A fájl megnyitásánál töltsük be a nézetet
újra: >

	:loadview

Egy fájlról tíz nézet tárolható. Például, a jelenlegi nézet elmentése a 3.
nézetként, 2. nézet visszatöltése: >

	:mkview 3
	:loadview 2

Megjegyzés: Sorok beszúrásakor vagy törlésekor, a nézet invaliddá válhat. A
'viewdir' opcióban meghatározott könyvtárban néha töröld a régi nézethez
tartozó fájlt.

==============================================================================
*28.5*	Foldolás behúzás alapján

Munkaigényes, ha minden foldot a |zf| paranccsal szeretnél létrehozni. Ha
fájlod jó struktúrált (behúzások), akkor foldolhatsz a behúzások alapján is. 
Minden egyes behúzási szint új foldként definiálódik. A legtöbb programnyelv
esetében remekül működik.

Próbáld ki, állítsd át a 'foldmethod' opciót: >

	:set foldmethod=indent

Az automatikusan létrehozott foldokat |zm| és |zr| parancsokkal nyithatod,
zárhatod.
Szemléljük meg a működését:

Sor behúzás nélkül
	Sor egyszer behúzva
		Sor kétszer behúzva
		Sor kétszer behúzva
	Sor egyszer behúzva
Sor behúzás nélkül
	Sor egyszer behúzva
	Sor egyszer behúzva

Megjegyzés: A foldmélység és a behúzás értéke függ a 'shiftwidth' opciótól.
Minden egyes 'shiftwidth' távolság nő a fold mélysége. Ez a fold szintje (fold
level).

Tulajdonképpen a |zr| és |zm| parancsokkal növeled, vagy csökkented a
'foldlevel' értékét. Közvetetten is beállíthatod: >

	:set foldlevel=3

Ez azt jelenti, hogy a foldok három (vagy több) 'shiftwidth' távolságra be
lesznek zárva. Minél alacsonyabb a 'foldlevel' annál több fold lesz bezárva.
Ha a 'foldlevel' 0, akkor az összes fold zárt állapotban van. |zM| nullára
állítja a 'foldlevel' értékét. A |zR| a 'foldlevel'-t a legmélyebbre állítja.

Ezért a foldok megnyitására és bezárására két opció van:
(A) A fold level állításával.
    "Zoom in" - "Zoom out" technikával gyorsan áttekinthető a struktúrált
    szöveg.

(B) Foldok bezárása a |zo| és |zc| parancsokkal.
    Így csak azok a foldok nyitott állapotban, melyeket kinyitunk.

A kettő kombinálható: A legtöbb foldot bezárod a |zm| paranccsal, aztán kézzel
megnyitod a foldot (|zo|). Vagy az összes foldot megnyitod |zR|, míg bizonyos
foldokat bezársz |zc|.

A probléma, hogy nem tudunk kézzel foldot létrehozni, ha a 'foldmethod' értéke
"indent", hiszen ez ütközne a indent és fold level értékekkel.

Még több a behúzás alapú foldokról a manuálban: |fold-indent|

==============================================================================
*28.6*	Foldolás jelölők alapján

A foldot kezdeti és végpontjai kijelölhetők markerekkel (jelelőkkel).
Precízen, magas fokú kontroll mellett létrehozhatjuk a foldot. Hátrány, hogy
módosítanunk kell a szöveget.

Próbáld ki: >

	:set foldmethod=marker

Példa, C program esetén:

	/* foobar () {{{ */
	int foobar()
	{
		/* return a value {{{ */
		return 42;
		/* }}} */
	}
	/* }}} */

Vedd észre, hogy a foldolt sor megjelenik a marker előtt, így meg tudjuk
mondani, hogy mi a fold tartalma.

Elég idegesítő, hogy a sorok mozgatásával a jelölők inkonzisztenssé válnak.
Számozott jelölőkkel ezt megoldhatjuk. Például:

	/* global variables {{{1 */
	int varA, varB;

	/* functions {{{1 */
	/* funcA() {{{2 */
	void funcA() {}

	/* funcB() {{{2 */
	void funcB() {}
	/* }}}1 */

Minden egyes számozott marker ({{{1, }}}1) új fold szintet takar. Minden
nagyobb szintű fold itt megáll. Semmi akadálya, hogy kizárólag markerekkel
jelöljük ki a foldjainkat. Ha meg szeretnél állni egy foldban, mielőtt egy
másik kezdődne, "end marker"-rel meg kell jelölnöd.

A technika részleteiről olvasd el a dokumentációt: |fold-marker|

==============================================================================
*28.7*	Foldolás szintaxis alapján

A Vim minden egyes fájltípushoz saját szintaxisfájlt használ, mely
meghatározza a színeket és egyéb elemeket. Ha ezt  a Vimben olvasod és a
terminálod támogatja a színeket, a színek definíciója a "help" szintaxis
fájlban található. 
   A szintaxisfájlokban a "fold" argumentum használatával leírhatjuk, hogy mi
definiálhat egy fold tartományt. Létre kell hoznunk a saját szintaxisfájlunkat
és ennek megfelelően szerkeszteni, ami nem könnyű feladat. Azonban ha egyszer
készen vagyunk vele, foldjainkat a Vim automatikusan létrehozza, olyan
körülmények között, ahogy azt leírtuk. 
   Feltételezzük, hogy egy létező szintaxisfájlt használsz, ezért itt nincs
mit magyarázni. A foldok automatikusan létrejönnek és törlődnek a fájl
szerkesztésekor.

A szintaxisalapú foldolás: |fold-syntax|

==============================================================================
*28.8*	Foldolás kifejezések által

Nagyon hasonló a behúzásos módszerhez, a felhasználó által írt függvény
határozza meg a sorok behúzását. Használata akkor optimális, ha a szövegben
fizikailag jelölve van az egybetartozó szöveg. Például, egy e-mail üzenet,
ahol az idézett szöveget ">" karakter jelöli a sor kezdetén. Mely foldolása: >

	:set foldmethod=expr
	:set foldexpr=strlen(substitute(
	                     substitute(
			     getline(
			     v:lnum),'\\s','',\"g\"),'[^>].*','',''))

Megjegyzés: ":set foldexpr..." sor egy sor, csak az olvashatóság miatt van
	    tördelve.

Ezen a szövegen kipróbálhatod:

> quoted text he wrote 
> quoted text he wrote
> > double quoted text I wrote
> > double quoted text I wrote
> > 

A 'foldexpr' kifejezésének magyarázata (belülről kifelé):
   getline(v:lnum)			az aktív sor
   substitute(...,'\\s','','g')		minden üres karaktert eltávolít a
					sorból
   substitute(...,'[^>].*','','')	töröl mindent a '>' karakter után
   strlen(...)				String hossza, melyben '>' található

Megjegyzés: \ karaktert kell raknunk minden szóköz, idézőjel és backslash elé.
Ha ez megzavar, akkor: >

	:set foldexpr


Az aktuális érték kiíratásához. Komplex kifejezés korrigáláshoz használd a

	:set foldexpr=<Tab>

Ahol <Tab> valós Tab, ezért a Vim automatikusan kitölti az aktuális parancsot,
melyet könnyedén szerkeszthetünk.

Ha nagyon komplexre sikeredik, akkor tedd be egy függvénybe, a 'foldexpr'-nak
viszont ezt a függvényt kell meghívnia.

Még több a kifejezés alapú foldolásról: |fold-expr|.

==============================================================================
*28.9*	Változatlan sorok foldolása

Ez akkor hasznos, ha az ablakban beállítod a 'diff' opciót is. A |vimdiff|
parancs elvégzi helyetted. Például: >

	:setlocal diff foldmethod=diff scrollbind nowrap foldlevel=1

Játszd ezt el az összes ablakkal, mely a fájl különböző verzióit tartalmazzák.
Ezek után már tisztán láthatod, hogy a változatlan sorok foldolva vannak.

Még több információ |fold-diff|.

==============================================================================
*28.10* Melyik foldolási módszert válasszam?

Ennyi lehetőség után nem csodálom, ha felmerül a kérdés. Sajnos nincs
aranyszabály. Pár tipp.

Ha van olyan szintaxisfájlod, amely leírja a foldokat is, az a legjobb
választás. Ha nincs, akkor megpróbálhatsz írni egyet. Jól kell bánni a
keresési mintákkal, ami nem könnyű, de ha működik, akkor ezentúl nem kell a
foldjaiddal bajlódnod.

Nem struktúrált szöveg esetén nem probléma, ha ki kell adni egy-két parancsot.
A |:mkview| paranccsal mentsük a nézetet és mely visszatölti a foldjainkat is.

A marker módszer használatához szerkesztened kell a fájlt. Csapatmunka esetén
valószínű, hogy nem fogja a sztenderd részét képezni, sőt, lehet meg sem
engedik a használatát.
   A markerek legelőnyösebb tulajdonsága, hogy oda teszed őket ahová akarod.
Biztos módszer, hogy egy áthelyezés alkalmával ne maradjonak le sorok. A fold
tartalmát kommentelheted.

A behúzásalapú foldolás a fájlok nagy részében működik, de nem túl jól. Akkor
használd ha más módszer nem áll rendelkezésre. Kiemelésekhez hasznos.
Használatánál ügyelni kell az 1 'shiftwidth' 1 fold mélységre.

Kifejezések által bármilyen struktúrált szövegen alapuló fájlt foldolhatunk.
Könnyű meghatározni, különösen, ha a fold eleje és vége jól felismerhető.
   Ha az "expr" módszert használod, de nem pontosan úgy működik, ahogyan
szeretnéd, akkor használj kézi módszert. Ez nem távolítja el a már létrehozott
foldokat. A foldok létrehozása és törlése kézzel történik.

==============================================================================

Következő fejezet: |usr_29.txt|  Mozgás kódbázisban

Jogi információk: lásd |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:

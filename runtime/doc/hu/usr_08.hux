*usr_08.txt*	For Vim version 8.2.	Last change: 2021 May 20

		  Bram Moolenaar: Vim felhasználói kézikönyv

				   Splitek


Fájlok megjelenítése egymás fölött vagy mellett? Munka a fájl két teljesen
különböző pontján? Diff megtekintése kényelmesen? Ez mind lehetséges a splitek
használatával.

|08.1|	Split létrehozása
|08.2|	Split létrehozása adott fájllal
|08.3|	Ablakméret
|08.4|	Vertikális splitek
|08.5|	Ablakok mozgatása
|08.6|	Parancsok az összes ablakhoz
|08.7|	Vimdiff használata
|08.8|	Egyebek
|08.9|	Fülsáv

Következő fejezet: |usr_09.txt|  A GUI használata
    Előző fejezet: |usr_07.txt|  Több fájl szerkesztése
 Tartalomjegyzék: |usr_toc.txt|

==============================================================================
*08.1*	Splitek

Az aktív ablak splitelése ilyen egyszerű: >

	:split

A parancs kettéosztja a képernyőt két ablakra, a kurzort pedig a felsőben
hagyja:

	+----------------------------------+
	|/* file one.c */		   |
	|~				   |
	|~				   |
	|one.c=============================|
	|/* file one.c */		   |
	|~				   |
	|one.c=============================|
	|				   |
	+----------------------------------+

Amit az ábrán látsz az két ablak, melyek ugyanarra a fájlra hivatkoznak. A
"===" jelű sor jelenti az állapotsávot. Mindegyik állapotsáv a saját ablakáról
jelenít meg különböző információkat. 
???  (In practice the status line will be in reverse video.)

   Két ablakkal gyakorlatilag egy második, egymástól független nézőpontot
kapsz a fájlról. Például az egyik ablakban a fájl változó deklarációit
vizsgálod, egyúttal a fájl alján pedig az értékadásokat.

A CTRL-W w paranccsal lehet az ablakok között váltani. Ha a felső ablakban van
a kurzor, akkor az alsó ablakra vált és fordítva (a CTRL-W CTRL-W kombináció
ugyanezt eredményezi).


ABLAK BEZÁRÁSA

Az ablak bezárásához tartozó parancs: >

	:close

Az igazat megvallva, bármely olyan parancs bezárja a fájlt, ami a fájl bezárná (":quit" vagy "ZZ"). A ":close" parancs viszont megakadályozza, hogy véletlenül bezárjuk a szerkesztőt az utolsó ablak bezárásakor.


INAKTÍV SPLITEK BEZÁRÁSA

Ha sok ablakot nyitottál meg, de hirtelen egyetlen egyre kell koncentrálnod,
ez a parancs jól jöhet: >

	:only

Az aktív ablakon kívül minden más ablak bezáródik. Ha bármelyik ablakban van
mentetlen változás, akkor hibaüzenet jelenik meg és az ablak nem fog
bezáródni.

==============================================================================
*08.2*	Split létrehozása másik fájllal

A split parancsnak egy fájlnevet átadva argumentumként splitelhetjük az adott
fájlt:
>
	:split two.c

Ha eddig a one.c fájlt szerkesztetted, akkor a végeredmény az alábbihoz
hasonló lesz:

	+----------------------------------+
	|/* file two.c */		   |
	|~				   |
	|~				   |
	|two.c=============================|
	|/* file one.c */		   |
	|~				   |
	|one.c=============================|
	|				   |
	+----------------------------------+

Üres split létrehozása (üres buffer): >

	:new

A ":split" és ":new" parancsokat addig ismételheted, amíg jól esik, nincs
korlát.

==============================================================================
*08.3*	Ablakméret

A ":split" parancs prefixálható. Érték esetén ez fogja meghatározni az ablak
magasságát. Például, az alábbi parancs új splitet hoz létre alpha.c számára,
mely három sor magas lesz: >

	:3split alpha.c

A létező ablakok magasságának megváltoztatására több technika létezik. Ha
engedélyezve van az egérhasználat, egyszerű dolgunk van: ragadjuk meg az
állapotsort, mellyel kényelmesen beállíthatjuk a kívánt méretet.

Az ablak méretének növelése paranccsal: >

	CTRL-W +

Csökkentése: >

	CTRL-W -

A felesleges billentyűhasználat érdekében a parancsok prefixálhatóak (sorok száma). Így "4 CTRL-W +" négy sorral fogja az ablakunkat megnövelni növekményesen.

Az abszolút értéket így állíthatjuk be: >

	{height}CTRL-W _

Ami: egy szám {height}, CTRL-W majd alsó-összekötőjel (magyar kiosztáson a
shift -).
   A maximális magassághoz szimplán ne adjunk prefixumot a parancsnak: CTRL-W _.


AZ EGÉR HASZNÁLATA

Egészen elképesztő dolgokat tudunk véghez vinni a billentyűzet segítségével,
azonban az ablakméretet beállító funkciók gépelés igényesek. Egérrel sokkal
kényelmesebb, csak fogjuk meg az egérrel az állapotsort és állítsuk be a
kívánt méretet.


OPCIÓK

A 'winheight' változóval beállítható az ablak kívánt mérete és a
'winminheight' opcióval pedig az abszolút méretet tudjuk beállítani, amelytől
már nem lehet kisebb egy ablak.
   Logikusan, a 'winwidth' változó az ablak kívánt szélességéért, a
'winminwidth' változó pedig  az abszolút legkisebb szélességéért felel.
   Ha az 'equalalways' be van állítva, akkor új ablak nyitása és zárása esetén
az összes ablak egyforma méretű lesz.

==============================================================================
*08.4*	Vertikális splitek

A ":split" parancs az aktív ablak fölé nyitja az új ablakot. Ha az ablakot a bal oldalon szeretnéd elhelyezni, akkor: >

	:vsplit

Vagy: >
	:vsplit two.c

A végeredmény hasonló lesz:

	+--------------------------------------+
	|/* file two.c */   |/* file one.c */  |
	|~		    |~		       |
	|~		    |~		       |
	|~		    |~		       |
	|two.c===============one.c=============|
	|				       |
	+--------------------------------------+

Az ablak közepén lévő "|" sávot nevezzük elválasztónak. Elválasztja a két
ablakot egymástól.

Vertikális split létrehozása üres bufferrel ":vnew", a parancs rövidítés
nélkül: >

	:vertical new

A ":vertical" parancs beilleszthető minden olyan parancs elé, ami split
létrehozásáért felelős. Ez csak annyit tesz, hogy a split vertikálisan nyílik
meg horizontális helyett. 


VÁLTÁS AZ ABLAKOK KÖZÖTT

A korlátlan splitek száma mellett tetszőleges elrendezést is beállíthatsz.
Navigációra a következő parancsokat használjuk:

	CTRL-W h	mozgás egy ablakkal balra
	CTRL-W j	mozgás egy ablakkal lefelé
	CTRL-W k	mozgás egy ablakkal felfelé
	CTRL-W l	mozgás egy ablakkal jobbra

	CTRL-W t	mozgás a legfelső ablakban
	CTRL-W b	mozgás a legalsó ablakba

Észrevetted? Az ablakok közti navigációk is a h,j,k,l billentyűkel használják,
a különbség csak egy CTRL-W.
   Még több navigációval kapcsolatos parancs: |Q_wi|.

==============================================================================
*08.5*	Ablakok mozgatása

Nyitottál pár splitet, de el kell rendezned őket, hiszen rossz helyen vannak.
Az alapértelmezett három splites elrendezés valahogyan így néz ki:

	+----------------------------------+
	|/* file two.c */		   |
	|~				   |
	|~				   |
	|two.c=============================|
	|/* file three.c */		   |
	|~				   |
	|~				   |
	|three.c===========================|
	|/* file one.c */		   |
	|~				   |
	|one.c=============================|
	|				   |
	+----------------------------------+

Nyilvánvaló, hogy pontosan az az ablak helyezkedik el legalul, aminek a
legtetején kellene lennie. Az ablak mozgatásához először aktívvá kell tenni
(CTRL-W w), azaz belelépünk, majd elmozdítjuk: >

	CTRL-W K

A parancs végén nagy "K" van. Logikusan, K ismét a felfelé történő
elmozdulásért felel.
   Vertikális splitek esetén, CTRL-W K felfelé mozgatja az ablakot, teljes
   szélességet adva az ablaknak. Ha eddig így nézett ki a képernyőd:

	+-------------------------------------------+
	|/* two.c */  |/* three.c */  |/* one.c */  |
	|~	      |~	      |~	    |
	|~	      |~	      |~	    |
	|~	      |~	      |~	    |
	|~	      |~	      |~	    |
	|~	      |~	      |~	    |
	|two.c=========three.c=========one.c========|
	|					    |
	+-------------------------------------------+

Akkor CTRL-W K használata után így fog:

	+-------------------------------------------+
	|/* three.c */				    |
	|~					    |
	|~					    |
	|three.c====================================|
	|/* two.c */	       |/* one.c */	    |
	|~		       |~		    |
	|two.c==================one.c===============|
	|					    |
	+-------------------------------------------+

A három másik mozgatásért felelős parancs (melyet már minden bizonnyal
kitaláltál):

	CTRL-W H	ablak mozgatása balra
	CTRL-W J	ablak mozgatása alulra
	CTRL-W L	ablak mozgatása jobbra 

==============================================================================
*08.6*	Parancsok az összes ablak számára

Ha több ablak meg van nyitva a Vimben és ki szeretnél lépni a szerkesztőből,
akkor bezárogathatod egyesével, vagy a gyorsabb megoldást alkalmazod: >

	:qall

A parancs teljes formája ":quit all". Ha bármelyik ablak tartalma megváltozik
(nem mentett), akkor a Vim nem fog kilépni. A kurzor automatikusan arra az
ablakra pozícionál, ahol változások történtek. Menteni a ":write", kilépni a
":quit!" paranccsal tudsz.

Ha pontosan tudod, hogy több ablakban is történt változás, akkor az összes
ablakot elmentheted egyszerre: >

	:wall

A parancs teljes alakja "write all". Valójában, csak azokat a fájlokat menti,
amelyikben van menteni való, hiszen egy változatlan fájlt nincs értelme
menteni.
   A kombinált parancsok pedig ":qall" és ":wall", azaz "write all - quit all"
parancs: >

	:wqall

A parancs menti a mentetlent és ki is lép.
   Végül, a parancs mely kilép mentés nélkül: >

	:qall!

Óvatosan, a hatás irreverzibilis!


ABLAK NYITÁSA AZ ÖSSZES ARGUMENTUM SZÁMÁRA

Ahhoz, hogy a Vim minden fájlhoz ablakot nyisson, add át az "-o" argumentumot:
>
	vim -o one.txt two.txt three.txt

Az eredmény:

	+-------------------------------+
	|file one.txt			|
	|~				|
	|one.txt========================|
	|file two.txt			|
	|~				|
	|two.txt========================|
	|file three.txt			|
	|~				|
	|three.txt======================|
	|				|
	+-------------------------------+

Az "-O" argumentummal pedig az ablakok vertikálisan nyílnak meg.
   Ha a Vim már fut, akkor az ":all" parancs az összes argumentumban szereplő
fájlnak ablakit nyit. Vertikális megfelelője ":vertical all".

==============================================================================
*08.7*	Vimdiff használata

Létezik a Vim indításának egy speciális módja, ami két fájl között
különbségeket mutatja meg. Nyissunk meg egy fájl, "main.c"-t, az egyik sorát
változtassuk meg. Mentsd el a fájlt úgy, hogy bekapcsolod előtte a 'backup'
opciót, így a fájlról készül egy biztonsági mentés "main.c~" néven, ami a fájl
előző verzióját fogja tartalmazni. 
   Írd be az alábbi parancsot a terminálba (ne a Vimbe): >

	vimdiff main.c~ main.c

A Vim egyből két ablakkal indul. Csak azt a sort fogod látni, amit
megváltoztattál és még pár sort fölötte és alatta. 

	 VV		      VV
	+-----------------------------------------+
	|+ +--123 lines: /* a|+ +--123 lines: /* a|  <- fold
	|  text		     |	text		  |
	|  text		     |	text		  |
	|  text		     |	text		  |
	|  text		     |	changed text	  |  <- változás
	|  text		     |	text		  |
	|  text		     |	------------------|  <- törölt sor
	|  text		     |	text		  |
	|  text		     |	text		  |
	|  text		     |	text		  |
	|+ +--432 lines: text|+ +--432 lines: text|  <- fold
	|  ~		     |	~		  |
	|  ~		     |	~		  |
	|main.c~==============main.c==============|
	|					  |
	+-----------------------------------------+

(Sajnos az ábrán nem érzékelhető, de a Vimben színezetten jelenik meg.)

Azon sorok, melyek nem estek át változáson, a Vim nem jeleníti meg. Ezt hívjuk
zárt foldnak. Az ábrán ezt "<- fold" jelöléssel látható. Az ábrán szereplő
első sor gyakorlatilag a fájl érintetlen legelső 123 sora. Ezen sorok mindkét
fájlban egyenlőek.
   A "<- változás" jelölővel ellátott sor ki van emelve, a beírt karakterek
más színnel vannak kiemelve. Gyakorlatilag azonnal észre lehet venni, hogy
mely karaktereket adtuk hozzá, azaz a két fájl mely részei térnek el
egymástól.
   A törölt sorok "---" vannak megjelölve a main.c ablakban. Az ábrán ez "<-
törölt sor". Ezek a karakterek nincsenek ott. Szerepük csupán annyi, hogy a fájl sorait szinkronban tartsák.


A FOLD OSZLOP

Minden egyes ablak bal szélének a színe egy picivel másabb. Az ábrán ez "VV" van jelölve. Vedd észre a plusz karaktert minden zárt állapotú fold előtt. Ha az egérrel odakattintasz, akkor a fold kinyílik és láthatóvá válik a tartalma.
   A fold oszlopban egy - jel található, ha a fold nyitott állapotban van. Ha
erre kattintasz, akkor a fold bezáródik. 
   Értelemszerűen, ez csak akkor működik, ha az egér engedélyezve van. Ennek
hiányában  "zo" a fold megnyitása, "zc" pedig a fold bezárása.


DIFFELÉS A VIMBEN

A diff módot nem csak shellből indíthatjuk el. Szerkeszd a "main.c" fájlt,
majd jelenítsd meg a fájl előző verzióját: >

	:edit main.c
	:vertical diffsplit main.c~

A ":vertical" parancs csak az ablakok elhelyezéséért felel. Ha ezt lehagyod,
akkor az ablakok horizontálisan jelennek meg. 

Ha van patch fájlod, akkor egy harmadik diff mód is elérhető. Ha van patch
vagy diff fájlod, akkor szerkeszd azt a fájlt, amire a patch vonatkozik. Majd
add meg a Vimnek a patch fájlt: >

	:edit main.c
	:vertical diffpatch main.c.diff

FIGYELEM: A patch fájl csak egy patchet tartalmazhat, különben rengeteg
hibaüzenetet fogsz kapni és a végeredmény lehet, hogy nem az elvárt lesz.  A patchelési folyamat a Vim bufferében zajlik le, az eredeti fájl érintetlen marad, amíg nem mented azt.


GÖRGETÉSI SZINKRONIZÁCIÓ

Ha a fájl több pontján is változás van, akkor a már megszokott módokon
görgethetsz, a Vim megpróbálja szinkronban tartani a két ablakot. 
   Ha a funkcióra nincs szükséged, kikapcsolhatod: >

	:set noscrollbind


UGRÁS A KÜLÖNBSÉGEKRE

Ha a foldolás le van tiltva, a változások megtalálása nehézkes lehet. A
navigációs parancsok, melyeket használhatsz (előre irányban): >

	]c

És vissza: >

	[c

Prefixummal az n. változáshoz ugorhatsz.


VÁLTOZTATÁSOK ELTÁVOLÍTÁSA

???Tesztelni innen
A szöveget átmozgathatod egyik ablakból a másikba. Ez eltávolítja a változtatást, vagy éppen hozzáad. Mivel a Vim nem nézi folyamatosan a
szöveget, azért meg kell parancsolni, hogy frissítse a nézetet: >

	:diffupdate

A változásokat egyik ablakból át tudod mozgatni a másikba.  Vegyük a "main.c" és a "main.c~" fájlt példaképpen. Állj a kurzorral a bal oldali ablakba. 
A művelethez állj a bal oldali ablakban egy olyan pontra, ahol a jobb oldali
fájlból hiányzik valami. Add ki a parancsot: >

	dp

A változás el lesz távolítva, a szöveg át lesz helyezve a bal oldalról a jobb
oldalra. "dp" rövidítése "diff put".
   A másik irányba is elvégezheted ezt természetesen. Vidd a kurzor a jobb
ablak azon pontjára, ahol a sor változott, majd add ki a parancsot: >

	do

A változás el lesz távolítva oly módon, hogy a másik ablakból a változás
átmásolódik az aktív ablakba. Mivel nincs több változás, a Vim automatikuson
foldolja a fájlt. "do" rövidítése "diff obtain".
???Tesztelni eddig
A Diff módokról bővebben: |vimdiff|.

==============================================================================
*08.8*	Egyebek

A 'laststatus' változóval beállíthatjuk, hogy az utolsó ablaknak legyen-e állapotsora:

	0	soha
	1	csak splitek esetén (alapértelmezett)
	2	mindig

A parancsok nagy részének, melyekkel fájlokat lehet szerkeszteni, létezik
split vonatkozású "testvér parancsa". Command-line parancsok esetében például
"s" prefixumot megadva:
":tag" ugrás taghez, ":stag" ablak split létrehozása és ugrás taghez.
   Normál módú parancsoknál a mechanizmus hasonló, itt CTRL-W paranccsal kell
kezdenünk a parancsot. CTRL-^ az előző fájlhoz nyitja meg, CTRL-W CTRL-^ splitet
hoz létre és az előző fájlt nyitja meg. Könnyű megjegyezni, hiszen CTRL-W
szerves része a splittel kapcsolatos műveleteknek.

A 'splitbelow' opció beállításával a splitek nem az aktív ablak fölött, hanem
az aktív ablak alatt fognak megjelenni. Hasonlóan a 'splitright' opció az
aktív ablaktól jobbra nyitja  a splitet.

Ha nem szeretnéd (félig) a véletlenre bízni a új split helyét, akkor a
parancsok előtt meghatározhatod, hogy a split pontosan hová kerüljön:

	:leftabove {cmd}	balra, vagy az aktív fölé
	:aboveleft {cmd}	ugyanaz
	:rightbelow {cmd}	jobbra, vagy aktív alá
	:belowright {cmd}	ugyanaz
	:topleft {cmd}		tetejére, vagy balra
	:botright {cmd}		aljára, vagy jobbra


==============================================================================
*08.9*	Fülek

Az ablakok sohasem fedik egymást, ennek hátránya, hogy a az ablakunk gyorsan
megtelik. Megoldást jelenthet a füles elrendezés.

Tételezzük fel, hogy "thisfile"-t szerkeszted. Fül létrehozása új fájllal: >

	:tabedit thatfile

Ez megnyitja "thatfile"-t szerkesztésre, ami az ablak teljes felületét
használni fogja. Az ablak tetejére fülsáv kerül a két megnyitott fájl nevével:

	+----------------------------------+
	| thisfile | /thatfile/ __________X|    (thatfile félkövér)
	|/* thatfile */			   |
	|that				   |
	|that				   |
	|~				   |
	|~				   |
	|~				   |
	|				   |
	+----------------------------------+

Két fülünk van (minden értelemben). Az első fülön "thisfile" található saját
ablakával, a második pedig "thatfile" (szintén saját ablakával). A modern
böngészőkben alkalmazott füles elrendezés a legpontosabb asszociáció, mely
mentén el tudjuk képzelni az elrendezést. 

Most kattints "thisfile"-ra a fülsávon, az eredmény:

	+----------------------------------+
	| /thisfile/ | thatfile __________X|    (thisfile félkövér)
	|/* thisfile */			   |
	|this				   |
	|this				   |
	|~				   |
	|~				   |
	|~				   |
	|				   |
	+----------------------------------+

A fülek között az egérrel válthatunk. Ha nincs egered, vagy csak nem szeretnéd
használni, akkor a "gt" paranccsal tudsz váltani a fülek között. 

Hozzunk létre egy új fület az alábbi paranccsal: >

	:tab split

Ezzel létrejön egy új fül, a bufferbe pedig az a fájl fog betöltődni amit
éppen elhagytunk:

	+-------------------------------------+
	| thisfile | /thisfile/ | thatfile __X|   (thisfile félkövér)
	|/* thisfile */			      |
	|this				      |
	|this				      |
	|~				      |
	|~				      |
	|~				      |
	|				      |
	+-------------------------------------+

A ":tab" parancs használható minden olyan parancs előtt, amely ablakot nyit
meg. Például: >

	:tab help gt

Új fülön nyitja meg a "gt" dokumentációját.

Pár dolog, amit még a fülekkel művelhetünk:

- ha az utolsó fül utáni üres részre kattintunk, az mindig a következő fülre
  vált

- a képernyő jobb felső sarkában lévő "X" rákattintva a fül bezáródik (ha nem
  volt változás)

- a fülsávon dupla klikkelve új fül nyílik meg

- a "tabonly" parancs bezárja az összes inaktív fület (azokat melyeken nincs
  változás)

Több információ a fülekről: |tab-page|.

==============================================================================

Következő fejezet: |usr_09.txt|  A GUI használata

Jogi információk: lásd |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:

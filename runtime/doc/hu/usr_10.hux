*usr_10.txt*	For Vim version 8.2.  Last change: 2019 Nov 22

		  Bram Moolenaar: Vim felhasználói kézikönyv

			    Nagyobb változtatások


A 4. fejezetben eddig a kisebb változtatásokról esett szó. Ebben a fejezetben
olyan változtatásokról lesz szó, melyek ismételhetőek vagy a fájl jelentős
részét megváltoztatják. Visual blokk módban számos dolgot tehetünk a
szöveggel. Külső programokkal pedig egészen bonyolult műveleteket végezhetünk.

|10.1|	Parancsok felvétele és visszajátszása
|10.2|	Helyettesítés
|10.3|	Parancs-tartományok
|10.4|	A global parancs
|10.5|	Visual blokk mód
|10.6|	Fájl részeinek olvasása, írása
|10.7|	Szöveg formázása
|10.8|	Kis- nagybetű váltása
|10.9|	Külső programok használata

Következő fejezet: |usr_11.txt|  Helyreállítása
    Előző fejezet: |usr_09.txt|  A GUI használata
  Tartalomjegyzék: |usr_toc.txt|

==============================================================================
*10.1*	Parancsok felvétele és visszajátszása

A "." parancs megismétli az utolsó szerkesztést. De mi van akkor, ha többre
van szükséged, mint egyszerű változtatás? Itt jön be parancsok felvétele,
három lépésben:

1. A "q{register}" parancs elkezdi rögzíteni a kiadott parancsokat a {register}
   nevű regiszterbe. A regiszter csak a-z karakter lehet.
2. Add ki a parancsaidat.
3. A felvétel befejezéséhez nyomj q billentyűt (Normál módban).

A makró futtatásához írd be az alábbi parancsot "@{register}".


Egy példával demonstrálható, hogy hogyan működik ez élesben. A programunkba
fájlokat kell importáljunk:

	stdio.h ~
	fcntl.h ~
	unistd.h ~
	stdlib.h ~

A végeredmények így kell kinéznie:

	#include "stdio.h" ~
	#include "fcntl.h" ~
	#include "unistd.h" ~
	#include "stdlib.h" ~

A bal felső sarokba viszed a kurzort, a stdio.h s betűjére. A parancsok pedig:

	qa			Elkezdjük a makró rögzítését az a jelű
	^			regiszterbe.
	i#include "<Esc>	Beírjuk azt, hogy:  #include " a sor elejére.
	$			A sor végére ugrunk.
	a"<Esc>			Hozzáfűzzük az idézőjelet (") a sor végére.
	j			A következő sorra ugrunk.
	0			A sor elejére ugrunk.
	q			Leállítjuk a makró rögzítését.

A munka elvégezve. Futtassuk a makrót a "@a" parancs kiadásával.
   A makróhívások prefixálhatóak, így az fenti hívást így ismételhetjük meg
háromszor egy lépésben: >

	3@a


MOZGÁS ÉS FUTTATÁS

A szerencse forgandó, lesznek olyan szituációk, amikor a makrókat nem egy
helyen kell futtatnod, hanem szanaszét szórva a fájlban. Ugorj a következő
helyre és futtasd a makrót újra a "@a" paranccsal. Ha egyszer már futtattad a
makrók, akkor elérhetővé válik a "@@" makróhivatkozás, mely legutolsó
futtatott makrót hívja meg. Gépelni is sokkal kellemesebb. Ha a b jelű makrót
futtatod "@b", "@@" a b jelű makrót fogja hívni.
   Ha össze szeretnénk hasonlítani a makrókat és a "." parancsot, akkor a
különbség számottevő. Először is, "." parancs csak egy szerkesztés tud
ismételni, "@a"-val pedig számos apró lépést alkalmaztunk. "." csak Insert
parancs alatti szerkesztéseinket ismétli meg ("@a" során Normál módból
váltottunk Insert módba, aztán vissza Normál, vissza Insert és Normál).
   Ráadásul, összesen 26 regiszter áll rendelkezésünkre ("." csak egy, mely
állandóan felülíródik).


REGISZTEREK HASZNÁLATA

A regiszterekkel tudjuk rögzíteni a parancsainkat, akár csak a törlés vagy
másolás parancsok (a különbség csak a regiszter azonosítója). Ezen tulajdonság
még magasabb szintű manipulációt tesz lehetővé.
   Tegyük fel, hogy rögzítettél már valamit az n jelű regiszterbe. Futtatáskor
kiderül, hogy valami baj történt. Megpróbálhatod újra rögzíteni a szekvenciát,
de semmi garancia nincs arra, hogy hiba nélkül tudod rögzíteni. Csináld így:

	G			Fájl végére ugrás
	o<Esc>			Üres sor kurzor alá
	"np			Szöveg másolása n regiszterből.  Láthatóvá
				válnak a makrót tartalmazó parancsok.
	{rögzített parancsok}   Javítsd ki a parancsot. Mintha szöveget
				szerkesztenél.
	0			Sor elejére ugrás
	"ny$			A helyes parancs visszamásolása az n jelű
				regiszterbe.
	dd			Ideiglenes sor törlése.

Most már futtathatod a korrigált "@n" makrót. Ha olyan parancsot rögzítettél,
amely sortörést tartalmaz, akkor az utolsó két lépést értelemszerűen egészítsd
ki, hogy az összes sort tartalmazza).


HOZZÁFŰZÉS A REGISZTERHEZ

Eddig csak kisbetűs regisztereket használtunk. Hozzáfűzéshez használj
nagybetűs regiszter azonosítót.
   Tegyük fel, hogy felvettél valamit a c regiszterbe, amivel változtatsz egy
szót. Remekül működik, de hozzá szeretnéd adni, hogy keresse meg a következő
szót. Semmi akadály: >

	qC/word<Enter>q

A "qC" paranccsal nyitsz, mely hozzá fog fűzni a c jelű regiszterhez. A
nagybetű regiszterazonosító mindig a kisbetűshöz fűz hozzá (C -> c).

Ez működik másolás és törlés rögzítése esetében is. Például tegyük fel, hogy
össze szeretnél gyűjteni adott sorokat az "a regiszterbe, hogy aztán egyszerre
bemásolhasd őket. Az első sort másold be így: >

	"aY

A másodiktól kezdve pedig így: >

	    "AY

Ismételd amíg jól esik. Az "a jelű regiszter tartalmazni fogja a kimásolt
sorokat pontosan abban a sorrendben, ahogy kimásoltad őket.

==============================================================================
*10.2*	Csere						*find-replace*

A ":substitute" paranccsal cserélhetsz szöveget, akár több soron, vagy az
egész fájlon keresztül. A parancs általános alakja: >

	:[range]substitute/from/to/[flags]

A parancs lecseréli az összes [range] tartományban lévő "from" szót a "to" szóra.
Például, lecseréled az összes "Professor" szót "Teacher"-re az összes sorban:
>
	:%substitute/Professor/Teacher/
<
	Megjegyzés:
	A ":substitute" parancsot szinte kivétel nélkül sohasem írjuk ki
	teljes alakban. Az esetek nagy százalékában az emberek csak ":s"-ként
	rövidítik. Ezentúl a kézikönyv is így fog a cserére hivatkozni.

A "%" a csere parancs előtt jelenti azt, hogy a csere az összes sorra érvényes
lesz (teljes fájlon át). "%" nélkül ":s" csak az aktív sorban cserél. A
tartományokról bővebben a 1. "%" nélkül ":s" csak az aktív sorban cserél. A
tartományokról bővebben a |10.3| fejezetben.

Alapértelmezés szerint a ":substitute" parancs csak az első előfordulást
cseréli le. Például, az előző parancs az alábbit eredményezi, ha a sorban
egynél több előfordulás van:


	Professor Smith criticized Professor Johnson today. ~

Erre:

	Teacher Smith criticized Professor Johnson today. ~

Ahhoz, hogy az összes előfordulást lecseréld, add a g (global) flaget a
parancs végéhez: >

	:%s/Professor/Teacher/g

Eredmény (a 171. sorban szereplő példa alapján):

	Teacher Smith criticized Teacher Johnson today. ~

Egyéb flagek, többek között a p (print), melynek hatására a ":substitute"
kiírja az utolsó sort, melyben cserélt. A c (confirm) flag arra utasítja a
":substitute" parancsot, hogy megerősítést kérjen minden csere előtt. Írd be
az alábbit: >

	:%s/Professor/Teacher/c

Mihelyst a vim megtalálja a "Professor" előfordulását, udvariasan, de végképp
sem tolakodóan megkérdez, hogy mit tegyek. Valahogy így: >

	replace with Teacher (y/n/a/q/l/^E/^Y)?

A válaszok pedig lehetnek:

	y		Igen; cseréld le.
	n		Ne; hagyjuk ki.
	a		Az összesen; cseréld le ezt, és minden továbbit kérdés
			nélkül.
	q		Kilépés; ne változtass többet.
	l		Utolsó; még ezt cseréld le és lépj ki.
	CTRL-E		Görgetés egy sorral feljebb.
	CTRL-Y		Görgetés egy sorral lejjebb.


A "from" része a csere parancsnak (azaz amit keresünk) valójában egy minta.
Ugyanezen a mintán alapul a keresés is. Például, az alábbi parancs csak akkor
cserél, ha "the" szó a sor legelején található: >

	:s/^the/these/

Ha a "from" vagy a "to" mezők per jelet tartalmaznak akkor  visszaperjellel
escapelni kell. Egyszerűbb azonban, ha perjel helyett egy másik karaktert
használunk. Például "+" karaktert:

???  Teszt
A simpler way is to use another character instead of the slash.  A plus, for 
example: >

	:s+one/two+one or two+

==============================================================================
*10.3*	Tartományok

A ":substitute" parancs, mint megannyi más ":" parancs, alkalmazhatóak
meghatározott sorokra. Ezt hívjuk tartományoknak.
   A legegyszerűbb tartomány a {number},{number}. Például: >

	:1,5s/this/that/g

Futtatja a csere parancsot az első öt soron (beleértve 1., valamint az 5.
sort is). A tartomány mindig a parancs elé kerül.

Egyetlen egy számmal a csere csak az adott számú sorban hajtódik végre: >

	:54s/President/Fool/

Néhány parancs a teljes fájlon hajtódik végre, ha nem határozol meg
tartományt. Ahhoz, hogy a parancs az aktuális sorban fusson, alkalmazhatod a
"." tartományt. A ":write" parancs így működik. Tartomány nélkül a fájl összes
sora kiíródik, viszont ha csak az aktuális sort szeretnéd kiírni:  >

	:.write otherfile

A fájl első sora tartományok meghatározásánál mindig számmal szerepel. De mi
can az utolsó sorral? A "$" karaktert használjuk erre a célra. Például, csere
az aktív sortól a fájl végéig. >

	:.,$s/yes/no/

A "%" tartomány gyakorlatilag csak egy rövidítése a "1,$" tartománynak.


MINTÁK HASZNÁLATA A TARTOMÁNYOKBAN

Tegyük fel, hogy egy könyv fejezetét írod és ki szeretnél cserélni minden
"grey" szót a "gray" szóra, de csak ebben a fejezetben, a következőben nem.
Tudod, hogy a "Chapter" szó csak a fejezetek címében a sor elején szerepelhet, 
így fel tudod használni a tartomány pontos megállapításához. A feladat
megoldása: >

	:?^Chapter?,/^Chapter/s=grey=gray=g

A keresési mintát kétszer láthatod. Az első "?^Chapter?" találja meg a
kurzortól felfelé elhelyezkedő sorokot egészen az előző Chapterig. A ?minta? 
tehát az adott pozíciótól visszafelé keres. Hasonlóan a "/^Chapter/" minta
pedig előre irányban találja meg a következő Chaptert.
   A káosz elkerülése érdekében a perjelek helyett itt "=" jel szerepel. A
perjel is működőképes, de jelen esetben túl zajos.


BŐVÍTÉS ÉS SZŰKÍTÉS

A keresési parancsunkkal már csak az az egy baj van, hogy ha a következő
fejezet címében szerepel a "grey" szó, akkor a keresés azt is kigyomlálja.
Talán ezt akarod, de mi van ha nem? Ha nem, akkor offszetelned kell a
tartományt.
   Szőkítsük le a tartományt egy sorral (a következő Chapter szó fölötti sor):
   >
	/Chapter/-1

Az egész számok halmazába tartozó bármely számot használhattuk volna 1 helyett.
Így pedig bővíthetjük a tartományt (következő Chapter alatti második sorig): >

	/Chapter/+2

Nevesített tartományokat is offszetelhetünk. Nézzük: >

	:.+3,$-5

A tartomány három sorral a kurzor alatt kezdődik és a fájl vége előtt öt
sorral ér véget. 


JELÖLŐK HASZNÁLATA

Ahelyett, hogy azon töprengenél, hogy hogyan adj meg egy komplex tartományt,
használj jelölőket. Gyorsabb.
   Rakd le a jelölőid a 3. fejezetben leírtak szerint. Például, "mt"
jelöléssel a tartomány tetejét (top), "mb"-vel pedig az alját (bottom). Ezt
így hasznosíthatod (a jelölők sora még a tartományhoz tartozik): >

	:'t,'b


VISUAL MÓD ÉS A TARTOMÁNYOK

Tartományokat Visual módban egyszerűen, könnyen és gyorsan megadhatunk.
Részben erre is való a mód. Jelöljünk ki valamit, hogy nyomjunk egy ":" a
command-line módba lépéshez, melybe azonnal az alábbi érdekességet láthatjuk:
>
	:'<,'>

A működés teljesen normális. Ezek a karakterek a vizuális tartomány elejét és
végét jelentik. A parancsaidat ugyanúgy folytathatod, viszont az összes művelet 
a kijelölt tartományon lesz elvégezve.

	Megjegyzés:
	Visual módban a CTRL-V-vel jelölhetünk ki szövegblokkokat, azonban a
	leírtakkal ellentétben a művelet végrehajtódik minden olyan sor
	egészén, amelynek a blokk megelőzőleg a részét képezte. Ez változhat a
	későbbi Vim verziók során.

A '< és '> nem mások mint jelölők, melyeket a Vim a vizuális kijelölés elejére
és végére helyez. A jelölők addig maradnak érvényben, amíg egy másik Visual
módú kijelöléssel ki nem jelölünk valamit. Ebből az következik, hogy
újrahasznosíthatóak. Azaz, a pozíciójukhoz ugorhatsz "'<" (a ' csak a sor
számát jelöli), de fel is használhatod őket további tartományok definiáláshoz.
>
	:'>,$

Az alábbi címzéssel  a az utolsó vizuális kijelöléstől a fájl végéig tartó
tartományt hozunk létre.


A SOROK SZÁMA

Ha pontosan tudod, hogy mennyi sorban szeretnél dolgozni, az aktív sorhoz
hozzáfűzheted számformátumban:  >

	:.,.+4


A végére pedig jöhet a parancs. Az így képzett művelet az aktív sor "." és az
azt követő négy sor ".+4" (azaz összesen ötre) értendő.

==============================================================================
*10.4*	A global parancs

A ":global" parancs az egyik leghatékonyabb parancs a Vimben. Keresési minta
meghatározása után lefuttathatjuk az általunk meghatározott parancsot,
egyszerre. Általános alakja: >

	:[range]global/{pattern}/{command}

Ez nagyon hasonló a ":substitute" parancshoz, de ahelyett, hogy cserét
végeznénk el, lefuttatjuk a {command} parancsot.

	Megjegyzés:
	A ":global" parancs által csak olyan parancsokat tudunk futtatni,
	melyek ":"-al kezdődnek (tehát Normal módú parancsokat futtatására
	nincs lehetőség), legalábbis direkt módon. A Normal módú parancsokat a
	|:normal| parancsok keresztül érheted el.

Tegyük fel, hogy le át szeretnéd alakítani az összes "foobar" szót
"barfoo"-ra, de csak C++ típusú kommentekben. A kommentek minden esetben "//"
jellel kezdődnek. A parancs: >

	:g+//+s/foobar/barfoo/g

Az első ":g" rész a ":global" rövid alakja, mint ":s" esetében a ":substitute".
A minta "+" karakterek közé van zárva, erre azért van szükség, mert
perjelekre keresünk. A következő a substitute parancs, ami lecseréli
"foobart"-t "barfoo"-ra.
   A global alapértelmezett tartománya az teljes fájl, noha nem adtunk meg
explicit tartományt. A ":substitute" parancsnak át kell adnunk egy tartományt,
amit ha nem teszünk meg, a csere csak egy sorban lesz végrehajtva. Ez lényeges
különbség. 
   A parancs nem tökéletes, hiszen a "//" jelek akár a sorok közepén is
előfordulhatnak, a csere pedig érintené a komment jelek előtti "foobar"-okat
is.

A ":substitute" parancshoz hasonlóan, itt is akármilyen tartományt
megadhattunk volna. Később meg fogsz ismerni sokkal bonyolultabb mintákat és
tovább tökéletesítheted a jelenlegi példát.

==============================================================================
*10.5*	Visual blokk mód

A CTRL-V egy egészen más kijelölési módot ajánl, amivel talán még nem is
találkoztál. Négyzetes területet tudsz kijelölni. Létezik pár manipulációs 
parancs, melyekkel konkrétan erre a kijelölési módra születtek.

A "$" parancs Visual blokk mód használatakor különösen viselkedik, az összes
sor kijelölése ki lesz terjesztve a sor végéig, még azoké is, melyek
rövidebbek.  A kijelölés addig marad aktív, amíg horizontális irányban el nem
kezdesz mozogni visszafelé. "j" megtartja, "h" megszünteti (a kijelölés
átalakul valódi négyzetes kijelölésre, és a sorok nagy részének megszűnik a
sor végéig tartó kijelölése).


SZÖVEG BEILLESZTÉSE

Az "I{String}<Esc>" beilleszteti a {String}et a blokk elé. Normál módban "I"
hasonlóan működik, ott a sor elejére illeszt. Nyomj CTRL-V-t és jelölj ki egy
blokkot a kurzor segítségével. Most üss I karaktert, Insert módba kerülsz, a
szerkesztő pedig várja a {String}et. A beírt szöveget csak a kijelölésed első
sorában fogod látni, de ha elhagyod az Insert módot, akkor érteni fogod a
technika lényegét.
   Térj vissza Normal módba <Esc>, erre a beírt szöveg a blokk kijelölés
összes sora előtt megjelenik. Például:

	include one ~
	include two ~
	include three ~
	include four ~

Vidd a kurzort a "one" szó "o" betűjére, majd nyomj CTRL-V-t. Mozogj lejjebb
három sorral "3j" a "four" szóig. A blokk kijelölésed négy soros. Most
varázsolj: >

	Imain.<Esc>

Eredmény:

	include main.one ~
	include main.two ~
	include main.three ~
	include main.four ~

Ha a köztes sorok nem érintik a kijelölést, akkor abba a sorba semmi nem kerül
beillesztésre. Vizsgáljuk meg. Az alábbi példában jelölj ki egy blokkot úgy,
hogy az alsó és felső "long" szavak ki legyenek jelölve. Láthatóvá válik, hogy
a középső sor nem érinti a kijelölést, ezért oda semmi sem lesz beillesztve.
Tégy egy próbát:

	This is a long line ~
	short ~
	Any other long line ~

		  ^^^^ a kijelölt blokk

Most pedig futtasd a "Ivery <Esc>" parancsot. Ha minden tökéletesen ment
végbe:

	This is a very long line ~
	short ~
	Any other very long line ~

A rövid sorba nem került semmi.

Ha a beszúrás során alkalmazol újsor karaktert, akkor a beillesztés egyszerű,
Normal módú biellesztésként megy végbe és csak az első sorra hat (a kijelölés
többi sorába nem kerül semmi).

Az "A" parancs ugyanúgy működik, csak a blokk jobb oldalára illeszt be, illetve
a rövidebb sorokba is beszúr (a blokk kijelölés folytatásaként). A két parancs
(I és A blokk módban) azért így lett tervezve, hogy eldönthessük, szeretnénk-e
beilleszteni a rövidebb sorokba. 
   "A"-nak egy speciális esete van: ha a blokk meghatározásakor "$" parancsot
használunk (kijelölés a sor végéig), akkor az összes sor végére fűz.
   A fenti példát felhasználva, válts át Visual módra, majd futtasd a 
"$A XXX<Esc> parancsot:

	This is a long line XXX ~
	short XXX ~
	Any other long line XXX ~

A technika "$" használata nélkül nem működik. A Vim megjegyzi, ha "$"-t
használunk. Ha ugyanezt a hatást próbáljuk elérni, de a kijelölés során más
egyéb navigációs paranccsal kerülünk a sor végére (például "100l"), azonos
parancs mellett ($A XXX<Esc>) más eredményt fogunk tapasztalni. A kijelölés
során a kurzor kezdeti pozíciója nem számít, hiszen a lényeg a "$"-al való
ugráson van.


SZÖVEG VÁLTOZTATÁSA

A Visual blokk mód "c" (change) parancsa kitörli a kijelölt blokkot és Insert 
módra vált, amivel szövegbevitelt kezdeményezhetünk. A beírt szöveg megjelenik a
kijelölés összes sorában.
   Jelöljük ki ismét a "long" szavakat, de most parancsunk legyen
"c_LONG_<Esc>", ezt kapjuk:

	This is a _LONG_ line ~
	short ~
	Any other _LONG_ line ~

A parancs "I"-hez hasonlóan működik, ugyanis a rövidebb sorokat nem
változtatja. Sortörés a bevitel során nem alkalmazható. 

A "C" parancs a kijelölés bal szélétől a sor végéig töröl és Insert módra
vált. A bevitt szöveg csak a kijelölésben szereplő sorokra érvényes, a
rövidebb sorokat nem egészíti ki. "C" működése normál módban teljesen
megegyezik, azonban a szerkesztés tárgya egyetlen egy sor.
   Még mindig ugyanazon példánál maradva gépeljünk "Cnew text<Esc>":

	This is a new text ~
	short ~
	Any other new text ~

Meg kell jegyezzük, hogy hiába csak a "long" szavak voltak kijelölve, a "long"
szavak utáni rész is ki lett törölve. Tehát, csak a kijelölés bal széle
számít.
   A rövidebb sorok, melyek nem érnek bele a blokkba, érintetlenül maradnak.

Egyéb parancsok, melyek megváltoztathatják a karaktereket a blokkban:

	~	kis- nagybetű csere	(a -> A and A -> a)
	U	nagybetűre csere        (a -> A and A -> A)
	u	kisbetűre csere         (a -> a and A -> a)


KITÖLTÉS KARAKTEREKKEL

A blokk kitöltéséhez használd az "r" parancsot. A példa mondat ugyan az, a
parancs viszont "rx":

	This is a xxxx line ~
	short ~
	Any other xxxx line ~


	Note:
	???Teszt
	A sorok végén túli karaktereket is érinteni szeretnéd, akkor nézd át a
	'virtualedit' beállításait a 25. fejezetben.
	If you want to include characters beyond the end of the line in the
	block, check out the 'virtualedit' feature in chapter 25.


BEHÚZÁS

A ">" behúzza a szöveget egy 'shiftwidth' értékkel, üres karaktereket beszúrva.
A behúzás kezdőpontja a blokk bal széle.
   Jelöld ki ismét a "long" szavakat, majd húzd be őket ">" paranccsal:

	This is a	  long line ~
	short ~
	Any other	  long line ~

A behúzás értékének megváltoztatásához állítsd át a 'shiftwidth' értékét négy
szóköznyire: >

	:set shiftwidth=4

A "<" visszaállítja a behúzást a blokk bal szélétől számítva. Ha behúzás
értékétől kevesebb üres karakter áll a blokk bal széle előtt, akkor a behúzás
az összes üres karaktert eltávolítja.


SOROK ÖSSZEKAPCSOLÁSA

A "J" parancs az aktív sort az alatta lévővel összekapcsolja, így eltávolítja
a sortörést. Gyakorlatilag a sortörést, a következő sor üres karaktereit és az
aktív sor végén lévő üres karaktereket egy szóközre cseréli. A sorok vége után
két szóközt illeszt be, amit a 'joinspaces' opcióval állítani lehet.
   Kezdjük a már jól megismert példával. A "J" parancs eredménye:

	This is a long line short Any other long line ~

A "J" parancshoz nem szükséges blokk kijelölés. Visual és Visual Line módban
is ugyanúgy működik.

Ha azt szeretnéd, hogy a program megtartsa a szóközöket és egyéb üres
karaktereket, akkor használd a "gJ" parancsot.

==============================================================================
*10.6*	Fájl részének olvasása írása

Ha e-mailt írsz, akkor jól jöhet, ha egy fájlt tartalmát be tudod illeszteni.
Ez a ":read {filename}" paranccsal oldható meg. A fájl tartalma a kurzor alá
ágyazódik. 
   Kiindulópontunk:

	Hi John, ~
	Here is the diff that fixes the bug: ~
	Bye, Pierre. ~

Vidd a kurzor a második sorra és ágyazd be a fájlt:

	:read patch

A "patch" fájl tartalma megjelenik:

	Hi John, ~
	Here is the diff that fixes the bug: ~
	2c2 ~
	<	for (i = 0; i <= length; ++i) ~
	--- ~
	>	for (i = 0; i < length; ++i) ~
	Bye, Pierre. ~

A ":read" parancs kezeli a tartományokat. 
The ":read" command accepts a range. A megadott tartomány alá kerül a fájl
tartalma. Ezért ":$r patch" a fájl végére illeszti be a tartalmat. 
   Mi van akkor, ha a fájl legelejére szeretnél beágyazni? Tartományként a 0.
sort kell használnunk. A sor valójában nem létezik, a legtöbb parancs
hibaüzenettel megszakad, de kivételesen ennél a parancsnál használható:
>
	:0read patch

A "patch" fájl a az első sor fölé kerül.


SOROK MENTÉSE

Sorok mentéséhez is alkalmazhatjuk a  ":write" parancsot. Tartomány nélkül a
teljes fájl kiíródik. Tartományokkal viszont értelemszerűen az érintett sorok
írodnak ki: >

	:.,$write tempo

A parancs az aktív sortól a fájl végég terjedő sorokat írja ki a "temp"
fájlba. Ha a fájl már létezik, hibaüzenetet kapunk. A Vim megvéd a véletlen
felülírásoktól. Ha tudod mit csinálsz és ezt akarod egyébként is, akkor "!"
karaktert hozzá kell fűzz a parancs végéhez: >

	:.,$write! tempo

ÓVATOSAN: A ! jelnek a parancs után kell következnie, szóközök nélkül,
egyébként szűrőparancsként értelmeződik, melyeket a későbbi fejezetekben
megismersz.


HOZZÁFŰZÉS FÁJLHOZ

A fejezet előző részében részletesen be lett mutatva, hogy hogyan tudunk
sorokat összegyűjteni a regiszterek segítségével. Ha a feladat úgy kívánja, a
sorokat fájlokba is kiírhatjuk. Az első parancs legyen ez: >

	:.write collection

Most menj arra a sorra, amit ki szeretnél írni és a második parancstól kezdve
az utasítás: >

	:.write >>collection

A ">>" arra utasítja a Vimet, hogy ne írja felül a fájlt, hanem a tartomány
részét képző szöveget fűzze hozzá a fájlhoz. A parancs tetszőleges számban
ismételhető.

==============================================================================
*10.7*	Szövegek formázása

Ha egyszerű szöveggel dolgozol, szép, ha minden sorod elfér az ablakban. Hogy
ez valóra váljon, állítsd be a 'textwidth' opciót az alábbiak szerint: >

	:set textwidth=72

Talán emlékszel, hogy a példa vimrc fájl használta ezt a beállítást az összes
fájlhoz. Ezért ha még mindig a példa vimrc fájlt használod, akkor a 'textwidth'
opció már be van állítva, melyet így ellenőrizhetsz: >

	:set textwidth

A sorokat így a Vim töredezi, hogy beleférjenek a 72 karakteres határba.
Viszont, ha csak félig töltesz ki egy sort, illetve ha törölsz egy-két szót,
akkor a sor vagy túl hosszú, vagy túl rövid lesz. A Vim nem formázza
(automatikusan) a szöveget, azért a munka ránk hárul: >

	gqap

A parancs a "gq" operátorral kezdődik. Majd jön a tartomány "ap" (a
paragraph). Két bekezdést egy üres sor választ el egymástól.

	Megjegyzés:
	Azok a sorok melyek üres karaktereket tartalmaznak, NEM választják el
	a bekezdéseket egymástól. Nehéz észrevenni!

A "ap" helyett használható bármely más tartomány, vagy szöveg-objektum. Ha a
bekezdéseit megfelelően el vannak választva, akkor ezzel a paranccsal az egész
fájlt beigazíthatod: >

	gggqG

"gg" a fájl elejére ugrik, "gq" a formázási operátor, tartományként pedig
"G"-t használunk (fájl vége).

Abban az esetben, ha a bekezdések nem jól formázottak, vagy csak egy sort
szeretnél manuálisat formázni, akkor menj a formázandó sorra. Kezdd a "gqj"
paranccsal. Ez az aktív és az az alatti sort fogja formázni. Ha az aktív sor
túl rövid volt, akkor szavak kerülnek át az aktív sorba és fordítva, majd a
kurzor egy sorral lejjebb kerül.  A "." paranccsal ismételhető. Ismételd addig,
amíg a fájl szöveg végére nem érsz.

==============================================================================
*10.8*	Kis- nagybetűk cseréje

A szövegben már megvannak a fejléceid, melyek előtt a "section" szó található,
viszont kisbetűs az összes. Át szeretnéd őket alakítani nagybetűssé. Erről
gondoskodik a "gU" operátor. A kurzort helyezd a legelső oszlopba:  >

			     gUw
<	section header	    ---->      SECTION header

A "gu" operátor ennek az ellentéte (kisbetűssé alakít): >

			     guw
<	SECTION header	    ---->      section header

Ha meg szeretnéd fordítani a kis- egy nagybetűket: "g~". Az összes említett
parancs operátor bármely elmozdulással, szöveg-objektummal és Visual módban.
Ha az operátorokat egy teljes sorra szeretnéd alkalmazni, akkor duplázd meg
őket. A "d" operátorból így lesz "dd" (teljes sor törlése). Hasonlóképpen,
"gugu" (röviden guu) az egész sort kisbetűssé, "gUgU" (gUU) az egész sort
nagybetűssé alakítja, a "g~g~" (g~~) az egész sorban váltja a karaktereket.
Például: >

				g~~
<	Some GIRLS have Fun    ---->   sOME girls HAVE fUN ~

==============================================================================
*10.9*	Külső programok használata

A Vim parancsok nagyszerűek, bármire képesek. Azonban akadhatnak olyan dolgok,
melyekre egy külső parancs sokkal optimálisabb és gyorsabb.
   A parancs: "!{motion}{program}" egy blokknyi szöveget küld a külső program
számára. Más szavakkal, rendszerszintű programot futtat, melynek neve {program}
(shell parancsok), a {motion} pedig meghatározza az elküldendő szöveg
tartományát. A program kimenete felülírja  a kijelölt blokk helyét.
   Ez egyébként egy elég gyatra megfogalmazás, ha nem vagy tisztában a UNIX
filterekkel. Nézzünk egy példát. A "sort" parancs sorba rendezi a fájl sorait.
Ha a "sort" parancsot futtatsz egy rendezetlen input.txt nevű fájlon, akkor a
"sort" program sorba rendezi a fájl tartalmát, majd kiírja ouput.txt fájlnéven.
(Ez UNIXON és MS-Windowson is működik). >

	sort <input.txt >output.txt

Most csináljuk meg ez Vimben is. Az első és az ötödik sorban szeretnéd 
végrehajtani a rendezést. Vidd a kurzort az első sorra. Futtasd az alábbit: >

	!5G

A "!" parancs jelzi, hogy itt egy külső programot fogunk meghívni. A Vim
feltételezi, hogy az általunk megadott mozgással át tudja adni a tartományt a
külső program számára. Az "5G" paranccsal a kurzor az 5. sorra ugrik (így
tartományunk 1.-5. sor lesz).
   A kurzor a command-lineba kerül, melyen a ! prompt látható (mivel !5G
esetén nem adtuk meg a külső program nevét, csak a tartományt definiáltuk). A 
Vim arra vár, hogy beírjuk a külső program nevét (esetünkben a "sort"). A
teljes parancs pedig így néz ki: >

	!5Gsort<Enter>


A sort parancs lefutott az általunk küldött 5 soron, a kimenete pedig felülírta
a régi tartományt.

	line 55			      line 11
	line 33			      line 22
	line 11		-->	      line 33
	line 22			      line 44
	line 44			      line 55
	last line		      last line

A "!!" parancs az aktuális sort küldi el egy külső programnak (ilyenkor 
promptként ":.!" látható ). Unix rendszeren a "date" parancs kiírja a dátumot
és az időt. "!!date<Enter>" pedig lecseréli az aktuális sort a "date" program
kimenetére. Hasznos, ha dátumot és időt szeretnél beszúrni a fájlba.

HA NEM MŰKÖDIK

A terminálban add ki a "date" parancsot, a kimenet hasonló lesz:

	2021. okt. 8., péntek, 11:29:40 UTC~

Ha nem látsz semmit, vagy hibaüzenetet kapsz, akkor az bizony probléma.
Sajnos számos oka lehet. Az is lehet, hogy a rendszerszintű beállításaid
nincsenek rendben, végső esetben nézz körül az alábbiakban:

	'shell'		alapértelmezett shell beállítás
	'shellcmdflag'	shell számára átadott argumentumok
	'shellquote'	shell idézőjelek típusa
	'shellxquote'	idézőjelek típusa shellben és átirányításokban
	'shelltype'	shellfajta (csak Amigán)
	'shellslash'	perjelek használata "\" helyett (csak MS-Windows stb.)
	'shellredir'	shell kimenetének átirányító karakterei

Unix rendszereken a hibalehetőség mérsékelt, hiszen, általában két shell áll
rendelkezésre: az "sh" és a "csh". A Vim megnézi a 'shell' opció részleteit és
a shell paramétereit ennek megfelelően próbálja beállítani. 
   MS-Windowson számos shell létezik, így előfordulhat, hogy nem működik és
külön be kell állítanod. Böngészd át a helpfájlokat ez ügyben.


PARANCSKIMENET OLVASÁSA

Az aktuális könyvtár listájának beolvasása:

Unixon: >
	:read !ls
MS-Windowson: >
	:read !dir

Az "ls" vagy "dir" parancs kimenetét a Vim elkapja és beilleszti szövegként a
kurzor alá, hasonlóan a fájlok olvasásához, viszont itt "!" után a Vim egy
parancsot vár.
   A programnak argumentumok is átadhatóak, valamint tartomány az új tartalom
helyzetére vonatkozóan: >

	:0read !date -u

A parancs a fájl elejére beilleszti a date program kimenetét UTC formátumban.
(Amennyiben a date parancsot hívható "-u" argumentummal). Megjegyzés: "!!date"
lecseréli az aktuális sor, ":read !date" csak egyszerűen hozzáfűz a fájlhoz.


WRITING TEXT TO A COMMAND

Unix rendszeren a "wc" parancs szavakat számol (word count). A fájl szavainak
számlálásához: >

	:write !wc

Ez ugyanaz a write parancs amit eddig használtunk, itt viszont fájlnév helyett
a "!" karakter jelző a külső hívást, melyet a program neve követ. Az írott
szöveg át lesz adva a program standard bemenetére. A kimenet pedig hasonlítani
fog ehhez:

       4      47     249 ~

A "wc" parancs elég szűkszavú. A kimenet azt jelenti, hogy a fájl: 4 soros, 47
szót tartalmaz és 249 karakterből áll.

Ne ess bele az alábbi hibába: >

	:write! wc

Ez kiírja a "wc" fájlt, megerősítéssel. A szóköz itt fontos.
This will write the file "wc" in the current directory, with force.  White
space is important here!


A KÉPERNYŐ ÚJRARAJZOLÁSA

Ha külső program hibába ütközött és hibaüzenetet kaptál, a kinézet
megváltozhat. A Vim nagyon hatékony az újrarajzolást illetően. A képernyő azon
részei frissülnek, melyeknek feltétlenül szükségesek. A Vimnek azonban nincsen
tudomása a külső programok által okozott esetleges hibákról. A képernyő
újrarajzolása: >

	CTRL-L

==============================================================================

Következő fejezet: |usr_11.txt|  Helyreállítás

Jogi információk: lásd |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:

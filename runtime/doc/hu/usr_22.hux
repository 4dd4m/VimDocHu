*usr_22.txt*	Vim Verzió 8.2.	Utolsó módosítás: 2020 Mar 28

		  Bram Moolenaar: Vim felhasználói kézikönyv

			       Fájlok keresése


A fájlok mindenhol ott vannak. Szóval hogyan találjuk őket meg? A
könyvtárszerkezet böngészésére több módszer is létezik. Akár közvetlenül
fájlból fájlba, szimplán fájlnév alapján, a előzményeket pedig bízd a Vimre.

|22.1|	A fájlböngésző
|22.2|	Aktív könyvtár
|22.3|	Fájlok keresése
|22.4|	A bufferlista

Következő fejezet: |usr_23.txt|  Egyéb fájlok szerkesztése
    Előző fejezet: |usr_21.txt|  Visszatérés adott pontra
  Tartalomjegyzék: |usr_toc.txt|

==============================================================================
*22.1*	A fájlböngésző

A Vimben van beépített fájlböngésző. Próbáld ki: >

	:edit .

Vim szkriptek és autocommandok sokasága stabilan végzi a munkáját, egy
csapással a fájlkezelőben találhatjuk magunkat. Így néz ki:

" ============================================================================ ~
" Netrw Directory Listing                                        (netrw v109) ~
"   Sorted by      name ~
"   Sort sequence: [\/]$,\.h$,\.c$,\.cpp$,*,\.info$,\.swp$,\.o$\.obj$,\.bak$ ~
"   Quick Help: <F1>:help  -:go up dir  D:delete  R:rename  s:sort-by  x:exec ~
" ============================================================================ ~
../ ~
./ ~
check/ ~
Makefile ~
autocmd.txt ~
change.txt ~
eval.txt~ ~
filetype.txt~ ~
help.txt.info ~

Az ábrán látható elemek:

    1.  A fájlböngésző neve, verziószáma
    2.  A könyvtár neve
    3.  A rendezés metódusa (név, idő, méret)
    4.  Nevek rendezése (könyvtárak előre, majd *.h fájlok,
	*.c fájlok, stb.)
    5.  Kézikönyv (<F1> billentyű), és egy rövidített lista az
	elérhető parancsokról
    6.  A fájlok listája, beleértve "../", mely egy könyvtárral
	feljebb vált

Ha a szintaxis kiemelés engedélyezve van, akkor a részek szépen elkülönülnek
egymástól.

A listát a Normal módú parancsokkal járhatod be. Például, vidd a kurzort a
legfelső fájlra és üss <Enter>-t; és már szerkeszted is  a fájlt. A böngészőt
az ":edit ." paranccsal újból visszahozhatod (vagy az :Explore paranccsal,
esetleg CTRL-O). A művelet a szerkesztett fájlt az előző fájlként fogja 
kezelni, melynek megnyitása CTRL-^. 

Próbálj megnyitni egy könyvtárat az <Enter> billentyűvel. A fájlböngésző
megnyitja a kijelölt könyvtárat és listázza a tartalmát. Ha a legeslegfelső
"../" soron ütjük az <Enter> billentyűt, akkor visszaléphetünk a szülő
könyvtárba (azaz egy szinttel feljebb). A "-" ugyanezt a funkciót látja el,
anélkül, hogy a lista tetejére kellene navigálnunk.

Most üss <F1> billentyűt a kézikönyvhöz, hogy lásd, mire képes a netrw
beépülő. Ezt kell látnod:
 >
  

9. Fájlböngésző	 netrw-browse   netrw-dir   netrw-list   netrw-help

MAPPEK								netrw-maps
     <F1>........Segítség.......................................|netrw-help|
     <cr>........Böngészés......................................|netrw-cr|
     <del>.......Fájlok és könyvtárak törlése...................|netrw-delete|
     -...........Váltás fel.....................................|netrw--|
     a...........Fájlok és könyvtárak elrejtése.................|netrw-a|
     mb..........Könyvtárak könyvjelzőzése......................|netrw-mb|
     gb..........Könyvjelzőhöz lépés............................|netrw-gb|
     cd..........Könyvtár aktív könyvtárként....................|netrw-c|
     d...........Új könyvtár létrehozása........................|netrw-d|
     D...........Fájlok és könyvtárak törlése...................|netrw-D|
     <c-h>.......Fájlok és könyvtárak elrejtésének módja........|netrw-ctrl-h|
     i...........Megjelenítési mód váltása......................|netrw-i|
     <c-l>.......Lista frissítése...............................|netrw-ctrl-l|
     o...........Böngészés horizontális splitben................|netrw-o|
     p...........A Betekintési ablak............................|netrw-p|
     P...........Szerkesztés az előző ablakban..................|netrw-p|
     q...........Könyvjelzők és history listázása...............|netrw-qb|
     r...........Fordított sorrend..............................|netrw-r|
    	(stb)

Az <F1> billentyű listázza a beépülő dokumentációját, mely a megszokott help
fájlok formáját követi. |CTRL-]| billentyűvel ugorhatunk a jelölt elemekre,
|CTRL-O|-val pedig vissza.

Fájlok szerkesztése, vagy megjelenítése: (kurzor az adott fájlnéven)

	  <Enter>	Fájl megnyitása (aktív ablakban)	   |netrw-cr|
	    o		Szerkesztés horizontális splitben	   |netrw-o|
	    v		Szerkesztés vertikális splitben		   |netrw-v|
	    p		Betekintés a fájlba (|preview-window|)	   |netrw-p|
	    P		Szerkesztés az előző ablakban		   |netrw-P|
	    t		Fájl megnyitása új fülön		   |netrw-t|

Az alábbi Normal módú parancsokkal az ablak megjelenítési beállításit
változtathatjuk meg:

	i		A lista stílusa (vékony, hosszú, széles és fa)
			A hosszú tartalmazza a méretet és a dátumot
	s		Rendezés megváltoztatása (név, módosítás, méret)
	r		Fordított sorrend

Még több Normal módú parancs:

	cd		A Vim aktív könyvtárának megváltoztatása (a
			fájlböngésző aktuális elérési útjára). A
			|g:netrw_keepdir| befolyással lehet a működésre.
	R		Fájl átnevezése
	D		Könyvtár vagy fájl törlése (megerősítő üzenettel)
	mb gb		mb: könyvjelző létrehozás, gb: könyvjelzőhöz ugrás


Egyéb normál módú parancsok:

	:Explore [directory]	[directory] Könyvtár listázása
	:NetrwSettings		Egy teljes lista a Netrwt érintő beállításokról,
				a vonatkozó dokumentáció linkjeivel
				
A netrwt nem csak a helyi fájlok szerkesztéséhez használhatod; távoli címek
kezelésére is képes:	(a cím végén lévő / karakter fontos)

	:Explore ftp://somehost/path/to/dir/
	:e scp://somehost/path/to/dir/

Lásd: |netrw-browse|.

==============================================================================
*22.2*	Aktív könyvtár

Mint azt a shell esetén már megszokhattuk, a Vimben is létezik az aktív
könyvtár fogalma.  Tegyük fel, hogy a könyvtáradban vagy szerkesztened kell
"VeryLongFileName" könyvtárban bizonyos fájlokat. Csinálhatod így:

	:edit VeryLongFileName/file1.txt
	:edit VeryLongFileName/file2.txt
	:edit VeryLongFileName/file3.txt

Ha nem szeretnél sokat gépelni, akkor viszont így: >

	:cd VeryLongFileName	 vagy	    :Very<Tab><Enter>
	:edit file1.txt			    :argadd file*<Tab><Enter>
	:edit file2.txt
	:edit file3.txt

A ":cd" parancs átváltja az aktív könyvtárat, melyről meggyőződhetsz az
alábbiképpen: >

	:pwd
	/home/Bram/VeryLongFileName

A Vim tudja, hogy honnan érkeztél, ezért bármikor kiadhatod a "cd -"
parancsot, amely egy könyvtárral feljebb fog váltani. Például: >

	:pwd
	/home/Bram/VeryLongFileName
	:cd /etc
	:pwd
	/etc
	:cd -
	:pwd
	/home/Bram/VeryLongFileName
	:cd -
	:pwd
	/etc


AZ ABLAK LOKÁLIS KÖNYVTÁRA

Splitelés után mindkét ablak ugyanarra a könyvtárra fog mutatni. Lokális
könyvtárra kell váltanod (mely csak az adott ablakra vonatkozik), ha egy másik
könyvtárban szeretnél fájlokat szerkeszteni anélkül, hogy az inaktív
ablakaidnak az aktív könyvtára megváltozzon. >

	:pwd
	/home/Bram/VeryLongFileName
	:split
	:lcd /etc
	:pwd
	/etc
	CTRL-W w
	:pwd
	/home/Bram/VeryLongFileName

Amíg az `:lcd` parancsot használod, a többi ablak könyvtára nem fog
megváltozni, ha bármelyik ablakban kiadod a `:cd` parancsot, az hatással
lesz az összes ablakra (kivéve azokat az ablakokat, melyekben kiadtuk az `:lcd`
parancsot.
   Ha abban az ablakban, amely előzőleg rendelkezett lokális könyvtárral,
kiadjuk a `:cd` parancsot, akkor az aktív könyvtár átvált globálisra, és frissíti
a többi ablak könyvtárát is


FÜLEK LOKÁLIS KÖNYVTÁRA

Ha új fület nyitsz, akkor az aktív könyvár öröklődik a szülő ablaktól. A fülek
lokális könyvtárát a `:tcd` paranccsal határozhatjuk meg. Az adott fül alatt
elhelyezkedő ablakok öröklik a fül könyvtárát, kivéve azokat az ablakokat,
melyek már rendelkeznek lokális könyvtárral. Az újonnan nyíló ablakok
természetesen a fül könyvtárát öröklik. A füleken végzett `:cd` parancs nem
hajt végre könyvtárváltást azokon a füleken, melyek már rendelkeznek `:tcd`
könyvtárral. Ha a fül globális munkakönyvtárát megváltoztatjuk a `:cd` paranccsal, 
az hatással lesz az összes fülre.

==============================================================================
*22.3*	Fájlok keresése

Egy C program forráskódját szerkeszted:

	#include "inits.h" ~

Szeretnéd látni, hogy mi van az "inits.h" fájlban. Vidd rá a kurzort és
gépelj: >

	gf

A Vim megkeresi a fájlt, és megnyitja.
   Mi történik akkor, ha a fájl nem az aktív könyvtár része? Ebben az esetben
a 'path' opció bevonásával történik a keresés. Az opció számos könyvtárat
tartalmaz, melyben a Vim keres.
   Tegyük fel, hogy a beágyazott fájl itt található "c:/prog/include/". Ezt a
könyvtárat hozzá kell adnunk a 'path'-hoz: >

	:set path+=c:/prog/include

A könyvtár abszolút. Nem számít, hogy éppen hol vagy, ugyanarra mutat. Lehet
egy olyan fájlt beágyazni, mely a c:/prog/include/ alkönyvtáraiban van? Ebben
az esetben relatív elérést kell megadnunk, mely "." karakterrel kezdődik:
>
	:set path+=./proto

Ez arra utasítja a Vimet, hogy keressen a "proto" könyvtárban, annak a
könyvtárnak az alkönyvtáraiban, ahol a "gf" parancs megtalálta a fájlt. Ezért
a "gf" parancs az "inits.h" fájlon keresést végez a "proto/inits.h" elérési
úttal és a include könyvtárban is.
   A "./" nélkül a Vim kizárólag csak a "proto" könyvtárban keresne. És fájl
nem biztos, hogy az aktív könyvtár részét képezi.



A 'path' opcióval hozzáadhatjuk a kereséshez tartozó elérési utakat. Nézd meg
a 'path' opció dokumentációját. 
   Az 'isfname' opció segítségével határozzuk meg, hogy mely karaktereket
tekintjük a fájlnév részének (például a feljebb említett " karakter).

Ha tudod a fájl nevét, de nem találod sehol, akkor keresd meg ezzel a
paranccsal: >

	:find inits.h

A 'path' opcióban található elérési utakon elkezdődik a keresés. Ha van
találat, akkor ugyan az, mintha az ":edit" parancsot hívtuk volna meg. 

A fájlt új ablakban a CTRL-W f paranccsal nyithatod meg (a "gf" helyett), vagy
használd az ":sfind" (split find) parancsot a ":find" helyett:

A fájlszerkesztésnek elegáns módja, mely valahol a 'path'-ban van: >

	vim "+find stdio.h"

A parancs megkeresi a "stdio.h" fájlt a 'path'-ban és megnyitja szerkesztésre.
Az idézőjelek fontosak, mely jelzik, hogy ez csak egyetlen egy paraméter |-+c|.

==============================================================================
*22.4*	A bufferlista

Buffereknek hívjuk azt a memória területet, ahová a Vim beolvassa a fájl
tartalmát. A buffer szerkesztésekor mindig a fájl másolatával dolgozol.
Mentéskor a buffer tartalma a fájlba íródik, felülírva azt.  Tartalmuk
kiegészül jelölőkkel, beállításokkal és egyebekkel.


REJTETT BUFFEREK

Tegyük fel, hogy a "one.txt" fájl tartalmát szerkeszted, de emellett
szerkesztened kell "two.txt" fájlt is. Az egyik lehetőség az ":edit two.txt"
parancs, de mivel "one.txt" tartalma változott, ez nem fog menni. "one.txt"
változásai azonban még nem szeretnéd a lemezre írni. A Vimnek erre is van
megoldása: >

	:hide edit two.txt

A "one.txt"-t tartalmazó buffer eltűnik a képernyőről, de a Vim tudja, hogy a
későbbiekben szerkeszteni szeretnéd a buffert, ezért az ideiglenes
változtatásokat megtartja. "one.txt" buffere rejtetté vált (amely még mindig
ugyanabban a helyzetben van, ahogy hagytad, csak nem látod).
   A ":hide" hatására a program úgy viselkedik, mintha a 'hidden' opció be
lenne kapcsolva. Az opciót magad is beállíthatod. Az opcióval rejtetté válnak
azok a bufferek, melyekből kilépünk.
   Óvatosan! Ha a buffert mentés előtt rejted el, akkor a szerkesztő
bezárásakor a változtatások nem íródnak ki automatikusan, ezért erről neked
kell gondoskodnod.


INAKTÍV BUFFEREK

   Bufferek megnyitásakor a Vim néhány alapvető információjukat eltárolja. Ha
a buffer nincs megjelenítve az ablakban és nem is rejtett, még mindig
megtalálhatóak a bufferlistában. Ezeket nevezzük inaktív buffereknek.
Áttekintés:

   Aktív		Az ablakban megjelenik (rendelkezik tartalommal)
   Rejtett		Nem jelenik meg az ablakban (rendelkezik tartalommal)
   Inaktív		Nem jelenik meg az ablakban (nem rendelkezik
		        tartalommal)

A Vim jegyzi az inaktív buffereket, mivel információt tárol róluk (például a
jelölőkhöz hasonlóan). A fájlneveket is jegyzi, mely jól jöhet később, ha
ugyanazt a fájlt szeretnéd szerkeszteni.


BUFFEREK LISTÁZÁSA

A bufferek listáját így érheted el: >

	:buffers

Az alábbi parancs is ugyanezt csinálja, a neve utal rá, viszont gyorsabb
gépelni: >

	:ls

Példa a parancs kimenetére:

  1 #h   "help.txt"			line 62 ~
  2 %a + "usr_21.txt"			line 1 ~
  3      "usr_toc.txt"			line 1 ~

Az első oszlopban a bufferazonosítót láthatjuk (1,2,3), így nem kell a teljes
fájlnevet beírnunk.
   Az azonosítók után a bufferek állapotára utaló flageket találhatunk, melyek
után a fájlnév, valamint a kurzor utolsó pozíciója található.

Flagek és jelentésük:

	u	Nem listázott buffer |unlisted-buffer|.
	 %	Aktív buffer.
	 #	Előző buffer.
	  a	Az ablakban megjelenített buffer.
	  h	Rejtett buffer.
	   =	A buffer csak olvasható.
	   -	A buffer tartalma nem módosítható, a 'modifiable' opció ki van
		kapcsolva.
	    +	A buffer tartalma megváltozott.


BUFFEREK SZERKESZTÉSE

A buffereket az azonosítójukat beírva szerkesztheted, így elkerülhető a
fájlnevek teljes begépelése: >

	:buffer 2

Ehhez először meg kell jeleníteni a bufferlistát. Argumentumként átadhatjuk a
fájlnév egy részét is, így nem kell megjeleníteni a bufferlistát minden
alkalommal: >

	:buffer help

A Vim kiválasztja az argumentumra legjobban illeszkedő fájlt. Egy találat
esetén automatikusan kiválasztja a kívánt buffert (a fenti példa esetében a
"help.txt" a legjobb egyezés.
   A buffer megnyitása új ablakban: >

	:sbuffer 3

Ez fájlnevekkel is működik.


A BUFFERLISTA HASZNÁLATA

A bufferlistában az alábbi parancsokkal navigálhatsz:

	:bnext		következő buffer
	:bprevious	előző buffer
	:bfirst		első buffer
	:blast		utolsó buffer

Elem eltávolítása a bufferlistából: >

	:bdelete 3

Mint azt már megszokhattuk, ez fájlnevekkel is tökéletes működik.
   Ha a bufferlistából egy aktív buffert törölsz (amely éppen meg van
jelenítve valamelyik ablakban), akkor az bezáródik. Ha az éppen szerkesztés
alatt álló buffert törlöd, akkor az ablaka bezáródik. Ha az utolsó ablakhoz
tartozó buffert is bezártad, akkor a Vim másik buffer után néz. A semmit nem
lehet szerkeszteni!

	Megjegyzés:
	A bufferek még törlésük után is (":bdelete") meg vannak jegyezve.
	Gyakorlatilag "nem listázott" státuszt kapnak, így nem fognak a
	":buffers" alatt kilistázódni. A ":buffers!" parancs viszont
	kilistázza a nem listázott buffereket is (igen, a Vim számára nem
	létezik lehetetlen). Ha abszolút el szeretnél felejteni egy buffert,
	akkor a ":bwipe" paranccsal ezt megteheted. További információ:
	'buflisted' opcióban.

==============================================================================

Következő fejezet: |usr_23.txt|  Egyéb fájlok szerkesztése

Jogi információk: lásd |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:

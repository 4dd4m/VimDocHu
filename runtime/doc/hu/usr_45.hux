*usr_45.txt*	For Vim version 8.2.  Last change: 2020 Jun 11

		  Bram Moolenaar: Vim felhasználói kézikönyv

				Nyelvválasztás


A Vim üzenetei számos nyelven elérhetőek. Ebben a fejezetben arról lesz szó,
hogy ezt hogyan változtathatjuk meg, valamint hogy ezt hogyan építsük be a
munkafolyamatainkba.

|45.1|	Az üzenetek nyelve
|45.2|	A menük nyelve
|45.3|	Más karakterkódolás használata
|45.4|	Szerkesztés más karakterkódolással
|45.5|	Nyelvi szövegek bevitele

Következő fejezet: |usr_46.txt|  Beépülők készítése Vim9 szkripttel
    Előző fejezet: |usr_44.txt|  Egyedi Szintaxis kiemelés
  Tartalomjegyzék: |usr_toc.txt|

==============================================================================
*45.1*	Az üzenetek nyelve

A Vim indításkor megvizsgálja a környezetet és eldönti, hogy milyen nyelvet
alkalmazzon. A legtöbb esetben helyesen tippel az üzeneteket a saját nyelveden
olvashatod (ha léteznek). A jelenlegi betöltött nyelv megjelenítése: >

	:language

Ha a kimenet "C", akkor az alapértelmezett nyelv van használatban, ami Angol.

	Megjegyzés:
	A nyelvi beállítások csak akkor működnek, ha a Vimet úgy fordították,
	hogy erre képes legyen. Ezt a ":version" paranccsal tudjuk
	ellenőrizni, melyben a "+gettext" és a "+multi_lang" modulokat kell
	keresni. Ha ezt látod, akkor minden rendben. Ha a modulok listájában
	"-gettext" vagy "-multi_lang" modulokat látod, akkor másik Vimet kell
	keresned.

Mit kell tennünk, hogy az üzenetek nyelvét megváltoztassuk? Ezt többféle
képpen is el lehet érni, melynek módja a rendszered képességeitől függ.
   Az első módszer a környezeti változó beállítása a kívánt nyelvre (a Vim
indítása előtt). Unixon: >

	env LANG=de_DE.ISO_8859-1  vim

Ez csak akkor működik ha kívánt nyelv elérhető a rendszeren. Ennek előnye,
hogy a rendszer GUI-ja és üzenetei a jó nyelven jelennek meg. A hátránya, hogy
ez a Vim indítása előtt kell elvégezni. Ha a Vim már fut, akkor ezt a verziót
tudjuk alkalmazni: >

	:language hu_HU.UTF-8

Próbáljuk ki az általunk választott nyelvvel. Ha hibaüzenetet kapunk (és helyen
írtuk be), akkor az adott nyelv nem érhető el a rendszerünkön. Nem kapunk
hibaüzenetet, ha a lefordított üzenetek nem elérhetőek. A Vim egyszerűen csak
visszavált Angol nyelvre.
   Hogy kiderítsük, mely nyelvek vannak telepítve a rendszerükre, navigáljunk
abba a könyvtárba, hol fel vannak sorolva. Általában a "/usr/share/locale"
könyvtárban. A "setlocale" man oldalának említést kell tennie arról, hogy
találjuk ezeket a fájlokat.
   Legyünk óvatosak, a megfelelő nevet írjuk be. Számítanak a kis- és
nagybetűk, a '-' és a '_' karakterek is.

Az üzenetek, a szerkesztett szöveget és az időformátumot is be tudjuk
állítani. Lásd: |:language|.


CSINÁLD MAGAD FORDÍTÁS

Ha az üzeneteket még senki sem fordította le, akkor ezt magunk is
elvégezhetjük. Ehhez töltsük le a Vim forráskódját és a GNU gettext csomagját.
A forráskód kicsomagolás után, az instrukciókat az src/po/README.txt fájlban
találjuk.
   Nem nehéz lefordítani. Nem kell programozónak lenni hozzá. Elég ha Angolul
tudunk, illetve arra a nyelvre amire fordítunk természetesen. 
   Ha elégedett vagy a fordítással, akkor tedd elérhetővé mások számára is.
Töltsd fel ide: vim-online (http://vim.sf.net) vagy e-mailben küld el a Vim
karbantartója számára. Esetleg mindkettő.

==============================================================================
*45.2*	A menük nyelve

Az alapértelmezett menü Angol. Használatukhoz le kell először fordítani őket
(a fordítás már elérhető). A környezeti változók beállításával az üzenetek
nyelve is változik, ezért nem kell tennünk semmi extrát, de csak akkor
működik, ha a fordítás elérhető.
   Tegyük fel, hogy Németországban vagyunk, német nyelvvel, de inkább a
"File"-t használnánk "Datei" helyett. Az Angol nyelvre így tudunk visszaállni:
>
	:set langmenu=none

Meghatározhatunk egyből másik nyelvet is: >

	:set langmenu=nl_NL.ISO_8859-1

Mint a fenti példában, a "-" és "_" közötti különbség számít, bár itt a kis-
és nagybetű nem.
   A 'langmenu' opciót a menük betöltése előtt be kell állítani. Ha már a menü
betöltődött, akkor a 'langmenu' beállításának nem lesz semmilyen hatása. Ezért
a parancsot jobb a vimrcben tartani.
   Ha ragaszkodunk a futásidejű cseréhez, akkor ezzel rá tudjuk bírni a
szerkesztőt: >

	:source $VIMRUNTIME/delmenu.vim
	:set langmenu=de_DE.ISO_8859-1
	:source $VIMRUNTIME/menu.vim

Ennek egy hátránya van: Az összes egyedileg készített menü el fog tűnni (ezért
újra kell definiálni őket).


CSINÁLD MAGAD FORDÍTÁS (MENÜK)

Listázzuk az alábbi könyvtárat a menü fordítások megtekintéséhez:

	$VIMRUNTIME/lang ~

A fájlt menu{language}.vim-nek hívják. Ha nem látjuk a fájlt a kívánt nyelven,
akkor le kell fordítunk. A legegyszerűbb módja, hogy lemásolunk egy fájlt és
azt szerkesztjük.
   Először listázzuk ki a jelenlegi nyelvet a ":language" paranccsal, majd
másoljuk a fájlt a 'runtime' változóban található elérési utak egyikébe.
Valahová az elejére. Például, Unixon: >

    :!cp $VIMRUNTIME/lang/menu_ko_kr.euckr.vim ~/.vim/lang/menu_nl_be.iso_8859-1.vim

A fordításhoz tippek it: "$VIMRUNTIME/lang/README.txt".

==============================================================================
*45.3*	Más kódolás használata

A Vim kitalálja szerkesztett fájl karakterkódolását. Európai nyelvek esetén
általában ez "latin1".  Minden byte egy karakter. Ez azt jelenti, hogy 256
különböző karakterünk lehet. Az ázsiai nyelvekhez ez nem elegendő. Ezek a
fájlok általában dupla-kódolást használnak, elérhetővé téve több mint tízezer
karaktert. Itt jön képbe a Unicode. Arra lett tervezve, hogy tartalmazza a
gyakori nyelvek karaktereit. Ez a "joker", mely mindent visz, de nem annyira
elterjedt.
   Szerencsére a Vim támogatja mindhárom karakterkódolást. És, limitációkkal
ugyan, de használhatjuk őket még akkor is, ha a rendszerünk nem támogatja. 
   Ha a saját nyelvünkön szerkesztjük a fájlokat, akkor ezekre semmi szükség,
így nincs teendő. A továbbiak csak akkor relevánsak, ha több nyelven is
szerkesztünk.


UNICODE HASZNÁLATA A GUIBAN

Az Unicode legszebb tulajdonsága, hogy veszteségmentesen tudjuk konvertálni
a szöveget (oda és vissza). Ha a Vimet Unicode kódolásra állítjuk be, akkor az
összes karakterkódolással készült fájlt tudjuk szerkeszteni. 
   Sajnos a Unicodeot támogató rendszerek száma igen csekély. Ezért nem
valószínű, hogy egy adott nyelv azt használhatja. Ha Unicodeot akarunk
használni, akkor azt először be kell állítani.
   Kezdjük a Vim GUI üzemmódjával, ami képes a Unicode karakterkódolás
   megjelenítésére. Ennek működnie kell: >

	:set encoding=utf-8
	:set guifont=-misc-fixed-medium-r-normal--18-120-100-100-c-90-iso10646-1

Az 'encoding' opció leírja a használandó karakterkódolást. Ez lesz érvényben a
bufferekben lévő szövegre, regiszterekre, Vim szkript fájlokra stb.
Felfoghatjuk az 'encoding' opciót a Vim belső kódolásának.
   A példa feltételezi, hogy a megfelelő betűtípus rendelkezésre áll a
rendszerünkön. A példában szereplő név az X ablakkezelő rendszerhez íródott. A
font csomag az xterm Unicode támogatását hivatott fejleszteni. Ha nincs
telepítve a betűtípus, akkor innen tölthetjük le:

	http://www.cl.cam.ac.uk/~mgk25/download/ucs-fonts.tar.gz ~

MS-Windows rendszeren, egyes betűtípusoknak korlátozott számú Unicode
karakterekből állnak. Próbáljuk ki a "Courier New" betűtípust. Válasszunk az
"Edit, Select Font..." menü és keressünk számunkra megfelelőt. A Fix
szélességű betűtípusokat részesítsük előnyben. Például:   >

	:set guifont=courier_new:h12

Ha nem találtunk megfelelőt, akkor töltsünk le egyet. Ha a Microsoft nem
helyezte át őket, itt elérhetjük:

	http://www.microsoft.com/typography/fonts/default.aspx ~

Így a Vim belső Unicode karakterkódolást fog használni, a szöveget pedig
Unicode betűtípussal jeleníti meg. A begépelt karakterek a nyelvi
beállításaink határozzák meg, melyet át kell állítanunk Unicodera. Azt, hogy
melyiket konvertálja a 'termencoding' opció határozza meg: >

	:let &termencoding = &encoding
	:set encoding=utf-8

A parancs hozzárendeli az 'encoding' régi értékét a 'termencoding'-hoz,
mielőtt az 'encoding'-ot utf-8-ra állítaná. Ezt azonban ki kell próbálnunk,
hogy tényleg működik-e a rendszerünkön. Működnie kell, ha beviteli nyelvként
Ázsiai nyelvet használunk és Unicode szöveget szerkesztünk.


UNICODE HASZNÁLATA UNICODE TERMINÁLBAN

Egyes terminálok natívan támogatják a Unicode használatát. A sztenderd
xtermben található XFree86 is ilyen. Használjuk ezt  példához. 
   Először is, az xterm Unicode támogatással kell lefordítani. Lásd a
|UTF8-xterm| fejezetet a fordítással kapcsolatban.
   Indítsuk el az xtermet az "-u8" argumentummal. Valószínűleg egy betűtípust
is meg kell határoznunk.: >

   xterm -u8 -fn -misc-fixed-medium-r-normal--18-120-100-100-c-90-iso10646-1

Így a Vim a terminálban futtathatóvá válik. Állítsuk az 'encoding' opciót
"utf-8"-ra. Ennyi.


UNICODE HASZNÁLATA HAGYOMÁNYOS TERMINÁLBAN

Tételezzük fel hogy  Unicode fájlokkal szeretnénk dolgozni, de a terminálunk
ezt nem támogatja. A Vimben tovább dolgozhatunk, a terminálunk ugyan a Unicode
karaktereket nem fogja megjeleníteni, azonban ugyanúgy dolgozhatunk velük. >

	:let &termencoding = &encoding
	:set encoding=utf-8

Ez ugyanaz, mint amit a GUI-nál használtunk. Másképpen működik: A Vim
átalakítja a karaktereket, mielőtt azt a terminálnak elküldené, így
megjelenítés egységesebb lesz.
   Ez csak akkor működik, ha lehetővé tesszük a 'termencoding' és az
'encoding' közötti konverziót. A latin1 kódolást a szerkesztő Unicodera
alakítja, mely mindig működik. Egyéb konverziókhoz szükségünk lehet az |+iconv|
modulra.
   Próbáljunk egy olyan fájl szerkeszteni, amelyben Unicode karakterek vannak.
A Vim kérdőjelet tesz (vagy aláhúz) olyan karakterekhez, melyeket a terminál
nem képes megjeleníteni. Vigyük a kurzort a kérdőjelre és adjuk ki a
parancsot: >

	ga

Erre a szerkesztő kiírja a karakter kódját, melyet megnézhetünk a Unicode
táblázatban. Maradhatunk ennél a módszernél és olvashatjuk a fájlt így is, ha
sok időnk van.

	Megjegyzés:
	Mivel az 'encoding' opció beállítását használja a Vim, változtatása az
	összes nem-ASCII szöveget érvénytelenné teszi. Ezt a regiszterek
	használatakor vehetjük észre és a 'viminfo' fájlban. (például egy
	megjegyzett keresési minta esetén). Állítsuk be az 'encoding' opciót a
	vimrc fájlban és nyúljunk hozzá.

==============================================================================
*45.4*	Szerkesztés más karakterkódolással

Tegyük fel, hogy Vimet a Unicode kódolásra készítettük fel és most egy 16
bites Unicode fájl szeretnénk szerkeszteni. Egyszerűnek hangzik, ugye? Nos, a
Vim utf-8 bites kódolást használ, ezért 16 bites kódolást konvertálnunk kell,
mivel különbség van a Unicode és utf-8 (vagy utf-16 között).
   A szerkesztő megpróbálja kitalálni, hogy milyen fájllal dolgozunk, melyhez
a 'fileencodings' opcióban található neveket használja. Ha Unicodeot
használunk, akkor az alapértelmezett érték: "ucs-bom,utf-8,latin1". Ez azt
jelenti, hogy a Vim az alábbiakat vizsgálja meg:

	ucs-bom		A fájlnak Byte Order Mark-al (BOM) kell kezdődnie, 
			mely felismerhetővé teszi a 16 bites, 32 bites és az
			utf-8 Unicode kódolást.
	utf-8		utf-8 Unicode.  Visszautasítva, ha bájtszekvencia
			hibás az utf-8-ban.
	latin1		A régi öreg 8-bit kódolás.  Mindig működik.

16 bites Unicode fájl szerkesztése esetén, ha az rendelkezik BOMmal, a Vim
átkonvertálja azt utf-8-re, mielőtt beolvasná. A 'fileencoding' opció (a végén
nincs s), a felismert értékre változik. Ebben az esetben ez "utf-16le". Azaz
Unicode, 16-bit, little-endian, ami egy gyakori fájlformátum MS-Windows
rendszeren (például registry fájloknál).
   Fájl írásakor, a Vim összehasonlítja a 'fileencoding' opciót az
'encoding'-al. Ha különböznek, akkor a szöveg konvertáláson esik át. 
   Nem történik konvertálás, ha a 'fileencoding' opciónak nincs értéke. 
A szöveg feltételezhetően az 'encoding' opcióban foglaltak szerint
konvertálódik.

Ha a 'fileencodings' értéke számunkra nem megfelelő, akkor kipróbálhatjuk egy
másik értékkel. Érvénytelen érték esetén a szerkesztő a következő értékkel
próbálkozik. Ne tegyük a "latin1" kódolást a lista elejére, hiszen az mindig
érvényes. Például, az alábbi paranccsal visszaállunk Japán kódolásra, ha a
fájl nem tartalmaz BOM-ot és nem utf-8:

	:set fileencodings=ucs-bom,utf-8,sjis

Az |encoding-values|-ban találhatunk további ötleteket. Egyéb érékek is
működhetnek, de ez rendszerfüggő.


KÓDOLÁS KÉNYSZERÍTÉSE

Ha az automatikus felismerés nem működik, akkor azt be kell állítanunk
manuálisan. Például:   >

	:edit ++enc=koi8-r russian.txt

Az "++enc" rész csak az aktív fájl karakterkódolását határozza meg. A
fájlt a szerkesztő átkódolja a megadott kódolásról (itt Oroszra)
'encoding'-ra. A 'fileencoding' szintén a meghatározott kódolás értékét veszi
fel, így az átalakítás (vissza irányban) megoldhatóvá válik a fájl mentésekor.
   Íráshoz is használhatjuk az argumentumot. Ebben az esetben a Vim
konvertálja a fájlt. Például:   >

	:write ++enc=utf-8 russian.txt
<
	Megjegyzés:
	A konvertálás veszteséges lehet. Unicodera történő konvertálás
	általában veszteségmentesen megy végbe (kivéve az érvénytelen
	karaktereket). Ha Unicoderól szeretnénk konvertálni, akkor az
	általában veszteséges, ha a fájlban több mint egy nyelvű szöveget
	tartalmaz.

==============================================================================
*45.5*	Nyelvi szövegek bevitele

A billentyűzetünk karakterkészlete véges. Léteznek nyelvek, amelyek több ezer
karakterből állnak, Unicode több, mint száz ezret. Hogyan írhatjuk be ezen
karaktereket?
   Először is, ha nem használunk ennyi karaktert, akkor a digrammák jó
alternatívát jelenthetnek. Ezeket elmagyaráztuk a |24.9| fejezetben.
   Ha olyan nyelvet használunk, ami a billentyűink számától több karakterből
áll, akkor beviteli módot kell használnunk (IM). Ehhez meg kell nézzük, hogy
a fizikailag gépelt karakterek, milyen karaktereket eredményezzenek. Ebben a
helyzetben valószínűleg már egyébként is létezik a rendszerünkön beviteli
mód. Ennek egyébként működni kell más "Vim szerű" programok esetében is. A
részletekhez lásd |mbyte-XIM| az X ablakkezelőhöz és |mbyte-IME| Windowshoz.


KEYMAPPEK

Egyes nyelvek bár eltérnek a latintól, de körülbelül ugyanannyi karakterből
állnak, ezért lehetőségünk van a billentyűket karakterekhez rendelni. A Vim
erre a célra keymappet használ.
   Tételezzük fel, hogy Magyarul szeretnél gépelni. A keymappet így töltheted
be: >

	:set keymap=magyar

A Vim megkeresi a megfelelő keymappet számunkra, mely függ az 'encoding'
értékétől. Ha a fájl nem található, hibaüzenetet kapunk.
Most már gépelhetünk héberül Insert módban. Normál módban és a ":" kiadása
után a Vim automatikusan visszavált Angol nyelvre. Ezt manuálisan is
megtehetjük, ha szeretnénk: >

	CTRL-^

A parancs csak Normál és Command-line módban működik. Normal módban teljes
mást csinál (visszaugrik az előző fájlhoz).
   Ha a 'showmode' be van állítva, akkor a mód neve mellett megjelenik az
aktív keymap. GUI módban a kurzor színével teszünk különbséget a keymappek
között.
   A keymap beállításai tovább finomíthatjuk az 'iminsert' és az 'imsearch'
opciókkal.

Az aktív keymapból származó összes map listája: >

	:lmap

A rendszeren lévő összes keymappet listázása (GUI módban az Edit/Keymap
menü): >

	:echo globpath(&rtp, "keymap/*.vim")


CSINÁLD MAGAD KEYMAPPEK

Akár saját magunk számára is létrehozhatunk keymap fájlt. Nem bonyolult.
Kezdjük egy olyan keymap fájllal, ami hasonló a mi elvárásainkhoz. Másoljuk le
a fájlt a "keymap" könyvtárunkba (ami a 'runtimepath' része). Például, Unixon:
"~/.vim/keymap".
   A fájlt így kell elneveznünk:

	keymap/{name}.vim ~
vagy
	keymap/{name}_{encoding}.vim ~

{name} a keymap neve. A neve tükrözze a fájl célját, de ne egyezzen meg a már
létező fájlokkal (hacsak nem le szeretnénk cserélni egy már meglévő fájlt). A
{name} rész nem tartalmazhat "_" jelet. Opcionálisan megadhatjuk a
karakterkódolást a "_" jel után. Például:  

	keymap/magyar.vim ~
	keymap/magyar_utf-8.vim ~

A fájlt tartalmának egyértelműnek kell lennie. A Vim rengeteg keymap fájllal
érkezik, ez remek lehetőség a vizsgálatukra. Bővebben: |mbyte-keymap|.


VÉGSŐ MEGOLDÁS

Ha eddig minden csődöt mondott, akkor az alábbi módszer segítségével bármilyen
karaktert be tudunk vinni:

	kódolás    típus		tartomány ~
	8-bit	   CTRL-V 123		decimális 0-255
	8-bit	   CTRL-V x a1		hexadecimális 00-ff
	16-bit     CTRL-V u 013b	hexadecimális 0000-ffff
	31-bit	   CTRL-V U 001303a4	hexadecimális 00000000-7fffffff

A szóközöket ne írjuk ki. Lásd: |i_CTRL-V_digit|.

==============================================================================

Következő fejezet: |usr_46.txt|  Vim9 beépülő írása

Jogi információk: lásd |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:

*usr_45.txt*	For Vim version 8.2.  Last change: 2020 Jun 11

		  Bram Moolenaar: Vim felhasználói kézikönyv

				Nyelvválasztás


A Vim üzenetei számos nyelven elérhetőek. Ebben a fejezetben arról lesz szó,
hogy ezt hogyan változtathatjuk meg, valamint hogy ezt hogyan építsük be a
munkafolyamatainkba.

|45.1|	Az üzenetek nyelve
|45.2|	A menük nyelve
|45.3|	Más karakterkódolás használata
|45.4|	Szerkesztés más karakterkódolással
|45.5|	Entering language text

Következő fejezet: |usr_46.txt|  Beépülők készítése Vim9 szkripttel
    Előző fejezet: |usr_44.txt|  Egyedi Szintaxis kiemelés
  Tartalomjegyzék: |usr_toc.txt|

==============================================================================
*45.1*	Az üzenetek nyelve

A Vim indításkor megvizsgálja a környezetet és eldönti, hogy milyen nyelvet
alkalmazzon. A legtöbb esetben helyesen tippel az üzeneteket a saját nyelveden
olvashatod (ha léteznek). A jelenlegi betöltött nyelv megjelenítése: >

	:language

Ha a kimenet "C", akkor az alapértelmezett nyelv van használatban, ami Angol.

	Megjegyzés:
	A nyelvi beállítások csak akkor működnek, ha a Vimet úgy fordították,
	hogy erre képes legyen. Ezt a ":version" paranccsal tudjuk
	ellenőrizni, melyben a "+gettext" és a "+multi_lang" modulokat kell
	keresni. Ha ezt látod, akkor minden rendben. Ha a modulok listájában
	"-gettext" vagy "-multi_lang" modulokat látod, akkor másik Vimet kell
	keresned.

Mit kell tennünk, hogy az üzenetek nyelvét megváltoztassuk? Ezt többféle
képpen is el lehet érni, melynek módja a rendszered képességeitől függ.
   Az első módszer a környezeti változó beállítása a kívánt nyelvre (a Vim
indítása előtt). Unixon: >

	env LANG=de_DE.ISO_8859-1  vim

Ez csak akkor működik ha kívánt nyelv elérhető a rendszeren. Ennek előnye,
hogy a rendszer GUI-ja és üzenetei a jó nyelven jelennek meg. A hátránya, hogy
ez a Vim indítása előtt kell elvégezni. Ha a Vim már fut, akkor ezt a verziót
tudjuk alkalmazni: >

	:language hu_HU.UTF-8

Próbáljuk ki az általunk választott nyelvvel. Ha hibaüzenetet kapunk (és helyen
írtuk be), akkor az adott nyelv nem érhető el a rendszerünkön. Nem kapunk
hibaüzenetet, ha a lefordított üzenetek nem elérhetőek. A Vim egyszerűen csak
visszavált Angol nyelvre.
   Hogy kiderítsük, mely nyelvek vannak telepítve a rendszerükre, navigáljunk
abba a könyvtárba, hol fel vannak sorolva. Általában a "/usr/share/locale"
könyvtárban. A "setlocale" man oldalának említést kell tennie arról, hogy
találjuk ezeket a fájlokat.
   Legyünk óvatosak, a megfelelő nevet írjuk be. Számítanak a kis- és
nagybetűk, a '-' és a '_' karakterek is.

Az üzenetek, a szerkesztett szöveget és az időformátumot is be tudjuk
állítani. Lásd: |:language|.


CSINÁLD MAGAD FORDÍTÁS

Ha az üzeneteket még senki sem fordította le, akkor ezt magunk is
elvégezhetjük. Ehhez töltsük le a Vim forráskódját és a GNU gettext csomagját.
A forráskód kicsomagolás után, az instrukciókat az src/po/README.txt fájlban
találjuk.
   Nem nehéz lefordítani. Nem kell programozónak lenni hozzá. Elég ha Angolul
tudunk, illetve arra a nyelvre amire fordítunk természetesen. 
   Ha elégedett vagy a fordítással, akkor tedd elérhetővé mások számára is.
Töltsd fel ide: vim-online (http://vim.sf.net) vagy e-mailben küld el a Vim
karbantartója számára. Esetleg mindkettő.

==============================================================================
*45.2*	A menük nyelve

Az alapértelmezett menü Angol. Használatukhoz le kell először fordítani őket
(a fordítás már elérhető). A környezeti változók beállításával az üzenetek
nyelve is változik, ezért nem kell tennünk semmi extrát, de csak akkor
működik, ha a fordítás elérhető.
   Tegyük fel, hogy Németországban vagyunk, német nyelvvel, de inkább a
"File"-t használnánk "Datei" helyett. Az Angol nyelvre így tudunk visszaállni:
>
	:set langmenu=none

Meghatározhatunk egyből másik nyelvet is: >

	:set langmenu=nl_NL.ISO_8859-1

Mint a fenti példában, a "-" és "_" közötti különbség számít, bár itt a kis-
és nagybetű nem.
   A 'langmenu' opciót a menük betöltése előtt be kell állítani. Ha már a menü
betöltődött, akkor a 'langmenu' beállításának nem lesz semmilyen hatása. Ezért
a parancsot jobb a vimrcben tartani.
   Ha ragaszkodunk a futásidejű cseréhez, akkor ezzel rá tudjuk bírni a
szerkesztőt: >

	:source $VIMRUNTIME/delmenu.vim
	:set langmenu=de_DE.ISO_8859-1
	:source $VIMRUNTIME/menu.vim

Ennek egy hátránya van: Az összes egyedileg készített menü el fog tűnni (ezért
újra kell definiálni őket).


CSINÁLD MAGAD FORDÍTÁS (MENÜK)

Listázzuk az alábbi könyvtárat a menü fordítások megtekintéséhez:

	$VIMRUNTIME/lang ~

A fájlt menu{language}.vim-nek hívják. Ha nem látjuk a fájlt a kívánt nyelven,
akkor le kell fordítunk. A legegyszerűbb módja, hogy lemásolunk egy fájlt és
azt szerkesztjük.
   Először listázzuk ki a jelenlegi nyelvet a ":language" paranccsal, majd
másoljuk a fájlt a 'runtime' változóban található elérési utak egyikébe.
Valahová az elejére. Például, Unixon: >

    :!cp $VIMRUNTIME/lang/menu_ko_kr.euckr.vim ~/.vim/lang/menu_nl_be.iso_8859-1.vim

A fordításhoz tippek it: "$VIMRUNTIME/lang/README.txt".

==============================================================================
*45.3*	Más kódolás használata

A Vim kitalálja szerkesztett fájl karakterkódolását. Európai nyelvek esetén
általában ez "latin1".  Minden byte egy karakter. Ez azt jelenti, hogy 256
különböző karakterünk lehet. Az ázsiai nyelvekhez ez nem elegendő. Ezek a
fájlok általában dupla-kódolást használnak, elérhetővé téve több mint tízezer
karaktert. Itt jön képbe a Unicode. Arra lett tervezve, hogy tartalmazza a
gyakori nyelvek karaktereit. Ez a "joker", mely mindent visz, de nem annyira
elterjedt.
   Szerencsére a Vim támogatja mindhárom karakterkódolást. És, limitációkkal
ugyan, de használhatjuk őket még akkor is, ha a rendszerünk nem támogatja. 
   Ha a saját nyelvünkön szerkesztjük a fájlokat, akkor ezekre semmi szükség,
így nincs teendő. A továbbiak csak akkor relevánsak, ha több nyelven is
szerkesztünk.


UNICODE HASZNÁLATA A GUIBAN

Az Unicode legszebb tulajdonsága, hogy veszteségmentesen tudjuk konvertálni
a szöveget (oda és vissza). Ha a Vimet Unicode kódolásra állítjuk be, akkor az
összes karakterkódolással készült fájlt tudjuk szerkeszteni. 
   Sajnos a Unicodeot támogató rendszerek száma igen csekély. Ezért nem
valószínű, hogy egy adott nyelv azt használhatja. Ha Unicodeot akarunk
használni, akkor azt először be kell állítani.
   Kezdjük a Vim GUI üzemmódjával, ami képes a Unicode karakterkódolás
   megjelenítésére. Ennek működnie kell: >

	:set encoding=utf-8
	:set guifont=-misc-fixed-medium-r-normal--18-120-100-100-c-90-iso10646-1

Az 'encoding' opció leírja a használandó karakterkódolást. Ez lesz érvényben a
bufferekben lévő szövegre, regiszterekre, Vim szkript fájlokra stb.
Felfoghatjuk az 'encoding' opciót a Vim belső kódolásának.
   A példa feltételezi, hogy a megfelelő betűtípus rendelkezésre áll a
rendszerünkön. A példában szereplő név az X ablakkezelő rendszerhez íródott. A
font csomag az xterm Unicode támogatását hivatott fejleszteni. Ha nincs
telepítve a betűtípus, akkor innen tölthetjük le:

	http://www.cl.cam.ac.uk/~mgk25/download/ucs-fonts.tar.gz ~

MS-Windows rendszeren, egyes betűtípusoknak korlátozott számú Unicode
karakterekből állnak. Próbáljuk ki a "Courier New" betűtípust. Válasszunk az
"Edit, Select Font..." menü és keressünk számunkra megfelelőt. A Fix
szélességű betűtípusokat részesítsük előnyben. Például:   >

	:set guifont=courier_new:h12

Ha nem találtunk megfelelőt, akkor töltsünk le egyet. Ha a Microsoft nem
helyezte át őket, itt elérhetjük:

	http://www.microsoft.com/typography/fonts/default.aspx ~

Now you have told Vim to use Unicode internally and display text with a
Unicode font.  Typed characters still arrive in the encoding of your original
language.  This requires converting them to Unicode.  Tell Vim the language
from which to convert with the 'termencoding' option.  You can do it like
this: >

	:let &termencoding = &encoding
	:set encoding=utf-8

This assigns the old value of 'encoding' to 'termencoding' before setting
'encoding' to utf-8.  You will have to try out if this really works for your
setup.  It should work especially well when using an input method for an Asian
language, and you want to edit Unicode text.


USING UNICODE IN A UNICODE TERMINAL

There are terminals that support Unicode directly.  The standard xterm that
comes with XFree86 is one of them.  Let's use that as an example.
   First of all, the xterm must have been compiled with Unicode support.  See
|UTF8-xterm| how to check that and how to compile it when needed.
   Start the xterm with the "-u8" argument.  You might also need so specify a
font.  Example: >

   xterm -u8 -fn -misc-fixed-medium-r-normal--18-120-100-100-c-90-iso10646-1

Now you can run Vim inside this terminal.  Set 'encoding' to "utf-8" as
before.  That's all.


USING UNICODE IN AN ORDINARY TERMINAL

Suppose you want to work with Unicode files, but don't have a terminal with
Unicode support.  You can do this with Vim, although characters that are not
supported by the terminal will not be displayed.  The layout of the text
will be preserved.  >

	:let &termencoding = &encoding
	:set encoding=utf-8

This is the same as what was used for the GUI.  But it works differently: Vim
will convert the displayed text before sending it to the terminal.  That
avoids that the display is messed up with strange characters.
   For this to work the conversion between 'termencoding' and 'encoding' must
be possible.  Vim will convert from latin1 to Unicode, thus that always works.
For other conversions the |+iconv| feature is required.
   Try editing a file with Unicode characters in it.  You will notice that Vim
will put a question mark (or underscore or some other character) in places
where a character should be that the terminal can't display.  Move the cursor
to a question mark and use this command: >

	ga

Vim will display a line with the code of the character.  This gives you a hint
about what character it is.  You can look it up in a Unicode table.  You could
actually view a file that way, if you have lots of time at hand.

	Note:
	Since 'encoding' is used for all text inside Vim, changing it makes
	all non-ASCII text invalid.  You will notice this when using registers
	and the 'viminfo' file (e.g., a remembered search pattern).  It's
	recommended to set 'encoding' in your vimrc file, and leave it alone.

==============================================================================
*45.4*	Editing files with a different encoding

Suppose you have setup Vim to use Unicode, and you want to edit a file that is
in 16-bit Unicode.  Sounds simple, right?  Well, Vim actually uses utf-8
encoding internally, thus the 16-bit encoding must be converted, since there
is a difference between the character set (Unicode) and the encoding (utf-8 or
16-bit).
   Vim will try to detect what kind of file you are editing.  It uses the
encoding names in the 'fileencodings' option.  When using Unicode, the default
value is: "ucs-bom,utf-8,latin1".  This means that Vim checks the file to see
if it's one of these encodings:

	ucs-bom		File must start with a Byte Order Mark (BOM).  This
			allows detection of 16-bit, 32-bit and utf-8 Unicode
			encodings.
	utf-8		utf-8 Unicode.  This is rejected when a sequence of
			bytes is illegal in utf-8.
	latin1		The good old 8-bit encoding.  Always works.

When you start editing that 16-bit Unicode file, and it has a BOM, Vim will
detect this and convert the file to utf-8 when reading it.  The 'fileencoding'
option (without s at the end) is set to the detected value.  In this case it
is "utf-16le".  That means it's Unicode, 16-bit and little-endian.  This
file format is common on MS-Windows (e.g., for registry files).
   When writing the file, Vim will compare 'fileencoding' with 'encoding'.  If
they are different, the text will be converted.
   An empty value for 'fileencoding' means that no conversion is to be done.
Thus the text is assumed to be encoded with 'encoding'.

If the default 'fileencodings' value is not good for you, set it to the
encodings you want Vim to try.  Only when a value is found to be invalid will
the next one be used.  Putting "latin1" first doesn't work, because it is
never illegal.  An example, to fall back to Japanese when the file doesn't
have a BOM and isn't utf-8: >

	:set fileencodings=ucs-bom,utf-8,sjis

See |encoding-values| for suggested values.  Other values may work as well.
This depends on the conversion available.


FORCING AN ENCODING

If the automatic detection doesn't work you must tell Vim what encoding the
file is.  Example: >

	:edit ++enc=koi8-r russian.txt

The "++enc" part specifies the name of the encoding to be used for this file
only.  Vim will convert the file from the specified encoding, Russian in this
example, to 'encoding'.  'fileencoding' will also be set to the specified
encoding, so that the reverse conversion can be done when writing the file.
   The same argument can be used when writing the file.  This way you can
actually use Vim to convert a file.  Example: >

	:write ++enc=utf-8 russian.txt
<
	Note:
	Conversion may result in lost characters.  Conversion from an encoding
	to Unicode and back is mostly free of this problem, unless there are
	illegal characters.  Conversion from Unicode to other encodings often
	loses information when there was more than one language in the file.

==============================================================================
*45.5*	Entering language text

Computer keyboards don't have much more than a hundred keys.  Some languages
have thousands of characters, Unicode has over hundred thousand.  So how do
you type these characters?
   First of all, when you don't use too many of the special characters, you
can use digraphs.  This was already explained in |24.9|.
   When you use a language that uses many more characters than keys on your
keyboard, you will want to use an Input Method (IM).  This requires learning
the translation from typed keys to resulting character.  When you need an IM
you probably already have one on your system.  It should work with Vim like
with other programs.  For details see |mbyte-XIM| for the X Window system and
|mbyte-IME| for MS-Windows.


KEYMAPS

For some languages the character set is different from latin, but uses a
similar number of characters.  It's possible to map keys to characters.  Vim
uses keymaps for this.
   Suppose you want to type Hebrew.  You can load the keymap like this: >

	:set keymap=hebrew

Vim will try to find a keymap file for you.  This depends on the value of
'encoding'.  If no matching file was found, you will get an error message.

Now you can type Hebrew in Insert mode.  In Normal mode, and when typing a ":"
command, Vim automatically switches to English.  You can use this command to
switch between Hebrew and English: >

	CTRL-^

This only works in Insert mode and Command-line mode.  In Normal mode it does
something completely different (jumps to alternate file).
   The usage of the keymap is indicated in the mode message, if you have the
'showmode' option set.  In the GUI Vim will indicate the usage of keymaps with
a different cursor color.
   You can also change the usage of the keymap with the 'iminsert' and
'imsearch' options.

To see the list of mappings, use this command: >

	:lmap

To find out which keymap files are available, in the GUI you can use the
Edit/Keymap menu.  Otherwise you can use this command: >

	:echo globpath(&rtp, "keymap/*.vim")


DO-IT-YOURSELF KEYMAPS

You can create your own keymap file.  It's not very difficult.  Start with
a keymap file that is similar to the language you want to use.  Copy it to the
"keymap" directory in your runtime directory.  For example, for Unix, you
would use the directory "~/.vim/keymap".
   The name of the keymap file must look like this:

	keymap/{name}.vim ~
or
	keymap/{name}_{encoding}.vim ~

{name} is the name of the keymap.  Chose a name that is obvious, but different
from existing keymaps (unless you want to replace an existing keymap file).
{name} cannot contain an underscore.  Optionally, add the encoding used after
an underscore.  Examples:

	keymap/hebrew.vim ~
	keymap/hebrew_utf-8.vim ~

The contents of the file should be self-explanatory.  Look at a few of the
keymaps that are distributed with Vim.  For the details, see |mbyte-keymap|.


LAST RESORT

If all other methods fail, you can enter any character with CTRL-V:

	encoding   type			range ~
	8-bit	   CTRL-V 123		decimal 0-255
	8-bit	   CTRL-V x a1		hexadecimal 00-ff
	16-bit     CTRL-V u 013b	hexadecimal 0000-ffff
	31-bit	   CTRL-V U 001303a4	hexadecimal 00000000-7fffffff

Don't type the spaces.  See |i_CTRL-V_digit| for the details.

==============================================================================

Következő fejezet: |usr_46.txt|  Write plugins using Vim9 script

Jogi információk: lásd |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:

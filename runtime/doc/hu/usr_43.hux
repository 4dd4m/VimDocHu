*usr_43.txt*	Vim Verzió 8.2.	Utolsó módosítás: 2015 Oct 23


		  Bram Moolenaar: Vim felhasználói kézikönyv

			    Fájltípusok használata


Bizonyos fájltípusok esetén, például C forráskód, shell szkript stb, mindig
ugyanazokat a beállítás csoportokat kell alkalmaznunk. Ha ezt mind manuálisan
kellene megtennünk, akkor elég hamar elmenne a kedvünk az egésztől. A fejezet
azt tárgyalja, hogy hogyan automatizálhatjuk a beállításainkat.

|43.1|	Beépülők a fájltípusokhoz
|43.2|	Új fájltípus hozzáadása

Következő fejezet: |usr_44.txt|  Egyedi szintaxis kiemelés
    Előző fejezet: |usr_42.txt|  Új menüelemek hozzáadása
  Tartalomjegyzék: |usr_toc.txt|

==============================================================================
*43.1*	Beépülők a fájltípusokhoz			*filetype-plugin*
							*filetype-beépülő*

A fájltípus beépülők kezdetleges használatáról a |add-filetype-plugin|
fejezetben már szó esett, viszont lehetséges, hogy nem vagy megelégedve a az
alapértelmezett beállításaival, ezért ezen beállítások száma minimális. Tegyük
fel, hogy C forráskódok esetén a 'softtabstop'-ot 4-re szeretnéd állítani,
valamit parancsot létrehozni a három-soros kommentek létrehozására. Ezt két
lépésben elvégezhetjük:

							*your-runtime-dir*
							*runtime-könyvtárad*
1. Hozd létre a saját runtime könyvtáradat. Unixon ez általában "~/.vim".
   Ebben a könyvtárban pedig hozd létre a "ftplugin" könyvtárat: >

	mkdir ~/.vim
	mkdir ~/.vim/ftplugin
<
   Ha nem Unix rendszeren dolgozol, akkor nézd meg a 'runtimepath' változó
   tartalmát, hogy lásd, a Vim milyen elérési utakon keresi az "ftplugin"
   könyvtárat: >

	set runtimepath
<
   Érdemes az első elérési utat választani (ami az első vessző előtt
   található). Ha az érték nem tetszik, akkor egy általad meghatározott
   elérési utat is választhatsz, de ebben az esetben ne felejtsd el hozzáadni
   a |vimrc| fájlodhoz.

2. Hozd létre a "~/.vim/ftplugin/c.vim" fájlt az alábbi tartalommal: >

	setlocal softtabstop=4
	noremap <buffer> <LocalLeader>c o/**************<CR><CR>/<Esc>
	let b:undo_ftplugin = "setl softtabstop< | unmap <buffer> <LocalLeader>c"

Próbálj egy C fájlt szerkeszteni. A 'softtabstop' opciónak 4-en kell állnia.
Ha egy másik típusú fájlt szerkesztesz, akkor a 'softtabstop' értéke megint 0
lesz. Ez azért van, mert a softtabstopot a ":setlocal" paranccsal hoztuk
létre. A ":setlocal" parancs csak az aktuális bufferben tartja meg értékeit.
Mihelyst egy másik fájltípust szerkesztesz, felveszi annak az értékeit. Az új
bufferben az opció értéke alapértelmezett lesz, vagy a legutolsó ":set"
parancs eredménye.

Ugyanígy, a <leader>c mapping is megszűnik, ha másik bufferben szerkesztünk. A
":map  <buffer>" mappek lokálisak, csak az aktuális bufferre érvényesek.
Likewise, the mapping for "\c" will disappear when editing another buffer.
Természetesen ez a ":map" összes variációjánál érvényes például: "map!",
":vmap", ":imap" stb. A |<LocalLeader>| értéke a "maplocalleader" értékét
veszi fel. 

A b:undo_ftplugin a fájltípus cseréjénél fut le. Arra az esetre, ha valamelyik
értéket valami másra szeretnéd átállítani. A b:undo_ftplugin gyakorlatilag egy
parancs. Figyelj a speciális karakterekre, mint például a \.

Példákat a fájltípus beépülőkre itt találsz:  >

	$VIMRUNTIME/ftplugin/

A fájltípus beépülők írásáról általánosan: |write-plugin|.

==============================================================================
*43.2*	Új fájltípus hozzáadása

Ha olyan fájltípust nyitottál meg, amelyet a Vim nem ismer fel, akkor így
taníthatod meg rá a szerkesztőt. Szükséged van egy saját runtime könyvtárra.
Lásd |your-runtime-dir|.

Hozd létre a "fájltípus.vim" fájlt, ami egy autocommandot fog tartalmazni.
(Az autocommandokat bemutattuk a |40.3| fejezetben.)  Például: >

	augroup filetypedetect
	au BufNewFile,BufRead *.xyz	setf xyz
	augroup END

A parancs gondoskodik arról, hogy az ".xyz" kiterjesztésű fájlok fájltípusa
"xyz" legyen. Az ":augroup" parancs a az autocommandnak a "filetypedetect"
csoportnevet adta. Később ezzel tudjuk eltávolítani az autocommandokat
":filetype off" parancs esetén. A "setf" parancs beállítja a 'filetype' opciót
az adott argumentum szerint. Így a 'filetype' opció biztosan csak egyszer lesz
beállítva.

A fájlnevekhez illesztéséhez mintákat használhatunk. Elérési utak használata
is megengedett. Lásd |autocmd-patterns|. Például, az "/usr/share/scripts/"
könyvtárban ruby fájlok szerepelnek, viszont nem biztos, hogy mindegyik fájl
rendelkezik kiterjesztéssel. Add hozzá a fenti példához az alábbiakat: >

	augroup filetypedetect
	au BufNewFile,BufRead *.xyz			setf xyz
	au BufNewFile,BufRead /usr/share/scripts/*	setf ruby
	augroup END
<
A /usr/share/scripts/README.txt nyilvánvalóan  nem ruby fájl. A "*" minta
veszélye, hogy az összes fájlra illeszkedik. Hogy ezt elkerüljük, helyezzük át
a filetype.vim fájlt egy másik könyvtárba. Célozzuk meg a 'runtimepath'-ban
található utolsó elérési utat. Ez Unixon "~/.vim/after/filetype.vim".
   Most tedd a txt fájlokért felelős fájlt ide ~/.vim/filetype.vim: >

	augroup filetypedetect
	au BufNewFile,BufRead *.txt			setf text
	augroup END

Tehát ugyanazon a néven, de két fájlunk van. Ezt a fájlt találja meg először a
Vim a 'runtimepath'-ban (txt-ért felelős fájl). Aztán pedig a
~/.vim/after/filetype.vim fájlt fogja utoljára megtalálni: >

	augroup filetypedetect
	au BufNewFile,BufRead /usr/share/scripts/*	setf ruby
	augroup END

Az történik, hogy a Vim elkezdi keresni a "filetype.vim"  fájlokat a
'runtimepath'-ban szereplő elérési utak mentén. Először a ~/.vim/filetype.vim
fájlt találja meg. Az autocommand sikeresen illeszti a *.txt mintát a
README.txt fájlunkra. Aztán a Vim megtalálja a következő filetype.vim fájlt a
$VIMRUNTIME elérési úton (ami körülbelül a 'runtimepath' felénél található.
Végül a Vim megtalálja a ~/.vim/after/filetype.vim fájlt is melynek az
autocommandjai hozzáadódnak az előzőekéhez.
   Ha most szerkeszted a /usr/share/scripts/README.txt fájlt, akkor az
autocommandok is ilyen sorrendben fognak lefutni. A *.txt minta illeszkedik,
ezért a "setf text" parancs lefut és a fájltípus "text"-re állítja. A ruby
fájlok mintája is illeszkedik a fájlra, ezért a "setf ruby" parancs is lefut.
Mivel a 'filetype' már be lett állítva "text"-re, ezért ezen a ponton semmi
sem fog történni.
   Ha a /usr/share/scripts/foobar fájlt szerkeszted, ugyanezek az
autocommandok futnak le ugyanilyen sorrendben. Ennél a fájlnál azonban már
csak a ruby fog illeszkedni, ezért "setf ruby" beállítja a 'filetype'-ot
rubyra.


FELISMERÉS TARTALOM ALAPJÁN

Ha a fájltípust a fájlnévről nem sikerült megállapítani, akkor a tartalma
alapján tudjuk azonosítani. Például, a bash fájlok nagy része ezzel a sorral
kezdődik:

	#!/bin/xyz ~

Hozzunk létre egy új fájlt a runtime könyvtárunkban "scripts.vim" néven
(ugyanarra a helyre, ahová tettük a filetype.vim fájlt). Így nézzen ki: >

	if did_filetype()
	  finish
	endif
	if getline(1) =~ '^#!.*[/\\]xyz\>'
	  setf xyz
	endif

Az did_filetype() elkerülhetjük az újabb felesleges ellenőrzést, amit az
autocommandok már elvégeztek. Megakadályozza, hogy beállítsuk a fájltípust
újra a "setf" paranccsal, ami ebben az esetben egyébként se csinálna semmit.
   A scripts.vim fájlt egy autocommand tölti be az alapértelmezett
filetype.vim fájlból. Ezért az ellenőrzési sorrend:

	1. filetype.vim fájlok a $VIMRUNTIME  előtt a 'runtimepath'-ban
	2. $VIMRUNTIME/filetype.vim elő része
	3. minden scripts.vim fájlt a 'runtimepath'-ban
	4. $VIMRUNTIME/filetype.vim maradéka
	5. filetype.vim fájlok $VIMRUNTIME után a 'runtimepath'-ban

Ha ez nem lenne elég, kiegészítheted olyan autocommandokkal mely az összes
fájlra illeszt és külön szkripteket vagy függvényeken keresztül ellenőrzi a
fájlnevet.

==============================================================================

Következő fejezet: |usr_44.txt|  A saját szintaxis kiemelésed

Jogi információk: lásd |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:

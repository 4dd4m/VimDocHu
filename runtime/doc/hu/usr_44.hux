*usr_44.txt*	For Vim version 8.2.  Last change: 2017 May 06

		  Bram Moolenaar: Vim felhasználói kézikönyv

			 A saját szintaxis kiemelésed


A Vim többszázféle fájltípus szintaxisának kiemelésére képes. Ha olyan
helyzetbe kerülnél, hogy a Vim mégsem lenne képes megbirkózni a kiemeléssel,
akkor ez a Te fejezeted. A fejezet a szintaxisfájlok szerkesztéséről szól.
Lásd |:syn-define| (dokumentáció).

|44.1|	Alap szintaxis parancsok
|44.2|	Kulcsszavak
|44.3|	Egyezések
|44.4|	Tartományok
|44.5|	Egymásba ágyazott elemek
|44.6|	Csoportok követése
|44.7|	Egyéb argumentumok
|44.8|	Klaszterek
|44.9|	Szintaxis fájl beágyazása
|44.10|	Szinkronizáció
|44.11|	Szintaxis fájl telepítése
|44.12|	Hordozható szerkezet

Következő fejezet: |usr_45.txt|  Nyelvválasztás
    Előző fejezet: |usr_43.txt|  Fájltípusok
  Tartalomjegyzék: |usr_toc.txt|

==============================================================================
*44.1*	Alap szintaxis parancsok

Sok időt spórolhatunk, ha egy már meglévő, az elképzeléseinkhez hasonló
szintaxis fájlt szerkesztünk. Nézzünk körül a $VIMRUNTIME/syntax könyvtárban,
próbáljuk megtalálni a legmegfelelőbbet. A fájlok remekül mutatják a
szintaxisfájlok szerkezetét.

Kezdjük az alapoknál. Mielőtt bármit is csinálnák, távolítsuk el a betöltött
kiemelést: >

	:syntax clear

A kísérletezéshez hasznos. 

A fejezetben több egyszerűsítés is található. Ha a fájlt később használhatják
mások is, olvasd végig a részleteket.


DEFINIÁLT ELEMEK LISTÁZÁSA

A teljes lista megjelenítése: >

	:syntax

A lista megjeleníti a definiált elemeket, a hozzájuk tartozó színnel, így
gyorsan fel lehet ismerni, hogy mi mihez tartozik.
   Ha csak egy csoportot szeretnénk látni: >

	:syntax list {group-name}

A parancs a clustereket is képes megjeleníteni (ezekre kitérünk a |44.8|
pontban), ehhez adjuk hozzá a @ jelet a fájlnévhez.


KISBETŰ-NAGYBETŰ ÉRZÉKENYSÉG

Némely nyelv, mint például a Pascal nem érzékenyet a kis- és nagybetűkre. Más
nyelvek, mint például a C, igen.  Először a szintaxis ezen tulajdonságát kell
meghatároznunk: >

	:syntax case match
	:syntax case ignore

A "match" argumentum azt jelenti, hogy a szintaxis ellenőrzése betűérzékeny
lesz. Ezért "Int" nem egyenlő "INT"-el. "ignore" argumentum esetén viszont az
alábbiak egyenlőek: "Procedure", "PROCEDURE" and "procedure".
   A ":syntax case" a szintaxist leíró fájlban akárhol elhelyezhetjük, hatása
pedig az utána következő definíciókra lesz érvényes. A legtöbb esetben ennek
beállítása egyszer elegendő, viszont ha olyan kiemelést szeretnél készíteni,
amiben mindkét stílus szerepel, akkor a ":syntax case" parancsok
váltogathatják egymást a fájlban.

==============================================================================
*44.2*	Kulcsszavak

A kiemelés egyik legalapvetőbb eleme a kulcsszó. Definiálásának szintaxisa: >

	:syntax keyword {group} {keyword} ...

A {group} a kiemeléscsoport neve. A ":highlight" paranccsal színeket
rendelhetünk a csoporthoz. A kulcsszó pedig a {keyword}. Pár példa: >

	:syntax keyword xType int long char
	:syntax keyword xStatement if then else endif

A példában szereplő csoportnevek: "xType" és "xStatement". Az elnevezési
konvenció szerint minden csoportnevet prefixálni kell a nyelv fájltípusával. A
példában szereplő definíció az "x" nyelvhez tartozik. "csh" szkriptek esetén a
csoportnév "cshType" lenne. Azaz a prefixum egyenlő a nyelv 'filetype'
értékével.
   Ezért a definíció szerint az "int", "long", "char" szavaknak és az "if"
then", "else" és "endif" szavak kijelölése különböző lesz. Ezek után az x
csoport neveit a sztenderd  Vim nevekhez kell linkeljük az alábbi paranccsal:
>
	:highlight link xType Type
	:highlight link xStatement Statement

Ezért a Vim kiemeli "xType"-ot "Type"-ként, és "xStatement"-et "Statement"-ként.
A sztenderd csoportnevekről itt olvashatsz: |group-name|.


EGYEDI KULCSSZAVAK

Az összes kulcsszót alkotó karakternek benne kell lennie az 'iskeyword'
opcióban, ellenben a szó soha nem fog egyezni a definícióval (erről nem
figyelmeztet külön a Vim).
   Az x nyelvben szavaiban megengedett a '-' karakter használata. Ezt így
tudjuk hitelesíteni: >
>
	:setlocal iskeyword+=-
	:syntax keyword xStatement when-not

A ":setlocal" paranccsal módosítjuk az 'iskeyword' tartalmát, de csak az aktív
bufferben. A művelet után természetesen olyan parancsok viselkedése is
megváltozik, mint például "w" vagy "*". Ha ezt nem szeretnénk, akkor a kulcsszó
definíció helyett egy egyezést kell meghatároznunk (erre a következő
bekezdésben kitérünk).

Az x nyelv megengedi a rövidítések használatát is. Például, a "next" szó
rövidíthető "n"-re, "ne"-re vagy "nex"-re. Ezt így tudjuk megadni: >
>
	:syntax keyword xStatement n[ext]

Ez persze nem fog működni a "nextone" esetén, a kulcsszavak mindig egy szóra
illeszkednek.

==============================================================================
*44.3*	Egyezések

Tegyük fel, hogy valami bonyolultabbat szeretnénk végrehajtani. Szokásos
kulcsszavakat szeretnénk illeszteni. Ehhez egy match elemet kell definiálnunk.
Az illesztés olyan szavakra fog illeszkedni, melyben csak kisbetűk
szerepelnek: >

	:syntax match xIdentifier /\<\l\+\>/
<
	Megjegyzés:
	A kulcsszavak felülírják az egyéb szintaxis elemeket. Ezért az az
	"if", "then" stb., kulcsszavak lesznek, hiszen a ":syntax keyword"
	paranccsal definiáltuk őket, hiába illeszkednek az xIdentifier
	mintára.

A definíció utolsó része pedig maga a minta (mintha kereséshez használnánk). A
mintát // karakterek közé kell zárni (mintha a ":substitute" parancsot
használnánk). Ehhez bármely más karakter használható, például a "+" és a "'".

Most definiáljuk egy egyezést a kommentek számára. Az x nyelvben bármi
kommentnek számít a # jel után a sor végéig: >

	:syntax match xComment /#.*/

A keresési minták segítségével elég bonyolult dolgokat is illeszthetünk. Lásd a
|pattern| bejegyzést a minták használatához.

==============================================================================
*44.4*	Tartományok

A képzeletbeli nyelvünkben a sztringek " jelek közé vannak zárva. Ehhez meg
kell határoznunk egy tartományt (kezdő- és végpontokat). Mindkét ponthoz a
" karaktert kell rendeljük. A definíció így folytatódik: >

	:syntax region xString start=/"/ end=/"/

A "start" és az "end" direktívák határozzák meg a tartomány elejét és végét.
De mi van akkor, ha sztring az alábbi képpen néz ki?

	"A string with a double quote (\") in it" ~

A probléma: A sztring közepén szereplő " jel zárja a tartományt. Ezért a
Vimnek meg kell mondanunk, hogy az útközben szereplő escapelt " karaktereket
ugorja át, melyet így valósíthatunk meg: >

	:syntax region xString start=/"/ skip=/\\"/ end=/"/

A dupla \\ illeszkedik \ karakterre (a \ karakternek speciális jelentése van a
keresési mintákban).

Mikor használjuk tartományt egyszerű minta helyett? A legalapvetőbb különbség,
hogy a minta egy egy egyszerű illesztés, melynek teljes egészében illeszkednie
kell. A tartomány akkor kezdődik, ha a Vim találkozik a "start" karakterrel.
Az, hogy az "end" karaktert megtaláltuk-e vagy sem, az teljesen lényegtelen.
Ezért, ha az elem végének is illeszkednie kell, akkor nem használhatunk
tartományt. Egyébként, a tartományokat sokkal egyszerűbb meghatározni, és
egyszerűbb beágyazva is illeszteni őket, melyről a következő bekezdésben lesz
szó.

==============================================================================
*44.5*	Beágyazott elemek

Vizsgáljuk meg az alábbi kommentet:

	%Get input  TODO: Skip white space ~

A TODO karaktereket ki szeretnéd emelni sárga betűkkel annak ellenére, hogy ez
egy komment és kék színű. Két paranccsal meg tudjuk oldani: >

	:syntax keyword xTodo TODO contained
	:syntax match xComment /%.*/ contains=xTodo

Az első sorban a "contained" argumentum azt írja le, hogy a kulcsszó csak egy
másik elemben szerepelhet. A következő sorban a "contains=xTodo" arra utal,
hogy az xComment egyezés tartalmazza az xTodo kulcsszót. Az eredmény az lesz,
hogy komment sora illeszkedik az "xComment" definíciójára és kék színű lesz. A
TODO szó a kommenten belül illeszkedik a xTodo kulcsszóra és ezért sárga lesz
(tételezzük fel, hogy az xTodo elemet már korábban létrehoztuk).


REKURZÍV EGYMÁSBA ÁGYAZÁS

Az x nyelv a kódblokkjait {} karakterekkel határolja. A blokkok más blokkokat
is tartalmazhatnak. Kivitelezés: >

	:syntax region xBlock start=/{/ end=/}/ contains=xBlock

A kódrészletünk:

	while i < b { ~
		if a { ~
			b = c; ~
		} ~
	} ~

Az első xBlock elem az első sorban kezdődik. A második sorban egy újabb {
karakter található. Mivel az xBlockban vagyunk, mely önmagát tartalmazza, a
beágyazás ezen a ponton kezdődik. Ezért "b = c" sor a második xBlock
tartományban lesz. Aztán a következő sorban lévő } karakterrel ér véget a
beágyazott tartomány (a } karakter az első tartomány elől rejtve marad). Az
utolsó sorban lévő } karakter pedig zárja a külső tartományt.


SORVÉGEK TARTÁSA

Az alábbi definíciókkal rendelkezünk: >

	:syntax region xComment start=/%/ end=/$/ contained
	:syntax region xPreProc start=/#/ end=/$/ contains=xComment

Mely szerint, kommentnek számít minden a % karaktertől sor végéig. A #
karaktertől minden preprocesszor direktíva (C programnyelv) a sor végéig.
Mivel a direktívákban elhelyezhetünk kommenteket is, ezért a preprocesszor
direktívája tartalmazza a "contains=xComment" argumentumot. Nézzük meg, hogy
mi történik az alábbi kódrészlettel:

	#define X = Y  % Comment text ~
	int foo = 1; ~

Azt láthatod, hogy  a második sor is az xPreProc alapján van kiemelve. A
preprocesszor direktívájának a sor végéig kell tartania. Ezért használtuk a
"end=/$/" meghatározást. Mi történt?
   A problémát a beágyazott komment okozza. A komment % karakterrel kezdődik,
és a sor végéig tart. Miután a komment befejeződött, a preprocesszor kiemelés
folytatódik, mert a sor vége már fel lett dolgozva a % komment által, ezért a
kiemelés a következő sorra csúszik át.
   Úgy tudjuk megoldani a problémát, hogy megakadályozzuk, hogy a tartalmazó
elem "ellopja" a sor végét. A "keepend" argumentum erre megoldást jelent: >

	:syntax region xComment start=/%/ end=/$/ contained
	:syntax region xPreProc start=/#/ end=/$/ contains=xComment keepend


TÖBB ELEM BEÁGYAZÁSA

A "contains" argumentummal akár azt is megadhatjuk, hogy tartalmazzon mindent.
Például:   >

	:syntax region xList start=/\[/ end=/\]/ contains=ALL

Ezzel xList tartalmazni fogja az összes elemet (még saját magát is), de nem
azonos helyen (ami végtelen ciklust okozna). 
   Meghatározható, hogy a definíció az összes elemet tartalmazza, kivéve
bizonyos elemeket: >
>
	:syntax region xList start=/\[/ end=/\]/ contains=ALLBUT,xString

A "TOP" elemmel beágyazhatjuk az összes olyan elemet, amelyeknek nincs
"contained" argumentuma. A "CONTAINED" olyan elemeket ágyaz be, melyekben
szerepel a "contained" argumentum. Lásd: : |syn-contains| a további
részletekért.

==============================================================================
*44.6*	Csoportok követése

Az x nyelv az alábbi statementtel rendelkezik:

	if (condition) then ~

A három elemet különbözően szeretnénk kezelni. De a "(condition)" és a "then"
egyéb helyeken is megjelenhet, ahol különböző kiemeléseket kaphat. A
parancsok: >

	:syntax match xIf /if/ nextgroup=xIfCondition skipwhite
	:syntax match xIfCondition /([^)]*)/ contained nextgroup=xThen skipwhite
	:syntax match xThen /then/ contained

A "nextgroup" argumentum meghatározza a következő elemet. Ez nem követelmény.
Ha egyik definiált elem sem található, akkor nem történik semmi. Például az
alábbi kódrészletben:

	if not (condition) then ~

Az xIf illeszkedik az "if"-re. A "not" nem illeszkedik a nextgroup
argumentumban szereplő elemre, ezért csak az "if" lesz kiemelve.

A "skipwhite" argumentummal a Vim kihagyja az összes üres karaktert
(tabulátorok és szóközök), melyek az elemek között előfordulhatnak. Hasonlóan
működik a "skipnl" argumentum, amely a sortöréseket, a "skipempty" pedig az
üres sorokat engedélyezi. A "skipnl" nem hagyja ki az üres sorokat, tehát
valaminek egyeznie kell a sortörés után.

==============================================================================
*44.7*	Egyéb argumentumok

MATCHGROUP ARGUMENTUM

Ha definiálunk egy tartományt, akkor a teljes tartomány ki lesz emelve a
csoport neve szerint. Ahhoz, hogy az xInside csoporttal a tárójelek közötti
részt kiemeljük, az alábbi parancsot kell használjuk: >

	:syntax region xInside start=/(/ end=/)/

Tegyük fel, hogy a zárójeleket különböző színnel szeretnéd kiemelni. Ezt
megtehetjük bonyolult tartomány meghatározásokkal, vagy alkalmazhatjuk a
"matchgroup" argumentumot. Ez azt jelenti, hogy a tartomány eleje és vége
különböző csoporttal lesz kiemelve (ebben az esetben az xParen csoporttal): >

	:syntax region xInside matchgroup=xParen start=/(/ end=/)/

A "matchgroup" argumentum arra a tartomány kezdő- és végpontokra vonatkozik,
amelyek előtt szerepel. Ezért előző példában mind a kezdő, mind a végpontokra
az xParen kiemelést érvényesítettük. Ha csak a végponton szeretnénk a
xParenEnd alkalmazni, akkor: >

	:syntax region xInside matchgroup=xParen start=/(/
		\ matchgroup=xParenEnd end=/)/

A "matchgroup" használatának mellékhatása, hogy a tartalmazott elem nem
illeszkedik a tartomány elejére, vagy végére. 


TRANSPARENT ARGUMENTUM

C fájlokban ki szeretnénk emelni a ()-ben lévő szöveget a "while" után, de
teljesen máshogyan, mint a "for" után. Mindkét esetben lehet beágyazott ()
elem, amit ugyanúgy kellene kiemelnünk. Ezért meg kell győződünk arról, hogy a
kiemelés a záró ) pároknál megáll. Egyik módja: >
>
	:syntax region cWhile matchgroup=cWhile start=/while\s*(/ end=/)/
		\ contains=cCondNest
	:syntax region cFor matchgroup=cFor start=/for\s*(/ end=/)/
		\ contains=cCondNest
	:syntax region cCondNest start=/(/ end=/)/ contained transparent

cWhile és cFor elemeknek különböző kiemelést adhatunk. A cCondNest elem
mindegyikben szerepelhet, de ez felülírná annak az elemnek a kiemelését, ami
tartalmazza azt. Ezt a "transparent" argumentum okozza.
   Figyeljük meg, hogy a "matchgroup" neve a tartomány nevével egyezik meg.
Akkor miért definiálnánk? Nos, a matchgroup mellékhatásaként, hogy a
tartalmazott elem kezdete nem található. Ez elkerüli azt, hogy cCondNest
csoport illeszkedjen közvetlenül a "while" vagy a"for"a után. Ha ez
megtörténne, akkor illeszkedne a teljes szövegre, a bezáró ) karakterig és a
tartomány még ez után is folytatódna. Így cCondNest csak a tartomány kezdete
után fog illeszkedni, az első ( karakter után.


OFFSZETEK

Tegyük fel, hogy egy tartományt szeretnék létrehozni ( és ) jelek között, az
"if" után. De nem szeretnénk, ha a tartomány részét képezné az "if", vagy
akármelyik () karakter. A mintákhoz offszeteket is meghatározhatunk: >

	:syntax region xCond start=/if\s*(/ms=e+1 end=/)/me=s-1

A mintához tartozó offszet "ms=e+1". "ms" jelenti a minta kezdetét (Match
Start). Normál esetben az egyezés ott kezdődik, ahol a minta illeszkedik.
"e+1" azt jelenti, hogy az illesztés most a minta végétől egy karakterrel
jobbra kezdődik. 
   A minta végének offszete pedig "me=s-1". "me" jelentése az illesztés vége
(Match End). "s-1" pedig azt jelenti, hogy az illesztés a minta végétől egy
karakterrel balra történik. Ezért az alábbi kódrészletben: 

	if (foo == bar) ~

Csak a "foo == bar" lesz kiemelve az xCond illesztéseként.

Az offszetekről bővebben: |:syn-pattern-offset|.


ONELINE ARGUMENTUM

A "oneline" argumentum jelzi, hogy a tartomány határa nem léphet át másik
sorba.  Például:   >

	:syntax region xIfThen start=/if/ end=/then/ oneline

A parancs egy olyan tartományt definiál, mely "if"-el kezdődik, "then"-el ér
véget. Mi történik, ha nincs "then" az "if" után? A tartomány nem illeszkedik.

	Megjegyzés:
	Az "oneline" használata esetén a tartomány nem kezdődik el, ha annak a
	végpontja nem található. Az "oneline" argumentum nélkül viszont a Vim
	NEM ellenőrizné le a végpont meglétét (a tartomány akkor is
	elkezdődik, ha a fájlban a végpont egyáltalán nem szerepel).


A SOROK FOLYTATÁSÁNAK ELKERÜLÉSE

Bonyolítsuk mega dolgokat. Hozzunk létre egy preprocesszor sort. Ez # jellel
kezdődik az első oszlopban és a sor végéig tart. A \ karakter feloldja a sor
végét (folytatásnak számít). A problémát úgy oldhatjuk meg, hogy a kiemelésnek
megengedjük, hogy tartalmazzon egy folytatólagos mintát: >

	:syntax region xPreProc start=/^#/ end=/$/ contains=xLineContinue
	:syntax match xLineContinue "\\$" contained

Ebben az esetben, bár a xPreProc normális esetben csak egy sorra illeszkedne,
az általa tartalmazott csoport (névlegesen a xLineContinue) megengedi, hogy a
mint a következő sorba csússzon. Például, ez illesztené az alábbiakat:

	#define SPAM  spam spam spam \ ~
			bacon and spam ~

Az történt, amit szerettünk volna. (Ha mégsem, akkor a tartalmazott mintában
az "excludenl" argumentummal egy sorba kényszeríthetjük a mintát). Például, ki
szeretnéd emelni az "end" szót a xPreProc tartományban, de csak a sor végén. A
mintát egy sorban kell tartanunk, hogy xPreProc ne folytatódhasson új sorban,
mint a xLineContinue, ezért "excludenl"-t kell használnunk: >

	:syntax region xPreProc start=/^#/ end=/$/
		\ contains=xLineContinue,xPreProcEnd
	:syntax match xPreProcEnd excludenl /end$/ contained
	:syntax match xLineContinue "\\$" contained

"excludenl"-nek a minta előtt kell szerepelnie. Mivel "xLineContinue" nem
tartalmazza az "excludenl" elemet, az illesztés kiterjeszti a xPreProc elemet
a következő sorra.

==============================================================================
*44.8*	Klaszterek

Ha új szintaxis kiemelésen dolgozunk, akkor elég sor csoportot létrehozunk. A
csoportokat klaszterekbe foglalhatjuk.
   Tegyük fel, hogy képzeletbeli programnyelv ciklusokat, feltételes
elágazásokat, és függvényeket tartalmaz. Mindegyikük ugyanazokat a kiemeléseket
tartalmazza: számokat és azonosítókat, melyeket így hozhatunk létre: >

	:syntax match xFor /^for.*/ contains=xNumber,xIdent
	:syntax match xIf /^if.*/ contains=xNumber,xIdent
	:syntax match xWhile /^while.*/ contains=xNumber,xIdent

A "contains=" kódrészletet minden esetben meg kellett ismételnünk. Ha egy
harmadik elemet is hozzá szeretnénk adni, akkor azt is meg kellene ismételni
még egyszer. A klaszterek leegyszerűsítik az ilyen jellegű definíciókat oly
módon, hogy megengedik, hogy egy klaszter számos csoportot helyettesíthessen.
   A klaszter definiálása két elemhez, melyet három csoportban alkalmazunk: >

	:syntax cluster xState contains=xNumber,xIdent

A létrehozott klasztereket ugyanúgy használhatjuk a definíciókban, mint
bármelyik másik csoportot. A nevük @ jellel kezdődik. Alkalmazásuk három
csoportban pedig: >

	:syntax match xFor /^for.*/ contains=@xState
	:syntax match xIf /^if.*/ contains=@xState
	:syntax match xWhile /^while.*/ contains=@xState

Új csoport hozzáadása a klaszterhez az "add" argumentummal: >

	:syntax cluster xState add=xString

Csoport eltávolítása a klaszterből: >

	:syntax cluster xState remove=xNumber

==============================================================================
*44.9*	Szintaxis fájl beágyazása

A C++ programnyelv a C nyelv szuperszettje (azaz a C++ a C nyelv szintaxisát
nagy részét tartalmazza). Ezért semmi értelme, hogy a munkát teljesen az
elejéről kezdjük. Ezért a C szintaxis fájlját beolvashatjuk a C++ nyelvhez
akár menet közben: >

	:runtime! syntax/c.vim

A ":runtime!" parancs megkeresi a 'runtimepath' elérési utak alatt található
összes "syntax/c.vim" fájlt. Ezzel a C++ nyelnek a C nyelvvel megegyező
kiemeléseit már definiáltuk. Ha már lecserélted a c.vim fájlt (vagy új
definíciókkal egészítetted ki, akkor ezek is betöltődnek).
   A c.vim fájl betöltése után már csak az a feladat, hogy a C++ nyelvnek a
különbségeit leírjuk. Például, olyan kulcsszavak használata, melyeket a C
nyelv nem használ: >

	:syntax keyword cppStatement	new delete this friend using

A technika egyébként bármelyik fájl és nyelv esetén működik.

Most vegyük például a Perl nyelvet. A Perl szkriptek két fő részre
oszthatóak: a dokumentáció része POD formátumban, és a program kódja maga,
Perl nyelven. A POD rész "=head"-el kezdődik és "=cut"-al ér véget.
   A két részt szeparálni szeretnénk, azaz létre szeretnénk hozni egy fájlt a
POD kiemelés számára és egyet a Perl szintaxis számára. A ":syntax include"
parancs beolvassa a szintaxis fájlt és eltárolja a leírt elemeket a
meghatározott kiemelés klaszterben. A két parancs pedig: >

	:syntax include @Pod <sfile>:p:h/pod.vim
	:syntax region perlPOD start=/^=head/ end=/^=cut/ contains=@Pod

Amikor "=head" részhez ér a szövegszerkesztő a Perl fájlban, akkor a perlPOD
tartomány elkezdődik, mely tartalmazza a @Pod klasztert. Az összes pod.vim
fájlban a legfelső szinten leírt ebbe a tartományba. Amikor az értelmezés a
"=cut" szövegrészhez ér, a tartomány befejeződik és visszakerülünk a Perl
fájlban leírt elemekhez.
   A ":syntax include" parancs elég okos, hogy figyelmen kívül hagyja a
":syntax clear" parancsot a beágyazott fájlban. És egy olyan argumentum, mint
például a "contains=ALL" csak azokra az elemekre lesz érvényes, amelyik
fájlban definiálva van (és nem abban, ami meghívta azt).
   A "<sfile>:p:h/" rész veszi az aktív fájlt (<sfile>), kibontja a teljes
elérési utat (:p), melynek a "fejét" veszi (:h), azaz a végeredmény a fájllal
megegyező elérési út lesz. Azaz, a pod.vim fájl azonos elérési úttal lesz
importálva.

==============================================================================
*44.10*	Szinkronizáció

A fordítóknak könnyű dolga van. A fájl elején kezdik az értelmezést és csak
egyenesen végighaladnak rajta. A Vimnek nem ilyen könnyű az élet. Középen kell
kezdenie, ahol a szerkesztés folyik. Honnan tudja?
   A titok a ":syntax sync" parancsban rejlik. Ez mondja mega Vimnek, hogy
merre van. Például, a következő parancs mondja meg a Vimnek, hogy hátrafelé
pásztázzon a komment elejéhez, majd onnan kezdje a kiemelést. >

	:syntax sync ccomment

Argumentumokkal szabályozhatjuk a működést. A "minlines" argumentum a
minimális sorok számát adja meg, mellyel a Vim hátra irányban keres,a "maxline"
pedig a maximális sorok számát takarja.
   Például, az alábbi paranccsal a Vim a képernyő tetejétől számított 10 sort
vizsgálja (nem látható tartomány). >

	:syntax sync ccomment minlines=10 maxlines=500

Sikertelen megállapítás esetén a fájlt tovább vizsgálja, de soha nem haladja
meg a maxlinesban foglalt sorok számát. (Ha túl nagy értéket adunk a
"maxlines" argumentumnak, akkor az lelassítja a feldolgozást. Nagyon kicsi
érték esetén pedig a szinkronizáció egyáltalán nem fog működni).
   A szinkronizáció gyorsítására állítsuk be, hogy mely szintaxis elemek
legyenek kihagyva. Az összes tartománynak és illesztésnek átadhatjuk a
"display" argumentumot abban az esetben, ha ezen elemeknek mindenképpen a
képernyőn kell szerepeljenek (szöveg nélkül felesleges a keresésük).
   Alapértelmezésként, a megtalált komment a Comment kiemeléscsoport alapján
lesz színezve. Ha másképpen szeretnénk színezni, akkor megadhatunk eltérő
csoportot: >

	:syntax sync ccomment xAltComment

Ha programnyelvünknek nincs C stílusú kommentjei, akkor megpróbálhatjuk a
szinkronizációt más módszerrel. A legegyszerűbb módszer, ha megmondjuk a
Vimnek, hogy menjen vissza meghatározott sort és próbálja onnan folytatni. Az
alábbi paranccsal a Vim visszamegy 150 sort és az értelmezést onnan folytatja:
>
	:syntax sync minlines=150

A nagy "minlines" érték a Vimet lassúvá teheti, különösen vissza irányban
történő görgetésnél.
   Végül, meghatározhatjuk a keresendő szintaxis csoportot ezzel a
paranccsal: >
>
	:syntax sync match {sync-group-name}
		\ grouphere {group-name} {pattern}

Ha a Vim látja a {pattern} mintát, akkor a szintaxis csoport neve az adott
minta után kezdődik. A {sync-group-name} (szinkronizációs csoportnevet) arra
használjuk, hogy ezt a szinkronizációs csoportot elnevezzük. Például, az sh
szkriptekben kezdődő "if" szerkezet "fi"-vel végződik: 

	if [ --f file.txt ] ; then ~
		echo "File exists" ~
	fi ~

A "grouphere" direktíva létrehozásához az alábbi parancsot használhatjuk: >

	:syntax sync match shIfSync grouphere shIf "\<if\>"

A "groupthere" argumentum jelzi a minta végét. Például, az if/fi csoport vége:
>
	:syntax sync match shIfSync groupthere NONE "\<fi\>"

Ebben a példában a NONE hogy a tartományt nem kell speciális kiemelés
részeként kezelni, azaz nem vagyunk if blokkban.

Illesztéseket és tartományokat a "grouphere" vagy "groupthere" argumentumok
nélkül is definiálhatunk, melyek kimaradnak a szintaxis szinkronizációból.
Például, az alábbi definíció mindent kihagy az {} blokkban, még akkor is, ha
egyébként egy másik szinkronizációs metódusra illeszkedne: >

	:syntax sync match xSpecial /{.*}/

Még több a szinkronizációról a dokumentációban: |:syn-sync|.

==============================================================================
*44.11*	Szintaxis fájl telepítése

Ha az új szintaxis fájlod kész, akkor másold be a 'runtimepath' részét képező
"syntax" könyvtárba. Ez Unixon: "~/.vim/syntax". 
  A fájl nevének meg kell egyezzen a fájl kiterjesztésével, amihez a ".vim" et
hozzá kell adni. Ezért x nyelven a teljes elérési útja a következő lesz:

	~/.vim/syntax/x.vim ~

Arról is gondoskodnunk kell, hogy a Vim ezt betöltse: |43.2|.

Ha a fájlunk remekül működik, akkor azt megoszthatjuk másokkal. Először
olvassuk el a következő bekezdést és győződjünk meg arról, hogy a fájl
megfelelően működik mások számára is. Aztán e-mailben küldjük el a Vim
karbantartója számára <maintainer@vim.org> egy rövid magyarázattal, mely
leírja, hogy hogyan detektálhatjuk a fájlt. Egy kis szerencsével a fájl
szerepelhet a Vim következő verziójában!
If your file works well, you might want to make it available to other Vim
users.  First read the next section to make sure your file works well for
others.  Then e-mail it to the Vim maintainer: <maintainer@vim.org>.  Also
explain how the filetype can be detected.  With a bit of luck your file will
be included in the next Vim version!


MEGLÉVŐ SZINTAXIS FÁJL BŐVÍTÉSE

Eddig feltételeztük, hogy egy teljesen új fájlt hoztunk létre. Ha egy már
létező fájl részben működik, csak kiegészítésre szorul, a különbségeket egy
külön fájlba kell helyeznünk. Így elkerülhetjük, hogy megsemmisüljön (új
verziók telepítésénél gyakori).
   Írd le a kiemelés definíciót egy külön fájlba (lehetőleg a meglévő
kiemelésben meghatározott csoportneveket használva). Például, új típusú
változó hozzáadása a C szintaxis fájlhoz:
>
	:syntax keyword cType off_t uint

A fájlt az eredetivel megegyezően nevezd el. Ebben az esetben "c.vim". Helyezd
el a 'runtimepath' elérési úton található könyvtárak végén (after könyvtár).
Ennek hatására a fájl  utolsóként fog betöltődni (a módosításokkal kiegészítve
a létező fájlt). Unixon ez így néz ki: 

	~/.vim/after/syntax/c.vim ~

==============================================================================
*44.12*	Hordozható szerkezet

Nem lenne szép, ha minden Vim felhasználó kedvére cserélgethetné a kiemelés
fájlokat? Hogy ez megtörténhessen, követnünk kell pár alapvető konvenciót.

A fejléc elmagyarázza, hogy mihez való a kiemelés, ki tartja karban és mikor
frissült utoljára. Nem érdemes túl sok információt feltüntetni (changelog),
ezeket nem sokan olvassák el. Például:   >

	" Vim syntax file
	" Language:	C
	" Maintainer:	Bram Moolenaar <Bram@vim.org>
	" Last Change:	2001 Jun 18
	" Remark:	Included by the C++ syntax.

Használd a többi szintaxis fájl által használt szerkezetet, mely egyébként sok
időt meg is spórol.

Használj egy megfelelő, leíró nevet. Kisbetűket és számokat. Ne írd hosszúra.
A fájl neve "name.vim", 'filetype', b:current_syntax és a kezdőcsoportok
(nameType, nameStatement, nameString, stb).

A fájl elejéhez ellenőrizd a "b:current_syntax" változót. Ha van értéke, akkor
már egy szintaxis fájl be lett töltve a 'runtimepath'-ból: >

	if exists("b:current_syntax")
	  finish
	endif

Állítsuk be a "b:current_syntax" változó nevét a fájl végén. Ne felejtsük el
hogy ezt a beágyazott fájlok is megteszik és talán vissza kell állítanunk a
változó értékét, ha több fájllal dolgozunk.

Ne adjunk hozzá olyan beállításokat, amik a felhasználói preferenciát
képezhetik. Ne állítsuk be a 'tabstop', 'expandtab' értékét, stb. Ezek a
fájltípus beépülőkhöz tartoznak.

Ne tartalmazzanak a fájlok mappeket vagy rövidítéseket. Csak az 'iskeyword'
értékét állítsuk be, ha ez feltétlenül szükséges.

Engedjük meg a felhasználóknak, hogy kiválaszthassák a színeket, készítsünk
különböző csoportokat minden elem számára. Ezek után rendeljük hozzá minden
elemet az alapértelmezett csoportok egyikéhez. Így a fájl minden színséma
esetén működni fog. Ha konkrétan megadjuk a színt, akkor az esetleg egy másik
színsémában akár olvashatatlan is lehet. Ne felejtsük el, hogy egyes
felhasználóknak más háttérszínt alkalmaznak, vagy csak 8 szín áll
rendelkezésre.

A linkeléshez használjuk a "hi def link", így a felhasználó más kiemelést is
választhat, mielőtt a fájlt betöltődne: Például:   >

	  hi def link nameString	String
	  hi def link nameNumber	Number
	  hi def link nameCommand	Statement
	  ... etc ...

Adjuk hozzá a "display" argumentumot azokhoz az argumentumokhoz, amelyeket a
szinkronizáció során nem használunk, hogy felgyorsítsuk a görgetést és a
CTRL-L parancsot

==============================================================================

Következő fejezet: |usr_45.txt|  Nyelv kiválasztása

Jogi információk: lásd |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:

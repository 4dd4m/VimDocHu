*intro.txt* Vim Verzió 8.2.    Utolsó módosítás: 2020 Dec 29

		  Bram Moolenaar: Vim felhasználói kézikönyv


Bevezetés a VIM használatába				*ref* *reference*

1. Bevezetés			|intro|
2. Internetes források		|internet|
3. Alkotók			|credits|
4. Jelölésrendszer		|notation|
5. Módok, bevezetés		|vim-modes-intro|
6. Módok közötti váltás		|mode-switching|
7. Az ablak tartalma		|window-contents|
8. Definíciók			|definitions|

==============================================================================
1. Bevezetés						*intro*

A Vim egy rövidítés, jelentése: Vi IMproved. Kezdetben Vi IMitationt
jelentett, de a számos fejlesztés hatására a névcsere elengedhetetlenné vált.
A Vim egy szövegszerkesztő, mely örökölte a Unixos "Vi" szinte összes
funkcióját és megannyi mást is. Nagyon hasznos programok, valamint szöveges
állományok szerkesztésére.
    Az összes parancs kiadható a billentyűzet segítségével, így az ujjainknak
nem kell elhagyniuk a billentyűzetet. Egér támogatás, GUI görgetősávokkal is
rendelkezésre áll azok számára, akik igényt tartanak rá (lásd |gui.txt|).

A dokumentáció gyors áttekintőjét találhatjuk ebben a fájlban (|help.txt)|.

Elérhető a Vimből a <Help> vagy az <F1> billentyűk segítségével, valamint a
|:help| paranccsal (csak írjuk be ":help", cső és időzőjel karakterek nélkül).
    A 'helpfile' opció beállításával változtathatjuk a alapértelmezetten
megnyíló helpfájlt (argumentumok nélküli hívás esetén). A tárgyszavakra
helyezve a kurzort, a CTRL-] kombinációval az adott szó definíciójára
ugorhatunk, vissza pedig a CTRL-T-vel.

A Vi és Vim közötti különbségekről bővebben itt |vi_diff.txt|.

A dokumentáció a futtató környezetetek között nem tesz különbséget, a
használatot egységesen írja le. Környezetek és terminálok között azonban apró
különbségekben eltérhetnek. Ezen kívül, léteznek rendszerspecifikus
dokumentációk
(lásd |sys-file-list|).

							*pronounce*
A Vim szót úgy ejtjük, ahogy leírjuk, nem betűzzük (vé-i-em). Az első v betű
pedig minden esetben nagy kezdőbetű, hiszen tulajdonnévről beszélünk.

A dokumentáció leírja az összes parancs és opció használatát. Nem egy bevezető
kezdőknek, ezért teljesen természetes, hogy olykor-olykor egy kissé
bonyolulttá válik. Teljesen kezdők rendelkezésére áll |tutor|. A Vim
használatát a |usr_toc| dokumentum mutatja be.

							*book* *books*
Nyomtatott könyvek rendszerint szentelnek fejezeteket a kezdők számára, míg
mások részletesebben kitérnek egy adott konkrét funkció leírására. Az elérhető
könyvekről készült lista itt megtekinthető, a teljesség igénye nélkül:

	http://iccf-holland.org/vim_books.html

==============================================================================
2. Internetes források					*internet*

			*www* *WWW*  *faq* *FAQ* *distribution* *download*
A Vim weboldalain tájékozódhatunk a legfrissebb információkról. Szintén
ugyanitt szerezhetjük be a legfrissebb verziót. A FAQ a Gyakran Ismételt
Kérdések listája. Ha problémáid adódnak, érdemes átolvasnod.

	Vim honlapja:	  https://www.vim.org/
	Vim GYIK:	  https://vimhelp.org/vim_faq.txt.html
	Letöltés:	  https://www.vim.org/download.php


Kérdések és válaszok: https://vi.stackexchange.com/
"Vi and Vim Stack Exchange egy kérdezz-felek weboldal a vi és Vim család
felhasználói számára.


Usenet hírcsoport, beszélgetések a Vimről:		*news* *usenet*
	comp.editors
A csoport más szövegszerkesztők számára is otthont ad, így ha Vim témakörben
írsz, ne felejtsd el megemlíteni.
Itt érheted el (angol):
https://groups.google.com/forum/#!topic/comp.editors

						*mail-list* *maillist*
Levelező listák:
<vim@vim.org>					*vim-use* *vim_use*
	Eszmecserék a legfrissebb Vim használatáról: Hasznos mappek, kérdések,
	válaszok (hol szerezhető be egy specifikus verzió) stb. Elég sokan
	fel vannak íratkozva és válaszolnak is akár kezdők számára is. Ha
	kérdésed van, ne habozz.
<vim-dev@vim.org>				*vim-dev* *vim_dev* *vimdev*
	A szerkesztőt érintő változtatásokról szóló levelezőlista, új
	funkciók, portolás, javítások, béta teszt verziók, stb.
<vim-announce@vim.org>				*vim-announce* *vim_announce*
	Új verziók bejelentése (tesztverziók is), portolás új rendszerekre.
	(csak olvasható).
<vim-mac@vim.org>				*vim-mac* *vim_mac*
	A szerkesztő Macintosh rendszerére íródott verzió javításával
	kapcsolatos beszélgetések.

Legfrissebb információkért lásd http://www.vim.org/maillist.php.

MEGJEGYZÉS:
- Az archivált levelezőlista bárki számára elérhető a Google csoportokon. Ha
  kérdésed van, először keress választ itt.
- Csak úgy tudsz üzenetet küldeni a listákra, ha felíratkozol!
- Az első üzenet moderáción esik át, így előfordulhat, hogy pár órán át nem
  fogod látni.
- Az üzenetek és a regisztráció helyszínének azonosnak kell lennie (a spam
  emailek elkerülése végett).

						*subscribe-maillist*
Ha csatlakozni szeretnél, küldj üzenetet ide:
	<vim-subscribe@vim.org>
Győződj meg arról, hogy levél feladója helyesen van kitöltve. A szerver
további üzenetben értesít a csatlakozás pontos menetéről.

						*maillist-archive*
További információk a levelező listáról, archívum:
http://www.vim.org/maillist.php


Hibajelentések:				*bugs* *bug-reports* *bugreport.vim*

Hibákat három módon jelenthetük:
1. Nyiss egy új issuet GitHubon: https://github.com/vim/vim/issues
   A tartalom automatikusan továbbítódik a vim-dev levelező listára.
2. Egyéb futtatható állományok esetén a header tartalmazza a karbantartó
   e-mail címét, ahol a problémát jelenteni lehet.
3. Jelentésed küldd ide: Vim Developers <vim-dev@vim.org>
   Ez egy levelezőlista, fel kell rá íratkoznod. Az üzenet publikus a 
   felíratkozók számára. Ha ezt nem szeretnéd, jelentésed küldd ide: 
   <bugs@vim.org>, ezt az üzenetet csak Bram fogja látni.

Pontosan írd le a problémát. Minden megválaszolt emaillel kevesebb idő jut a
vim fejlesztésére! Írd le, hogy a hiba hogyan reprodukálható és próbáld meg
melyik beállítás vagy egyéb dolog okozhatja a problémát.

Lehetőleg indítsd a Vimet ezzel a paranccsal: >

	vim --clean -u reproduce.vim

Ahol a reproduce.vim egy szkriptet tartalmaz, ami reprodukálja a problémát. Ha
lehetőséged van rá, próbáld reprodukálni a problémát egyéb rendszereken,
(lehet a probléma csak kizárólag egy platformot érint?).

Ha tudod javítani a problémát, küldd el a javítást! Csinálj egy pull requestet
itt https://github.com/vim/vim, ezen végig fog futni egy algoritmus és jelenti
a legnyilvánvalóbb problémákat. A javítást emailen keresztül is elküldheted.

Segít, ha leírod, hogy a Vim melyik verzióját használod, milyen beállításokkal.
Több információt ezzel a paranccsal érhetsz el:

   :so $VIMRUNTIME/bugreport.vim

A parancs létrehoz egy "bugreport.txt" fájlt az aktív könyvtárban rengeteg
hasznos információval a futtató környezetről. Mielőtt elküldenéd, ellenőrizd
le, hogy nem tartalmaz érzékeny adatokat!

Összeomlás esetén próbáld meg kideríteni, hogy hol történik a probléma. Ezzel
kapcsolatban a |debug.txt| segítségedre lesz.

Abban az esetben, ha a problémát már javították, de Te mégsem találod a
javítást, íratkozz fel a vim-dev levelező listára és tedd fel a kérdésed.
|maillist|.

							*year-2000* *Y2K*
A Vimben nincs összetett dátumkezelés, így a 2000-es éveket (továbbiakban Y2K)
érintő probléma miatt nem kell aggódni. Az idő nyomonkövetésére az 1970 Január
1. óta eltelt másodpercek számát alkalmazza (fájl és swap fájl közötti
megkülönböztetés gyanánt). Figyelmeztető üzenetnél többet a probléma nem
okozhat.

Lesz viszont a 2038 évet érintő probléma, ekkor a másodpercek száma már nem
lesz ábrázolható 32 bites egész számon. Messzire menő következtetéseket nem
éri meg levonni, a megoldás nagyban függ a majdani fordítótól, könyvtáraktól
és operációs rendszerektől (timet_t, ctime()). time_t a swapfájlban négy
bájton tárolódik, bár ez csak a nyomtatásra van kihatással, soha nem fogja
befolyásolni a szöveges fájlok szerkesztési munkafolyamatait.

A vim strftime() függvénye közvetlenül hívja a rendszer strftime() függvényét.
A localtime() függvény a rendszer time() hívja meg. A getftime() a stat()
függvény által visszaadott időt használja. Ha a rendszered megfelel a 2000-es
évek elvárásainak, akkor a Vim is.

A felhasználó írhat olyan szkripteket, melyek külső programot használnak és
így belefuthat a Y2K problémába, viszont az ily' módon meghívott külső
eszközök nem tekinthetőek a Vim részeként.

==============================================================================
3. Alkotók				*credits* *author* *Bram* *Moolenaar*

A Vim nagy részét Bram Moolenaar <Bram@vim.org> írta.

A dokumentáció egyes részei a Vi leírását képezték, szerzőik:
	W.N. Joy
	Alan P.W. Hewett
	Mark Horton

A Vim szövegszerkesztő a Stevie (és más szoftverek) megoldásaiból építkezett,
munkájuk azonban felhasználásra kerültek a szövegszerkesztő fejlesztése során.
Mások javításokat küldtek, javaslatokat és visszajelzéseket a jó és rossz
dolgokról.

A Vim soha nem vált volna a segítségük nélkül azzá, ami.

	Ron Aaron		Win32 GUI javítások
	Mohsin Ahmed		titkosítás
	Zoltan Arpadffy		VMS port munkálatok
	Tony Andrews		Stevie
	Gert van Antwerpen	javítások (DJGPP - MS-DOS)
	Berkeley DB(3)		ötletek a swap fájl implementáció kapcsán
	Keith Bostic		Nvi
	Walter Briscoe		Makefile frissítések, javítások
	Ralf Brown		SPAWNO könyvtár - MS-DOS
	Robert Colon		számos hasznos visszajelzés
	Marcin Dalecki		GTK+ GUI port, eszköztár, ikonok, gettext()
	Kayhan Demirel		híreket küldött Ugandába
	Chris & John Downey	xvi (ötletek multi-windows verziókhoz)
	Henk Elbers		az első VMS port
	Daniel Elstner		GTK+ 2 port
	Eric Fischer		Mac port, 'cindent', számos egyéb fejlesztés
	Benji Fisher		felhasználói kérdések megválaszolása
	Bill Foster		Athena GUI port
	Google			Hagyja, hogy heti egy napot a Vimet fejlesszem
	Loic Grenie		xvim (ötletek - multi windows version)
	Sven Guckes		Vim promóter, előző WWW karbantartó
	Darren Hiebert		ctags
	Jason Hildebrand	GTK+ 2 port
	Bruce Hunsaker		VMS port fejlesztések
	Andy Kahn		Cscope támogatás, GTK+ GUI port
	Oezguer Kesim		A Vim levelezőlista karbantartója
	Axel Kielhorn		Macintosh port
	Steve Kirkendall	Elvis
	Roger Knobbe		eredeti Windows NT port
	Sergey Laskavy		Vim's help from Moscow
	Felix von Leitner	A Vim levelezőlista előző karbantartója.
	David Leonard		Python kiterjesztések portjai - Unix
	Avner Lottem		jobbról balra szövegirány
	Flemming Madsen		X11 kliens-szerver, javítások
	Tony Mechelynck		felhasználói kérdések megválaszolása
	Paul Moore		Python interface kiterjesztések, számos patch
	Katsuhito Nagano	multibyte verzió
	Sung-Hyun Nam		multibyte verzió
	Vince Negri		Win32 GUI és alapvető konzolos javítások
	Steve Oualline		A legelső Vim könyv szerzője |frombook|
	Dominique Pelle		Valgrind jelentés és számos javítás
	A.Politz		hibajelentések, javítások
	George V. Reilly	Win32 port, Win32 GUI kezdete
	Stephen Riehm		hibák gyűjtése
	Stefan Roemer		számos hibajavítás, felhasználók segítése
	Ralf Schandl		IBM OS/390 port
	Olaf Seibert		DICE és BeBox verzió, regexp fejlesztések
	Mortaza Shiran		Farsi javítások
	Peter da Silva		termlib
	Paul Slootman		OS/2 port
	Henry Spencer		reguláris kifejezések
	Dany St-Amant		Macintosh port
	Tim Thompson		Stevie
	G. R. (Fred) Walter	Stevie
	Sven Verdoolaege	Perl interfész
	Robert Webb		Command-line kiegészítés, GUI verziók, és
				rengeteg javítás
	Ingo Wilken		Tcl interfész
	Mike Williams		PostScript nyomtatás
	Juergen Weigert		Lattice verzió, AUX fejlesztése, UNIX és
				MS-DOS portok, autoconf
	Stefan 'Sec' Zehl	a vim.org karbantartója
	Yasuhiro Matsumoto	számos MS-Windows fejlesztés
	Ken Takata		javítás és extra funkciók
	Kazunobu Kuriyama	GTK 3
	Christian Brabandt	számos javítás, fejlesztés, felhasználói
				segítségnyújtás, stb.
	Yegappan Lakshmanan	quickfix funkciók

Szeretném megköszönni mindannyiuknak az elküldött hibajelentéseket és
javaslataikért. A lista túl hosszú lenne mindannyiukat megemlíteni. Az
ötleteik nélkül a Vim ma nem tartana itt: Ők tartják életben a Vimet!
*love* *peace* *friendship* *gross-national-happiness*


A dokumentációban hivatkozásokat találhatunk a Vi egyéb verzióira:
							*Vi* *vi*
Vi	Az "eredeti", (amennyiben nincs külön hivatkozás verziószámra), az a
	verzió, amely megjelent a Sun OS 4.x.-ben. ":version" parancs
	eredménye: "Version 3.7, 6/7/85". Esetenként más verziók is
	megemlítésre kerülhetnek. Kizárólag Unix alatt fut. Forráskódját
	BSD-style licensz védi. 

	További információk:
		http://ex-vi.sourceforge.net/
							*Posix*
Posix	Az IEEE standard 1003.2 (ismertebb nevén "Posix"), a Vi működési
	elveit tárgyalja.
	Lásd |posix-compliance|.
							*Nvi*
Nvi	Az "új" Vi. A BSD 4.4 és a FreeBSD alapértelmezett szövegszerkesztője.
	A régi verzióval a kompatibilitása nagyon jó. Megjelennek az első
	kiegészítők (pluginok). Az említett Nvi verziószáma 1.79, a ":version"
	parancs "Version 1.79 (10/23/96)" ad vissza. Az elmúlt években nem
	volt új verzió, bár a fejlesztői változat elérhető (1.81). Forrás
	kódja szabadon letölthető.
							*Elvis*
Elvis   A következő Vi klón, szerzője: Steve Kirkendall. Kompakt, de nem
	annyira flexibilis, mint a Vim. Fejlesztése megállt. Elvis él!  A
	forráskód szabadon letölthető.
							*Neovim*
Neovim  Vim klón. 2014-ben indult útjára, de más irányt vett. A Githubhoz
	nagyon kötődik, sokkal több függősége van ami miatt komplexebb,
	hordozhatósága limitáltabb. A kódbázis részei refaktoráláson estek át,
	ami már nem kompatibilis a Vimmel. Támogatja a távoli grafikus
	interfészt és egyéb szkriptnyelvek.

==============================================================================
4. Jelölések						*notation*

A jelölések megkönnyítik a dokumentáció olvasását, azok a parancsok, amik
valamilyen módon csoportosítva vannak, nem képezik a parancsok részét. Például
[],{},<> és CTRL-X.

Megjegyzés: Az összes karakter képezheti parancs részét. Olykor a [], {} és <>
karakterek is részei annak, amit be kell írnod. A kontextus alapján könnyen
megkülönböztethetőek.


[]		A szögletes zárójel közötti karakterek opcionálisak.

						    *count* *[count]*
[count]		A parancsot megelőző opcionális iterátor, ennyiszer hajtódik
		végre a parancs. Hiánya esetén értéke automatikusan: 1.

		Megjegyzés:
		A dokumentáció definícióiban nincs megemlítve a [count]
		explicit módon, a parancs leírása azonban tartalmazhatja. Erre
		azért volt szükség, hogy a parancsok keresése egyszerűbb
		legyen Ha a 'showcmd' be van állítva a (részleges) [count]
		értéket az ablak jobb alsó sarkában nyomon követhetjük. A
		<Del> billentyűvel az utolsó szám törölhető (|N<Del>|).

							*[quotex]*
["x]		Opcionális regiszterhivatkozás szövegek tárolására. Lásd:
		|registers|. Az x egy szimpla karakter 'a' és 'z', 'A' és 'Z'
		között, esetenként '"'. Ha a szerkesztés a put parancsot
		érinti (beillesztés), akkor lehet '0' és '9' között, '%', '#'
		vagy egyéb. A nagy- és kisbetűs regiszterek ugyanarra a
		regiszterre hivatkoznak. A kisbetűs regiszter felülírja a régi
		értékét. A nagybetűs regiszter pedig hozzáfűz a regiszter
		tartalmához. '"x" vagy '""' hivatkozások hiányában a szöveg a
		névtelen regiszterbe kerül.

							*{}*
{}		A kapcsos-zárójelek közötti résznek szerepelnie kell a
		parancsban, számos értéke lehet. A Vim és Vi használatában
		lényeges különbség a {} használatának módja. (a kontextus
		alapján ki fog derülni a pontos használata).

							*{char1-char2}*
{char1-char2}	Szimpla karaktertartomány char1-től char2-ig. Például {a-z},
		mint kisbetűs karaktertartomány, {a-zA-Z0-9}, mint
		alfanumerikus karatercsoportok.

						*{motion}* *movement*
{motion}	A parancs, mely a kurzort mozgatja. Bővebben: |motion.txt|.

		Például:
			w		ugrás a következő szó elejére
			b		ugrás a kurzor alatti szó elejére
			4j		négy sort le
			/Az<Cr>		Az "Az" következő előfordulása

		Elmozdulást az operátor parancsok (|operator|) után használjuk, a
		parancs "hatóköreként".
		- Ha az elmozdulás és az operátor is el van látva számmal,
		  akkor az értékük össze szorzódik. Például: "2d3w" töröl hat
		  szót (kiértékelve: 2(d3w)).
		- Az elmozdulás hátrafelé is történhet. Például: "db", törlés
		  a szó elejéig.
		- Az elmozdulás meghatározható egérklikkel is, bár ezt nem
		  mindegyik terminál támogatja.
		- ???The ":omap" command can be used to map characters while an
		  operator is pending.
		- Az Ex parancs használható a kurzor mozgatására.
		  Függvényhívásokkal komplexebb mozgások is végezhetőek de
		  csak és kizárólag karakterenkénti mozgás, nem számít, hogy
		  milyen ":" parancsot használtunk. Ez azt jelenti, hogy
		  lehetetlen elérnünk a sortöréseket (amíg be nem kapcsoljuk a
		  'virtualedit' opciót).
		  Ha az Ex parancs megváltoztatja a szöveget, mielőtt az
		  operátor lefutna vagy mielőtt egy másik bufferre ugrana,
		  akkor az eredmény kiszámíthatatlan lesz.  A szöveg előre
		  irányban megváltoztatható. A bufferváltás lehetséges, ha az
		  aktuális buffer rendelkezik tartalommal.

							*{Visual}*
{Visual}	A kiválasztott terület. "v", "V" vagy CTRL-V parancsot
		követően mozgás parancsok segítségével a kijelölt szöveg
		végpontja megváltoztatható. Ha egy parancsot (|operator|)
		vizuális tartománnyal látunk el, akkor a parancs hatóköre a
		kijelölt rész lesz.  Lásd |Visual-mode|.

							*<character>*
<character>	Lehet egy speciális karakter, opcionális módosítókkal, vagy
		egy szimpla ASCII karakter, módosítókkal.

							*'character'*
'c'		Egy szimpla ASCII karakter.

							*CTRL-{char}*
CTRL-{char}	{char} leütése lenyomva tartott CTRL billentyű mellett. Nincs
		különbség kis- és nagybetű között, CTRL-A és CTRL-a egyaránt
		érvényesek. Egyes terminálok a SHIFT billentyű megnyomásával
		más kódot produkálnak, ezeket ne használjuk.

							*'option'*
'option'	Opció vagy paraméter, melyeknek értéket adhatunk szimpla
		idézőjelek közé vannak zárva. Lásd |Options|.

							*quotecommandquote*
"command"	Hivatkozás egy parancsra.

`command`	Új stílusú parancs

					*key-notation* *key-codes* *keycodes*
A billentyűk elnevezései. A ":map" paranccsal kombinálva CTRL-K hatására egy
billentyűkombinációt vár, melynek nevét helyesen beilleszti a parancssávba.

jelölés		jelentés	    egyenértékű	decimális   érték	~
-----------------------------------------------------------------------
<Nul>		zéró			CTRL-@	  0 (tárolt: 10) *<Nul>*
<BS>		visszalépés		CTRL-H	  8	*backspace*
<Tab>		tabulátor		CTRL-I	  9	*tab* *Tab*
							*linefeed*
<NL>		soremelés		CTRL-J	 10 (used for <Nul>)
<FF>		lapdobás		CTRL-L	 12	*formfeed*
<CR>		kocsi vissza		CTRL-M	 13	*carriage-return*
<Return>	azaz <CR>				*<Return>*
<Enter>		azaz <CR>				*<Enter>*
<Esc>		escape			CTRL-[	 27	*escape* *<Esc>*
<Space>		szóköz				 32	*space*
<lt>		kevesebb-mint		<	 60	*<lt>*
<Bslash>	backslash		\	 92	*backslash* *<Bslash>*
<Bar>		cső		|	124	*<Bar>*
<Del>		törlés				127
<CSI>		command sequence intro  ALT-Esc 155	*<CSI>*
<xCSI>		CSI (GUIban írva)			*<xCSI>*

<EOL>		sor-vége (lehet <CR>, <NL> or <CR><NL>,
		rendszer és 'fileformat' függő)		*<EOL>*

<Up>		kurzor-fel			*cursor-up* *cursor_up*
<Down>		kurzor-le			*cursor-down* *cursor_down*
<Left>		kurzor-bal			*cursor-left* *cursor_left*
<Right>		kurzor-jobb			*cursor-right* *cursor_right*
<S-Up>		shift-kurzor-fel
<S-Down>	shift-kurzor-le
<S-Left>	shift-kurzor-bal
<S-Right>	shift-kurzor-jobb
<C-Left>	control-kurzor-bal
<C-Right>	control-kurzor-jobb
<F1> - <F12>	funkció billentyűk 1-től 12-ig	*function_key* *function-key*
<S-F1> - <S-F12> shift-funkció billentyűk 1-től 12-ig 	*<S-F1>*
<Help>		súgó
<Undo>		visszavonás
<Insert>	beszúrás
<Home>		home				*home*
<End>		end				*end*
<PageUp>	page-up				*page_up* *page-up*
<PageDown>	page-down			*page_down* *page-down*
<kHome>		keypad home (upper left)	*keypad-home*
<kEnd>		keypad end (lower left)		*keypad-end*
<kPageUp>	keypad page-up (upper right)	*keypad-page-up*
<kPageDown>	keypad page-down (lower right)	*keypad-page-down*
<kPlus>		keypad +			*keypad-plus*
<kMinus>	keypad -			*keypad-minus*
<kMultiply>	keypad *			*keypad-multiply*
<kDivide>	keypad /			*keypad-divide*
<kEnter>	keypad Enter			*keypad-enter*
<kPoint>	keypad Decimal point		*keypad-point*
<k0> - <k9>	keypad 0 to 9			*keypad-0* *keypad-9*
<S-...>		shift-billentyű			*shift* *<S-*
<C-...>		control-billentyű			*control* *ctrl* *<C-*
<M-...>		alt-billentyű or meta-billentyű	*meta* *alt* *<M-*
<A-...>		ugyanaz, mint <M-...>			*<A-*
<D-...>		command-billentyű (Macintosh only)	*<D-*
<t_xx>		key with "xx" entry in termcap
-----------------------------------------------------------------------

Megjegyzés: A shift-kurzor, súgó, visszavonás nem minden terminálon érhetőek
el.  Amiga rendszeren a shift + F10 CSI kódot produkál, amely már szerepelhet
egy másik kontextusban.

Megjegyzés: A del billentyűnek két kódja lehet. A 127 decimális ASCII minden
esetben támogatott. Előfordulhat, hogy a del billentyű más értéket küld, ekkor
a termcap entry "kD" értéke lesz a mérvadó. Mindkét érték hatása azonos. Lásd:
|:fixdel|.

Megjegyzés: ???The keypad keys are used in the same way as the corresponding
"normal" keys.  For example, <kHome> has the same effect as <Home>.  If a
keypad key sends the same raw key code as its non-keypad equivalent, it will
be recognized as the non-keypad code.  For example, when <kHome> sends the
same code as <Home>, when pressing <kHome> Vim will think <Home> was pressed.
Mapping <kHome> will not work then.

								*<>*
Példákat gyakran lehet látni <> jelöléssel ellátva. Néha pusztán csak azért,
hogy egyértelműbb legyen, hogy mit kell beírni, azonban képezhetik parancs
részét is (mint a ":map" parancsnál), a szabály:
 1.  Bármely nyomtatható karakter beírható, kivéve "\" és "<".
 2.  A visszaperjelet a "\\" reprezentálja, dupla visszaperjel, vagy
     "<Bslash>".
 3.  A valós '<' valós alakja "\<" vagy "<lt>". Ha nem merül fel a kérdés,
     hogy melyiket használjuk, akkor használhatunk '<'-t.
 4.  "<key>" egy speciális billentyűt vár. A jelölőrendszert a fentebb
     említett táblázat már tartalmazza. Néhány példa:
	   <Esc>		Escape billentyű
	   <C-G>		CTRL-G
	   <Up>			kurzor fel billentyű
	   <C-LeftMouse>	Control- bal egérgomb
	   <S-F11>		Shift+F11
	   <M-a>		Alt- a  ('a' with bit 8 set)
	   <M-A>		Alt- A  ('A' with bit 8 set)
	   <t_kd>		"kd" termcap bejegyzés (kurzor le)
    Bár kombinációt definiálhatunk így is: <M-{char}>, ahol {char} multibyte
    karakter, a Vim valószínűleg nem fogja tudni beazonosítani a byte
    szekvenciát.

Ha a teljes <> jelölést szeretnéd használni a Vimben, akkor a '<' flaget el
kell távolítani a 'cpoptions'-ból. (ha a 'compatible' nincs beállítva, akkor
ezt már nem kell megtenni).

	:set cpo-=<

A <> jelölést <lt> segítségével escapeli kell, ha a szimbólumokat, mint
szöveges karaktert szeretnénk használni. Visszaperjellel is escapelhetünk, de
csak akkor ha a 'cpoptions' nem tartalmazza a 'B' flaget.

Például CTRL-H mappelése a következő hat karakterre: "<Home>" >

	:imap <C-H> \<Home>
	:imap <C-H> <lt>Home>

A második sorban bemutatott példa minden esetben működik. A '>' azért nincs
escapelve, mert az első escapelt '<' miatt nem utasításként fog kiértékelődni.
"<lt>" használata remapekben: >

	:map <C-L> <lt>lt>

Remappeléskben, rövidítésekben (abbreviations) és menü parancsokban a példák
egy az egyben kimásolhatóak és beilleszthetőek. Éppenséggel be is gépelhetőek
beleértve a '<' karaktert. Ez a módszer NEM működik más parancsoknál, például
":set" és ":autocmd"!.

==============================================================================
5. Módok, bevezetés				*vim-modes-intro* *vim-modes*

A Vimnek hét ALAP módja van:

					*Normal* *Normal-mode* *command-mode*
Normál mód		Normál módban érvényesek a normál módú parancsok. A
			szerkesztő indításával a Vim automatikusan normál
			módba kerül. (Az 'insertmode' beállításával ez
			felülbírálható. Parancsmódként is hivatkozhatunk rá.

Vizuális mód		Gyakorlatilag ugyan az, mint a normál mód. A kurzor
			mozgatásával szövegrészt jelölhetünk ki. Ha a
			parancshoz nem társul elmozdulás, akkor a kiadott
			parancs a kijelölt szövegrészen hajtódik végre. Lásd
			|Visual-mode|.
			Ha a 'showmode' be van kapcsolva, akkor "-- VISUAL --"
			üzenet jelenik meg a képernyő alján.

Kiválasztó mód		Az MS-Windowshoz talán a legjobban hasonlító mód.
			Nyomtatható karakter gépelése esetén a kijelölt szöveg
			eltűnik és a szerkesztő Insert módra vált. Lásd:
			|Select-mode|.
			Ha a 'showmode' be van kapcsolva, akkor "-- SELECT --"
			üzenet jelenik meg a képernyő alján.

Beszúrás mód		Beszúrás módban a leütött karakter megjelenik a kép-
			ernyőn. Lásd: |Insert-mod|.
			Ha a 'showmode' be van kapcsolva, akkor "-- INSERT --"
			üzenet jelenik meg a képernyő alján.

Paranacs mód		Azaz command-line módban (vagy Cmdline-mód, command-mód)
			egy sornyi szöveget írhatunk be az ablak alján előtűnő
			sávban. A prompt meghatározza a művelet jellegét:
			Ex parancsok ":", keresés "?" és "/", szűrőparancsok
			"!". |Cmdline-mode|.

Ex mód			Ugyan az, mint a parancs mód, viszont a parancs
			végrehajtása után nem vált vissza normál módra, azaz
			maradunk továbbra is Ex módban. Parancsok limitált
			szerkesztése. |Ex-mode|.

Terminál mód		Interakció terminálban futó munkafolyamatokkal. A
			beírt karaktereket a munkafolyamat megkapja, a folyamat
			kimenete megjelenik a terminálablakban. Itt olvashatsz
			arról, hogy hogyan tudsz más módokba váltani |terminal|.

További hét KIEGÉSZÍTŐ mód létezik, melyek az ALAP módokból származtathatóak:

				*Operator-pending* *Operator-pending-mode*
Operator-pending mód	Normál mód, azonban az operátor kiadása után a parancs
			nem fut le addig, amíg egy elmozdulással {motion} meg
			nem határozzuk a szerkeszteni kívánt szöveg hosszát.

Csere mód		Speciális Insert mód, melynél minden bevitt karakter
			felülírja a már létező szöveget. A <tab> ebben a
			módban egy karakternek számít. Lásd |Replace-mode|.
			Ha a 'showmode' be van kapcsolva, akkor "-- REPLACE --"
			üzenet jelenik meg a képernyő alján.

Virtuális Csere mód	Speciális csere mód. A <tab> ebben a módban a 'tabstop'
			által meghatározott karakternek számít. Lásd:
			|Virtual-Replace-mode|.
			Ha a 'showmode' be van kapcsolva, akkor "-- VREPLACE --"
			üzenet jelenik meg a képernyő alján.

Beszúró Normál mód	A módot insert módban aktiválhatjuk CTRL-O leütésével.
			Gyakorlatilag teljes értékű normál mód, de a parancs
			lefutása után a szerkesztő automatikusan visszatér
			insert módba. (lásd |i_CTR-O|).
			Ha a 'showmode' be van kapcsolva, akkor "-- (insert) --"
			üzenet jelenik meg a képernyő alján.

Terminál Normál mód	Normál mód használata terminál módban. Nem lehetséges
			a szerkesztés. Beszúró parancsok átváltják a
			szerkesztőt munkafolyamat módra (terminal-job mode).

Beszúró Vizuális mód	Insert Visual Mode. Akkor vált szerkesztő erre a módra,
			ha insert módban CTRL-O megnyomásával aktiváljuk a
			beszúró normál módot, majd a "v", "V", CTRL-V-vel egy
			tartományt jelölünk ki. A vizuális mód végeztével a Vim
			visszatér beszúró módba.
			Ha a 'showmode' be van kapcsolva, akkor:
			"-- (insert) VISUAL --" üzenet jelenik meg a képernyő
			alján.

Beszúró Kiválasztó mód	Insert Select Mode. Aktivizálódik, ha beszúró módból
			aktiváljuk a kiválasztó módot. Például, egérrel, vagy
			<S-Right> billentyűvel. Ha a kiválasztó (Select) mód
			véget ér, a Vim visszatér beszúró (Insert) módba.  Ha
			a 'showmode' be van kapcsolva, akkor:
			"-- (insert) SELECT --" üzenet jelenik meg a képernyő
			alján.
==============================================================================
6. Módok közötti váltás					*mode-switching*

Ha valamilyen okból kifolyólag nem tudod eldönteni, hogy melyik módban vagy,
üss kétszer <Esc> billentyűt. Az egyetlen kivétel az Ex mód, innen úgy tudsz
kilépni, ha beírod azt, hogy ":visual".
Továbbá, az <Esc> billentyű lenyomásával a képernyő villan, vagy hallhatod a
csengőt megszólalni. Ha CTRL-O-val váltasz módot insert mód után, <Esc> után
hallható a csengő, de a szerkesztő automatikusan visszadob insert módba, ezért
még egyszer <Esc> billentyűt kell ütnöd.

							*i_esc*
		Hová (mód)						    ~
		Normal	Visual	Select	Insert	  Replace   Cmd-line  Ex ~
Honnan (mód)								 ~
Normal			v V ^V	  *4	 *1	   R gR     : / ? !   Q
Visual		 *2		  ^G	 c C	    --	      :       --
Select		 *5	^O ^G		 *6	    --	      --      --
Insert		 <Esc>	  --	  --		  <Insert>    --      --
Replace		 <Esc>	  --	  --	<Insert>	      --      --
Command-line	 *3	  --	  --	 :start	    --		      --
Ex		 :vi	  --	  --	 --	    --	      --

-- Nem lehetséges

*1 Normál módból Insert módba váltás történhet az alábbi parancsokkal:
   "i", "I", "a","A", "o", "O", "c", "C", "s" or S".

*2 Vizuális mód váltása normál módra történhet minden olyan paranccsal, ami
   nem elmozdulás (ezek a parancsok lefutásával normál módba kerülünk),
   illetve "v","V" vagy CTRL-V billentyűkkel (lásd |v_v|), amik csak
   visszatérnek normál módba, mindenféle mellékhatás nélkül.

*3 Parancs módból (command-line) átváltás Normál módra:
   - A parancsok futtatásával (<CR> vagy <NL> billentyű)
   - Az egész sor törlésével (CTRL-U), melyet egy utolsó <BS> követ.
   - CTRL-C vagy <Esc> leütésével, ami kilép a parancs lefutása nélkül.

   Legutolsó esetben, ha az <Esc> karakter definiálva a 'wildchar' opcióban
   ebben az esetben <Esc> elindítja az automatikus kiegészítést, mely figyel-
   men kívül hagyható egy újabb <Esc> leütésével.

*4 Normál módból Kiválasztó (Select) m ódba:
   - szöveg kijelölése egérrel (ha a 'selectmode' opció tartalma "mouse)
   - Shift billentyűt tartva ha nem nyomtatható paranccsal mozgatjuk a kurzort
     ('selectmode' opció tartalma "key" kell, hogy legyen)
   - "v", "V" vagy CTRL-V ('selectmode' tartalma "cmd")
   - "gh", "gH", vagy "g CTRL-H" (lásd |g_CTRL-H|).

*5 Kiválasztó módból (Select mode) Normál módba, nem nyomtatható paranccsal
   való elmozdulás alkalmazásával (Shift billentyűt nem kell használni).

*6 Kiválasztó (Select) módból Normál módba, nyomtatható karakter beütésével.
   A kijelölés törlődik, helyen a beütött karakter jelenik meg.

Ha az 'insertmode' opció be van kapcsolva, akkor a fájlszerkesztés Insert
módból indul.

	*CTRL-\_CTRL-N* *i_CTRL-\_CTRL-N* *c_CTRL-\_CTRL-N* *v_CTRL-\_CTRL-N*

Normál módból váltás bármely módba: CTRL-\ CTRL-N or <C-\><C-N>, melyekkel
egyébként biztosíthatjuk azt, hogy a Vim Normál módban legyen a terminálcsengő
aktiválása nélkül. Ez természetesen nem működik Ex módban. Ha a billentyűket
olyan parancsok után használjuk, melyek argumentumot várnak (ilyen például az
|f| vagy az |m|), a 'ttimeoutlen' opcióban meghatározott időtartamot várnunk
kell.
Ha a fókusz a terminálablakban van, CTRL-\ és CTRL-N Normál módú parancsként
értelmeződik mindaddig, amíg egy szerkesztő parancsot nem futtatunk. Lásd:
|t_CRL-\_CTRL-N|.

	*CTRL-\_CTRL-G* *i_CTRL-\_CTRL-G* *c_CTRL-\_CTRL-G* *v_CTRL-\_CTRL-G*
CTRL-\ CTRL-G or <C-\><C-G> billentyűkkel Insert módba kerülünk, ha
'insertmode' értéke be van állítva, más esetben viszont Normál módba. Ezzel
meggyőződhetünk, hogy a Vim tényleg az 'insertmode' által mutatott módban van
anélkül, hogy ismernénk az érvényben lévő módot.

				    *Q* *mode-Ex* *Ex-mode* *Ex* *EX* *E501*
Q			"Ex" módra váltás. Egy picit olyan, mintha ":" ütnénk
			azzal a különbséggel, hogy:
			- Nem kell minden egyes parancs után ":"-t ütni.
			- A képernyő nem frissül minden egyes parancs után.
			- Mappek és rövidítések nem használhatóak.
			- Nincs Normál módú parancssor szerkesztés.
			Lényegében a sorok a sztenderd módon szerkeszthetőek
			(<Del> ls <BS> töröl, CTRL-U törli az egész sort).

			???
			Vim will enter this mode by default if it's invoked as
			"ex" on the command-line.
			Kilépéshez adjuk ki a "vi" parancsot (|visual|).
			Megjegyzés:
			A Vim korábbi verzióban a "Q" egy másik funkciót
			szolgált (továbbra is elérhető |gq|). Ha a
			|vimrc_example.vim| szkripttel indítod a Vimet, "Q"
			működése a mostani "gq"-val ekvivalens.

					*gQ*
gQ			Váltás "Ex" módba (akárcsak "Q"), működését tekintve
			úgy viselkedik mintha ":" parancsokat adnánk ki egymás
			után. Parancssor-szerkesztés, kiegészítés támogatott.
			Kilépés a ":vi" paranccsal |:visual|.

==============================================================================
7. Az ablak tartalma					*window-contents*

Normal,Insert/Replace módban a képernyő a az aktuális buffer tartalmát
mutatja. WYSIWYG, két kivétellel:
- ha a 'cpoption' tartalmazza a '$' karaktert és a változás soron belüli,
  a szöveg nem kerül azonnal szerkesztésre, ehelyett '$' kerül a legutolsó
  törölt karakter helyére.
- Ha egy ablakba szöveget szúrunk be, a többi ablakban nem frissül a szöveg
  addig, amíg a beszúrás be nem fejeződik.

Az ablaknál szélesebb szövegeket a Vim automatikusan tördeli addig, amíg a
'wrap' opció be van kapcsolva. (lásd az alábbi ábrákat). A 'linebreak' opció
beállítható úgy, hogy a szöveg tördelve legyen akár szóközök által is.

Ha az ablakban az utolsó sor után még van szabad hely, a Vim ezt '~'
karakterrel jelöli a legleső oszlopban, így:

	+-----------------------+
	|some line		|
	|last line		|
	|~			|
	|~			|
	+-----------------------+

Azaz '~' jelöli a buffer végét.

Ha a legutolsó sor nem fér bele az ablakba, a Vim ezt '@' karakterrel jelöli
(ugyancsak a legelső oszlopban) így:

	+-----------------------+
	|first line		|
	|second line		|
	|@			|
	|@			|
	+-----------------------+



Ha a "lastline" flaget tartalmazza a 'display' opció, a '@' karakter nem válik
láthatóvá az ablak bal oldalán. Ha a legutolsó sor nem fér el teljesen, akkor
a sor csak részlegesen lesz megjelenítve és a sor utolsó három karaktere
"@@@"re vált, valahogy így:

	+-----------------------+
	|first line		|
	|second line		|
	|a very long line that d|
	|doesn't fit in the w@@@|
	+-----------------------+

Létezik egy speciális eset, amikor csak egyetlen egy sor nem fér el az
ablakban. A Vim ilyenkor részlegesen megjeleníti az adott sort a kurzor körül.
Speciális karakterrel nincs jelölve az eset, így tudjuk az adott sor minden
részét szerkeszteni.

Ha a '@' karaktert beállíthatjuk a 'highlight' opcióban, így az ilyen típusú
speciális karakterek ( '@' és '~') ki lesznek emelve. Így könnyebben
megkülönböztethetjük a Vim jelölését a valós karakterektől

A 'showbreak' opcióval mi magunk meghatározhatjuk az első oszlopban helyet
foglaló jelölőt.

							*wrap-off*
Ha a 'wrap' opció nincs beállítva, akkor a sorok nem lesznek tördelve és a
szöveg csak azon része lesz megjelenítve, ami belefér az ablakba. Amennyiben a
kurzorral erre a sor olyan részére pozícionálunk, amely nincs megjelenítve,
akkor az ablak a kívánt pozícióra gördül horizontálisan. A metódus előnye,
hogy a rövidebb sorok hűen lesznek reprezentálva és a hosszú sorok
szerkesztésére is adott a lehetőség. A hátrány viszont, hogy a nem látjuk a
hosszabb sorokat teljes terjedelmében. A 'sidescroll' opció beállításával
meghatározhatjuk azt a minimális oszlopszámot, melyet az ablak gördül.

Az összes normál ASCII karakter megjelenik a képernyőn. A <Tab>
helyettesítődik a meghatározott karakterszámmal. Egyéb nem nyomtatható
karakterek helyettesítve lesznek "^{char}"-al, ahol {char} a nem nyomtatható
karakter + hozzáadott 64. Ezért karakter 7 (csengő) "^G" karakterként jelenik
meg.  Karakterek 127 és 160 között le lesznek cserélve "~{char}"-ra, ahol
{char} a karakter - 64. A karakterek egynél több pozíciót is elfoglalhatnak a
képernyőn. A kurzor csak a legelső karakterre pozícionálható.

Ha a 'number' opciót beállítjuk, akkor minden sor előtt meg fog jelenni a sor
sorszáma. Tipp: Ha nem szereted, hogy a tördelt sorokat nehéz megkülönböztetni
a nem tördeltektől, akkor állítsd be a 'showbreak' opciót, hogy nyolc szóközt
mutasson:
	":set showbreak=\ \ \ \ \ \ \ \ "

Ha beállítod a 'list' opciót,  a <Tab> karakterek szóközökre lesz felbontva,
"$" jel fogja jelölni a sorok végét, így könnyebb felkutatni a sorvégi üres
karaktereket.

Command-line módba a buffer tartalma nem frissül mindaddig, amíg el nem
hagyjuk a command-line módot.

Az ablak utolsó sorában státusz és egyéb üzenetek jelennek meg. A
státuszüzenetek csak akkor jelennek meg, ha az alábbi opciók valamelyike be
van állítva:

státusz üzenet			opció	     alaplért.	Unix alapért.	~
aktuális  mód			'showmode'	be	    be
parancs-karakterek		'showcmd'	be	    ki
kurzor-pozíció			'ruler'		ki	    ki

Az aktuális mód lehet "-- INSERT --" vagy "-- REPLACE --", (lásd |showmode|).
A parancs-karakterek az eddig begépelt de még nem futtatott (rész) parancsok.

Lassú terminálon a státuszüzenet kikapcsolása sebesség növekedést idéz elő:
	:set nosc noru nosm

Hiba esetén a Vim hibaüzenettel tájékoztat, melyet legalább egy másodpercig
mutat.

Bizonyos parancsok tájékoztatást adnak, hogy a parancs futtatása hány sort
érintett. A határértéket a 'report' opció változtatásával szabályozhatjuk.  Az
alapbeállítás szerint üzenetet akkor kapunk, ha a szerkesztésink kettő vagy
több sort érintett.

Amigán a Vim CLI módban fut. A címsor tartalma: Vim + fájlnév. Az ablakméret
változtatásakor az ablak újrarajzolódik. A méretét tetszés szerint meg lehet
választani, de ha túl kicsi lesz, akkor egy sor sem fog kiférni (beleértve
hiba és státuszüzenetek). Az ablakméret legyen legalább 40 karakter, így a
legtöbb üzenet elolvasása nem fog gondot okozni.

A legtöbb Unix rendszeren a Vim tökéletesen kezeli az ablak átméretezését

==============================================================================
8. Definíciók						*definitions*

  buffer		(buffer) Általában fájlból beolvasott szöveges sorok.

  képernyő		(Screen) A képernyő összes területe, melyben fut a Vim.
			Ez általában terminál-ablak.

  ablak			(window) Nézet a bufferre, egy bufferhez több ablak is
			tartozhat.

A képernyő egy, vagy több ablakot tartalmazhat, minden ablak rendelkezik saját
állapotsorral. A command-line továbbra is marad a képernyő legalján.

		+-------------------------------+
képernyő	| ablak 1	| ablak 2   	|
		|		|		|
		|	      	|		|
		|= állapotsor  =|= állapotsor  =|
		| ablak 3			|
		|				|
		|				|
		|==== állapotsor  ==============|
		|paranccsor			|
		+-------------------------------+

A parancssorban is megjelenhetnek üzenetek. Hely hiányában automatikusan addig
görgeti a parancssort, hogy az üzenet elférjen.

Sorok közötti különbségek:

  buffer-sorok		A buffer sorai. Nem feltétlenül egyezik meg a
		        megnyitott fájl tartalmával.

  logikai-sorok		A buffer összecsukható sorai, melyek logikailag csak
			egy sort foglalnak el: "+-- 99 lines folded". A
			blokkok akár több ezer osrt is tartalmazhatnak.

  ablak-sorok		Az ablakban megjelenő sorok: számos logikai sor, 
			sortörés. Hosszuk az ablak méretével egyezik meg, a
			hosszabb sorokat tördelheti a Vim, vagy csonkolhatja.

  képernyő-sorok	Azok a képernyő sorok, melyeket a Vim használ.
			Beleértve az ablakokat elválasztó keretet és
			állapotsorokat. Hosszuk a képernyő maximális hosszával
			egyezhet meg. Ha a command line túl rövidnek bizonyul,
			sortörés lesz alkalmazva, valamint görgetősáv.

buffer sorok	logikai sorok	ablak sorok	képernyő sorok ~

1. egy		1. egy		1. +-- folded   1.  +-- folded
2. kettő	2. +-- folded	2. öt		2.  öt
3. három	3. öt		3. hat		3.  hat
4. négy		4. hat		4. hét 	4.  hét
5. öt		5. hét			5.  === állapotsor ===
6. hat						6.  aaa
7. hét						7.  bbb
						8.  ccc ccc c
1. aaa		1. aaa		1. aaa		9.  cc
2. bbb		2. bbb		2. bbb		10. ddd
3. ccc ccc ccc	3. ccc ccc ccc	3. ccc ccc c	11. ~
4. ddd		4. ddd		4. cc		12. === állapotsor ===
				5. ddd		13. (paranccsor)
				6. ~

==============================================================================
 vim:tw=78:ts=8:noet:ft=help:norl:

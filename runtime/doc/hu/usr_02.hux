*usr_02.txt*	Vim Verzió 8.2.	Utolsó módosítás: 2021 Apr 24

		  Bram Moolenaar: Vim felhasználói kézikönyv

			    A legelső lépések


A fejezet biztosítja azt a minimális információt, mellyel  a Vimben fájlokat
szerkeszthetünk. Abszolút nem optimálisan, de képesek leszünk alapvető
szerkesztésekre. Fektess be egy kis időt és próbáld meg elsajátítani a
parancsokat, hiszen a további fejezetek alapját képezik.

|02.1|	Vim futtatása első alkalommal
|02.2|	Szöveg beszúrása
|02.3|	Navigáció
|02.4|	Karakterek törlése
|02.5|	Vissza és mégis
|02.6|	Egyéb szerkesztő- parancsok
|02.7|	Kilépés
|02.8|	Segítség

Következő fejezet: |usr_03.txt|  Navigáció
    Előző fejezet: |usr_01.txt|  A kézikönyvről
  Tartalomjegyzék: |usr_toc.txt|

==============================================================================
*02.1*	Vim futtatása első alkalommal

A Vim indításához add ki az alábbi parancsot: >

	gvim file.txt

Unix rendszereken ez lehet bármilyen parancsértelmező. Ha MS-Windowst
használsz, akkor nyisd meg a Parancssort.
    Mindegyik esetben a Vim elindul a fájl: file.txt szerkesztésével. Egy üres
ablakon kívül mást nem fogunk látni (hiszen a fájlnak nincs tartalma):

	+---------------------------------------+
	|#					|
	|~					|
	|~					|
	|~					|
	|~					|
	|"file.txt" [Új fájl]			|
	+---------------------------------------+
		('#' a kurzor pozícióját jelöli.)

A tilde (~) azokat a sorokat jelöli, amelyek a fájlnak nem képezik részét. Más
szavakkal, ha a Vim megjelenítette a teljes fájlt, ilyen szimbólummal tölti ki
az üres sorokat, ha a fájl tartalma véget ért.  A képernyő legalsó sora az
állapotsor, ebben a sorban található a fájlnév, illetve információ arról, ha
új fájlt mi hoztuk létre. Az állapotsor üzenetei csak ideiglenesek, a frissebb
információk felülírják a régi üzeneteket.


A VIM parancs

A vim parancs használatával egy új fájlt hozunk létre:
>
	vim file.txt
>
>
a szerkesztés a kiadott parancsablakban történik (ami lehet terminál, vagy
MS-Windows esetén Parancssor). A gvim egy új ablakot hoz létre a
szerkesztéshez, a fájl ugyanúgy néz ki mindkét esetben, de a gvim további
extra funkciókkal van felvértezve (mint például a menüsor). Későbbi
fejezetekben erről bővebben.

==============================================================================
*02.2*	Szöveg beszúrása

A Vim modális szerkesztő. Ez azt jelenti, hogy a program másképpen viselkedik
attól függően, hogy milyen módban vagyunk. Az alapvető két módot Normál és
Insert módnak hívjuk. Normál módban a begépelt karakterek parancsként
értelmeződnek. Insert módban a begépelt karakterek a képernyőre kerülnek.

    A Vim indulásakor a szerkesztő Normál módban van (alapértelmezetten).
Insert módba az "i" (i, azaz "i"nsert) megnyomásával kerülhetünk, ezután
elkezdhetjük a szövegbevitelt. Ne aggódj, ha hibát vétesz, ezeket később ki
fogjuk javítani. Írd be az alábbi szöveget:
>
	iA very intelligent turtle
	Found programming UNIX a hurdle

A "turtle" szó után üss <Enter>-t az új sor létrehozásához. Ha készen vagy, üss
<Esc> billentyűt, így az Insert módból visszakerülhetsz Normál módba. A
szerkesztő ablakában ezt láthatod:

	+---------------------------------------+
	|A very intelligent turtle		|
	|Found programming UNIX a hurdle	|
	|~					|
	|~					|
	|					|
	+---------------------------------------+


MILYEN MÓDBAN VAGYOK?

Ezt bármikor leellenőrizheted ezzel a paranccsal, ami megjeleníti az érvényben
lévő módot az állapotsoron:
>
	:set showmode

A ":"-t beírásával a kurzor a legalsó sorba ugrik. Ide írhatod az úgynevezett
"kettőspontos" parancsokat. A futtatáshoz üss <Enter>-t (minden ilyen típusú
parancsot az <Enter> megnyomásával kell futtatni).
    Ha most "i" billentyűt nyomsz, akkor a Vim az ablak alján --INSERT--
felirattal jelzi az érvényben lévő módot.

	+---------------------------------------+
	|A very intelligent turtle		|
	|Found programming UNIX a hurdle	|
	|~					|
	|~					|
	|-- INSERT --				|
	+---------------------------------------+

Ha <Esc> billentyűvel kerülünk vissza Normal módba, akkor az utolsó sor üres
marad.


A BAJOK MEGELŐZÉSE

A kezdő Vim felhasználók gyakorta összezavarodnak, mert elfelejtik, hogy
milyen módban vannak, vagy esetlegesen olyan billentyűt ütnek le, mellyel
módot váltanak. Normál módba a legegyszerűbben (függetlenül attól, hogy milyen
módban vagyunk) az <Esc> megnyomásával kerülhetünk vissza (ezt akár néha
egynél többször is meg kell ismételjük). A Vim hangjelzést ad, ha már Normál
módban vagy.

==============================================================================
*02.3*	Navigáció

Miután visszatértünk Normál módba, az alábbi billentyűk segítségével tudjuk
léptetni a kurzort:

	h   balra						*hjkl*
	j   le
	k   fel
	l   jobbra

Első ránézésre olyan érzésünk lehet, mintha ezeket a billentyűket teljesen
véletlenszerű módon osztották volna ki. Végül is, hogy néz az ki, hogy az l
billentyű mozdul jobbra? Viszont erre nyomós érveink vannak: A kurzor
mozgatása az egyik leggyakoribb művelet szövegszerkesztési munkálataink során,
ezek pedig a kezdő soron helyezkednek el a jobb kezednél. Azaz már eleve
adott, hogy ezeket a navigációs műveleteket tudjuk leggyorsabban kiadni
(feltéve persze, ha gépírás alkalmazásával mind a tíz ujjunkat igénybe vesszük
a gépelés során).

	Megjegyzés:
	A kurzort a nyilak segítségével is léptethetjük. Ha ezzel a
	lehetőséggel élsz, akkor a szerkesztési sebességedet nagyban
	csökkented, hiszen a jobb kezednek el kell hagyni a kezdősort, majd
	pedig vissza kell térnie. Ez akár óránként több százszor is
	megtörténhet, ami szignifikáns időmennyiséget tehet ki.
	    Abban az esetben, ha a billentyűzetről hiányoznak a nyilak, a hjkl
	módszer kiválóan alkalmazható keresgélés nélkül.

A memorizálásnak egy módja lehet: a h bal oldalon van, az l a jobbon, a j
lefelé mutat. Vizuálisan:
>
		      k
		   h     l
		      j

Megtanulásuknak a legegyszerűbb módja, ha egyszerűen használjuk őket. Az "i"
billentyűvel szöveget szúrunk be, normál módban a hjkl billentyűkkel
navigálunk a fájl egy másik pontjára, ahol ismét szöveget szúrunk be. Ne
felejts el <Esc> billentyűt nyomni a Normál módba visszalépéshez. A
|vimtutor|-ban ezt a mechanizmust interaktívan nagyon szépen begyakorolhatjuk.

Japán felhasználók részére Hiroshi Iwatani az alábbit javasolta:

			Komsomolsk
			    ^
			    |
	   Huan Ho	<--- --->  Los Angeles
	(Sárga folyó)	    |
			    v
			  Java (a sziget, nem a programnyelv)

==============================================================================
*02.4*	Karakterek törlése

Karakterek törléséhez vidd a kurzortó a törölni kívánt karakterre, majd üss
"x" billentyűt. (A régi írógép módszer megtestesítője, amikor törlendő
karakterre egész egyszerűen csak egy x-et ütöttek, vagy xxxxx). Vidd a kurzort
a sor elejére és üss hét "x" karaktert (xxxxxxx), ennek hatására "A very "
szavak törlődnek. Az eredménynek az alábbi lesz:

	+---------------------------------------+
	|intelligent turtle			|
	|Found programming UNIX a hurdle	|
	|~					|
	|~					|
	|					|
	+---------------------------------------+

Most már beszúrhatsz egy új szöveget, például gépeld ezt:
>
	iA young <Esc>

Ezzel belépsz Insert módba ("i"), és begépeled "A young" szövegrészletet, az
<Esc> billentyű pedig kilép az Insert módból. A végeredmény:

	+---------------------------------------+
	|A young intelligent turtle		|
	|Found programming UNIX a hurdle	|
	|~					|
	|~					|
	|					|
	+---------------------------------------+


SOR TÖRLÉSE

A teljes sor törléséhez használd a "dd" parancssort. A törölt sor utáni sorok
eggyel feljebb mozdulnak, hogy kitöltsék a keletkezett űrt:

	+---------------------------------------+
	|Found programming UNIX a hurdle	|
	|~					|
	|~					|
	|~					|
	|					|
	+---------------------------------------+


SORTÖRÉS TÖRLÉSE

A Vimben sorokat egyesíthetsz ("J" azaz: join, ami nem tesz mást, mint törli a
két sor között elhelyezkedő új sor karaktert.
   Tételezzük fel, hogy az alábbi két sor van a szerkesztőnkben:

	A young intelligent ~
	turtle ~

Vigyük az első sorra a kurzort és üssünk "J" billentyűt:

	A young intelligent turtle ~

==============================================================================
*02.5*	Vissza és mégis

Tételezzük fel, hogy túl sok karaktert töröltünk. Nos, beírhatjuk őket újra,
de ennél létezik egy lényegesen egyszerűbb módszer. Az "u" parancs (Undo)
visszavonja a legutolsó szerkesztést. Vizsgáljuk meg közelebbről: "dd"
alkalmazásával töröltünk egy sort, az "u" parancs visszahozza.
    Másik példa: vidd a kurzort a sor elején lévő A karakterre:

	A young intelligent turtle ~

Üsd le az alábbi billentyűket xxxxxxx "A young" szövegrészlet törléséhez:

	 intelligent turtle ~

Üss "u" billentyűt és vond vissza a legutolsó szerkesztést. Mivel a törlés
("x") parancs egyetlenegy karaktert törölt, így egy "u" parancs hatására
visszakapjuk a legutolsó törölt g karaktert.

	g intelligent turtle ~

A következő "u" parancs az azt megelőző karaktert fogja visszaállítani:

	ng intelligent turtle ~

A következő "u" visszaállítja az u karaktert és így tovább:

	    ung intelligent turtle ~
	   oung intelligent turtle ~
	  young intelligent turtle ~
	  young intelligent turtle ~
	A young intelligent turtle ~

	Megjegyzés:
	Ha az "u" parancsot kétszer adtad ki és eredményként az utolsó példa
	legutolsó sorát kapod, akkor a Vim Vi kompatibilis módban van. Itt
	nézheted meg, hogy hogyan korrigálhatod ezt ki: |not-compatible|.
	    Ez a leírás a Vim módszer működését tárgyalja, ha szereted a régi
	öreg Vi módszert, semmi probléma, de ez esetben fokozottan kell
	ellenőrizned a szöveget a működésbeli eltérések végett.


MÉGIS

Ha túl sok szerkesztést vonsz vissza, akkor CTRL-R megnyomásával a visszavont
szerkesztést mégis újraalkalmazhatod, magyarul a visszavonásnak a
visszavonása.  Hogy lássuk működés közben, üss kétszer CTRL-R-t. Az "A"
karakter és a követő szóköz eltűnik:

	young intelligent turtle ~

A visszavonásnak létezik egy speciális módja, az "U" (sor visszavonás)
parancs.  Az "U" parancs visszavonja a kurzor alatt lévő sor összes
szerkesztését.  Kétszeri bevitelkor "UU", csak az egyik értelmeződik, míg a
másik érvényét veszti.

	A very intelligent turtle ~
	  xxxx				Törli: very

	A intelligent turtle ~
		      xxxxxx		Törli: turtle

	A intelligent ~
					Sor visszaállítása: "U"
	A very intelligent turtle ~
					"U" visszavonása  "u"-val
	A intelligent ~

Az "U" parancs önmagában értelmezve is változás, ezért vissza is vonható "u"
paranccsal, illetve mégis alkalmazható CTRL-R paranccsal. Ez elég zavarónak
tűnhet. Ne aggódj, az "u" és a CTRL-R parancsokkal bármilyen szituációt le
tudsz kezelni. A témában többet ebben a szekcióban olvashatsz |32.2|.

==============================================================================
*02.6*	Egyéb szerkesztő- parancsok

A szöveg szerkesztéséhez még számos parancs áll a rendelkezésre. Lásd |Q_in|
és alább. Összefoglalva ezek a leggyakoribbak:j


HOZZÁFŰZÉS

Az "i" parancs a kurzor alatt lévő karakter elé illeszt be. Ez rendben van, de
mi van akkor, ha nekünk éppen a sor végére kell valamit beszúrnunk? Erre való
a hozzáfűzés parancs "a" (azaz, Append).
    Például változtassuk meg az alábbi sort:

	and that's not saying much for the turtle. ~
erre:
	and that's not saying much for the turtle!!! ~

Pozícionáljuk a kurzort a sor végén lévő "." karakterre, majd "x" segítségével
töröljük azt. A kurzor így maradni fog a sor végén, majd gépeljük be:
>
	a!!!<Esc>

A sor végi három felkiáltójel hozzáadásához:

	and that's not saying much for the turtle!!! ~


ÚJ SOR NYITÁSA

Az "o" parancs egy új üres sort hoz létre az aktuális sor alatt, majd a
szerkesztőt Insert módra állítja, így már nem maradt más dolgunk, mint beírni
az új sor tartalmát.
    Tételezzük fel, hogy a kurzor az első sorban tartózkodik (itt azonban
akárhol):

	A very intelligent turtle ~
	Found programming UNIX a hurdle ~


Most nyissunk új sort az "o" (azaz Open) paranccsal, gépeljük:
>
	oThat liked using Vim<Esc>

A végeredmény az alábbi:

	A very intelligent turtle ~
	That liked using Vim ~
	Found programming UNIX a hurdle ~

Az "O" parancs (nagybetűs O) az aktuális sor fölé nyitja az új sor.


MENNYISÉG (COUNT) HASZNÁLATA

Tegyük fel, hogy fel szeretnél ugrani kilenc sort, amit megtehetsz így:
"kkkkkkkkk", vagy elláthatod mennyiséggel a parancsot, például "9k". A
parancsok jellemzően elláthatók ilyen mennyiségi jelzővel. Emlékezzünk vissza,
néhány sorral feljebb a három felkiáltójeles példára, amit így hajtottunk
végre: "a!!!<Esc>". Ennek egy rövidebb módja "3a!<Esc>". A mennyiségi jelzővel
ellátott parancsokat a Vim megismétli (a bevitt értékkel). Ennek alapján, a
három karak- tert törlő parancsot is leegyszerűsíthettük volna: "3x". A
mennyiségi jelző mindig megelőzi a parancsot, melyre hatással van.

==============================================================================
*02.7*	Kilépés

Kilépéshez használd a "ZZ" parancsot. A parancsi automatikusan menti a fájlt.

	Megjegyzés:
	A Vim más szövegszerkesztőkkel ellentétben nem készít biztonsági
	másolatot. A "ZZ" parancs kiadása után nincs visszaút. A biztonsági
	mentés beállításairól bővebben itt olvashatsz: |07.4|.


A VÁLTOZTATÁSOK ELDOBÁSA

Sokszor kerülhetsz abba a helyzetbe, hogy a szerkesztés után rádöbbensz, jobb
lenne az elejéről kezdeni a szerkesztést (mentetlenül bezárni a fájlt). Ne
aggódj, a Vim képes erre ezzel a paranccsal:
>
	:q!

Ne felejts el <Enter>-t ütni a parancs begépelése után.

Ha érdekelnek a részletek, az előbb említett kilépési parancs három részből
áll.  Az első rész a kettőspont ":", mely megnyitja a Command-line módot, a
második rész a q parancs, mellyel kilép a szerkesztő, a harmadik és utolsó
rész az úgynevezett "felülíró módosító" (!).
    A felülíró módosítóra ebben az esetben szükség van, mivel Vim
alapértelmezetten nem veti el a változtatásokat. Ha csak ennyit írtunk volna
":q", akkor egy hibaüzenet jelent volna meg:

	E37: No write since last change (use ! to override) ~

A módosító alkalmazásával gyakorlatilag ezt mondjuk a szerkesztőnek: "Tudom
amit csinálok badarságnak tűnhet, de ezt tényleg szeretném"

Ha a szerkesztést a Vimben szeretnéd folytatni, akkor használd a ":e!"
parancsot, mely betölti újra a fájlt a legutolsó mentett állapota szerint.

==============================================================================
*02.8*	Segítség

A Vim helpfájljai tartalmaznak mindent, melyre a használat során szükséged
lehet (még többet is), ennek ellenére ne légy szégyenlős!

Ha pontosan tudod, mit szeretnél, help fájlok rendszerint jobb lehetőségnek
bizonyulnak, mint például a Google.

A beépített help fájlok rendelkeznek azzal az előnyös tulajdonsággal, hogy
kifejezetten a Te Vim verziójáról szólnak. Későbbiekben a help parancsot nem
láthatod, de itt az általános formátuma:

Általános segítség megnyitása:
>
	:help

Használhatod a billentyűzeted <F1> billentyűjét, vagy a dedikált <Help>
billentyűt (ha ez létezik).
    A ":help" parancs argumentum nélkül az általános problémákra vonatkozó
oldalt nyitja meg.
A Vim készítői nagyon okosan (vagy szimplán csak lustaságból) a help rendszert
úgy alakították ki, hogy az maga is a szerkesztőben nyíljon meg, így az összes
tanult navigációs parancsot használhatod. Ezért a j fel, a k le, a h balra, az
l jobbra mozog.
    Az ablak bezárásához használhatod az előzőleg ismertetett "ZZ" parancsot.
Ez csak bezárja az ablakot, de a Vimet nem.

A pipe "|" karakterek közötti szavak linkeknek minősülnek (például |help|).
Így könnyedén megnyithatjuk az adott szóhoz tartozó dokumentációt. Állj rá a
kurzorral a linkelt szavak egyikére, majd nyomj CTRL-]-t (taghez ugrás) és már
az adott résznél is vagy. (A Vim terminológia szerint a hyperlinkek tageknek
minősülnek a Vimben). Tehát a CTRL-] a kurzor alatt lévő taghez ugrik.
    Néhány ugrás után talán már vissza is szeretnél navigálni. A CTRL-T-vel
tudod végrehajtani (pop stack), ami visszalép az előző pozícióra. CTRL-O
(ugrás egy régebbi pozícióra) szintén nagyon szépen működik.
    A help fájlok első sorában található a jelölés (*help.txt*). A "*" közötti
karakterek azt a szót definiálják, melyre a link mutat.
    Lásd |29.1| a tag használat részleteiről.

A help parancs szintaktikája meghatározott tárgy esetén:
>
	:help {tárgy}

Például az "x" parancs dokumentációjának lekérése:
>
	:help x

Törlési parancsok:
>
	:help deleting

A Vimben található összes parancs szójegyzékének megjelenítése:
>
	:help index

Ha olyan paranccsal kapcsolatban szeretnél segítséget kérni, melyhez egyéb
billentyűk is használatosak (például CTRL-A), "CTRL-" prefixummal kell ellátni
a keresés tárgyát:
>
	:help CTRL-A

A Vimben számos módban adhatunk ki parancsokat, ha ezt nem jelöljük, mindig a
normál módú parancs leírását kapjuk meg. Az alábbi parancs a CTRL-H normál
módú működésére vonatkozik:
>
	:help CTRL-H

Normáltól eltérő mód esetén előtaggal jell jelölni a kívánt módot. Ha az
Insert módú működésre vagy kíváncsi, akkor "i_" prefixumot kell használni.
CTRL-H esetében az alábbiak szerint módosul a parancs:
>
	:help i_CTRL-H

A Vim elindításánál használt argumentumok (ezek "-"-lel kezdődnek, mint
például -t). Annak kiderítésére, hogy -t miképpen befolyásolja a működést, az
alábbi parancs ad választ:
>
	:help -t

A Vim számtalan opciót nyújt a szerkesztő testreszabására. Ezeket az opciókat
aposztrófok közé kell zárni. Példa a 'number' opció keresésére:
>
	:help 'number'

Az összes prefixumot tartalmazó táblázat itt érhető el: |help-summary|.

A speciális billentyűket kisebb és nagyobb jelek közé kell zárni. Példa a nyíl
billentyű keresésére Insert módban:
>
	:help i_<Up>

Ha egy olyan hibaüzenetet látsz, melyet nem tudsz értelmezni, akkor így tudsz
több információt szerezni a probléma okáról:

	E37: No write since last change (use ! to override) ~

Azonosításhoz add át a hiba kódját paraméterként:
>
	:help E37


Összegzés: 					*help-summary*  >

1) A CTRL-D segítségével (a parancs néhány karaktere után) a Vim megjeleníti
   az összes illeszkedő parancsot:
   A Tab billentyű kiegészít: >

	:help some<Tab>

<  A Vim helpfájljainak értelmezése: >

	:help helphelp

2) Kövesd a linkeket, hogy többet megtudj az adott témakörről. A
   dokumentációról átválthatsz a kézikönyvre, ami kevésbé részletes és a
   működést inkább felhasználói szemszögből mutatja be:
>
	:help pattern.txt
<
   Itt láthatod a felhasználói kézikönyv vonatkozó sorszámát |03.9| és a
   |usr_27.txt| linket a bevezetőben.


3) Az opciók aposztrófok közé vannak zárva.  Példa a 'list' opció segítségének
   megtekintésére:
   >
	:help 'list'

<   Amennyiben egészen biztosan tudod, hogy mit keresel, kereshetsz itt is: >

	:help options.txt

<   a fájl tartalmazza az összes parancs leírását, melyen RegExp keresést
   végezhetsz, például textwidth.
   Egyes opciók saját névtérrel rendelkeznek: >

	:help cpo-<letter>

<  a 'cpoptions' opciójának kereséséhez helyettesítsd be a betű helyére az
  opció nevét. >
<  példa a 'cpoptions' névterének a használatára: >

	:help cpo-;

<   Ugyanezen opció a  'guioptions' névtérben: >

	:help go-<letter>

4) A Normál módú parancsokat nem kell prefixummal ellátni. A "gt" parancs
   Normál módban: >

	:help gt

5) Az Insert mód parancsaihoz i_ prefixumot kell használnunk.  Szó törlése
   insert módban: >

	:help i_CTRL-W

6) A Visual mód parancs prefixuma a v_.  A kijelölés másik végéhez ugorhatunk
   Visual módban: >

	:help v_o

7) A Command-line argumentumok prefixuma a c_.  % használata argumentumként: >

	:help c_%

8) Az Ex-parancsok minden esetben ":"-al kezdődnek. "s" parancs értelmezése Ex
   módban: >

	:help :s

9) A fejlesztő környezet (debug mód) egyes parancsai: ">".  "cont" megtekintése
   debug módban: >

	:help >cont

10) Billentyűkombinációk.  Általában a módokért csak egyetlen egy karakter a
    felelős. Például: >

	:help i_CTRL-X

<    megtekinthetjük a CTRL-X parancs-család Insert mód specifikus leírását,
    az automatikus kiegészítéssel pedig egyéb dolgokat is tehetünk

    Megjegyzés:
    Bizonyos dolgok azonban nem változnak, ilyen például a CTRL billentyű
    jelölése. A CTRL mindig CTRL marad. Normál módú parancsok esetén nincs
    prefixum, a CTRL- szót pedig a parancs billentyűje követi, CTRL-<letter>,
    tehát: >

	:help CTRL-W

<    Ellentétben, >

	:help c_CTRL-R

<   leírja, hogy mit csinál CTRL-R Command line módban, és >

	:help v_CTRL-A

<    a vizuális módú inkrementációról beszél >

	:help g_CTRL-A

<   a "g<C-A>" parancs dokumentációja  (például, amikor "g" billentyűt ütsz
   <CTRL-A> előtt. Itt a "g", mint Normál módú parancsként értelmezendő, "g"
   sohasem áll önmagában, mindig vár egy másodlagos utasításra (hasonló a "z"
   parancsokhoz). >


11) A RegExp keresések / jellel kezdődnek. Példa az "\+" jelző Vim RegExpbeni
    kereséséhez >

	:help /\+

<    Ha többet szeretnél megtudni a reguláris kifejezésekről, kezdd az olvasást
    itt: >

	:help pattern.txt

12) A Regiszterek mindig "-el kezdődnek. To find out about the special ":"
    register: >

	:help quote:

13) A Vim szkript elérhető >

	:help eval.txt

< A nyelv bizonyos aspektusai ebben a formában érhetők el :h expr-X ahol "X"
egy szimpla karakter, például: >

	:help expr-!

<megjeleníti a "!" (Nem) operátor leírását a Vim szkriptet illetően.

    Továbbá még fontos lehet: >

	:help function-list

<    az összes függvény rövid leírása. A Vim szkriptekhez tartozó
    függvényekhez minden esetben "()" kell tennünk a függvény neve után, tehát: >

	:help append()

<    ami bemutatja, hogy hogyan használhatjuk a az append függvényt a Vim
    szkriptben (nem az aktuális bufferben). >

14) A mappelésekről itt esik szó bővebben: |map.txt|. >

	:help mapmode-i

<    az |:imap| parancs dokumentációja. Kategória alapú keresés :map-topic,
    mely listázza a az adott alkategória mappeléseit, például: >

	:help :map-local

<     a buffer lokális mapjei >

	:help map-bar

<     a '|' működését a mappekben >

15) Parancsdefiníciók :h command-topic, azaz >

	:help command-bar

<    '!' argumentum kezelése egyedi parancsokban >

16) Az ablakkezelő parancsok mindig CTRL-W-vel kezdődnek, tehát az
    ablakspecifikus segítség így érhető el :h CTRL-W_betű.  Például: >

	:help CTRL-W_p

<    ami az előző aktív ablakra vált, ha viszont egy tágabb témakörben
    szeretnél olvasni, akkor: >

	:help windows.txt

<    az összes ablakokkal kapcsolatos leírás. >

17) A |:helpgrep| a helpfájlok tartalmára kereshetsz (beleértve az összes
    telepített kiegészítő helpfájlját).  Lásd |:helpgrep| a használatot illetően.
    Témakör keresése: >

	:helpgrep topic

<    A legelső találathoz visz, majd így léphetsz vissza a  következőre: >

	:cnext

<    Az összes találat megtalálható a quickfix ablakban, melyet így nyithatsz
    meg:  >

	:copen

<    A találatok között az  Enter billentyűvel ugorhatsz a szövegrészlethez.  >

18) A felhasználói kézikönyv. Stílusát tekintve felhasználóbarátabb, nem
    tartalmaz annyi információt, mint a dokumentáció. Kezdd itt |usr_toc.txt|,
    mellyel eléred a tartalomjegyzéket (nem meglepő módon): >

	:help usr_toc.txt

< Fuss át rajtuk, valószínű, hogy egyes témák érdekelhetnek. A "Digráfok"
 (Digraph) és a "Speciális karakterek beszúrása a 24. fejezetben található,
 amihez egyrész így is odanavigálhatsz: >

	:help usr_24.txt

<   Viszont, ha tudod a fejezetcímet, akkor nyugodtan használhatod: >

	:help 10.1

<   ami természetesen megnyitja a 10.1 fejezetet a |user_10.txt| fájlban
(makrók rögzítése). >

19) Szövegkiemelés.  Mindig a hl-csoportnév szintaktikát követi. Például: >

	:help hl-WarningMsg

<    a WarningMsg csoportba tartozó kiemelésekről tájékoztat. >

20) A szintaxis-kiemelés névtere: syn-topic.  E.g. >

	:help :syn-conceal

<    a szintaxis kiemelések conceal argumentuma. >

21) A Quickfix parancsok :c paranccsal, míg a local-list :l utasítással
    érhetők el.

22) Az Autocommand események az esemény nevéről lettek elnevezve. >

	:help BufWinLeave

<    Az összes lehetséges esemény: >

	:help autocommand-events

23) A parancssori kapcsolók "-"-el kezdődnek.  A helpfájlok megjelenítéséhez
    használd az -f kapcsolót: >

	:help -f

24) Az opcionális beállítások "+"-el kezdődnek.  Az elrejtés (conceal)
    leírásának megjelenítése: >

	:help +conceal

<25) A fájlspecifikus beállítások a következő formában érhetőek el:
    ft-<filetype>-<functionality>, tehát: >

	:help ft-c-syntax

<    paranccsal a C fájlokhoz tartozó szintaxissal kapcsolatban találunk
    útmutatót.  Példa a php fájlok omni-kiegészítésére: >

	:help ft-php-omni

<    vagy a filetype beépülőre >

	:help ft-tex-plugin

26) A hiba és figyelmeztető-kódok.  Tehát: >

	:help E297

<    pontosan le fogja írni a hiba okát (jelen esetben swap fájl hiba) >

	:help W10

<    figyelmeztető üzenetet kaphatjuk, ha írásvédett fájlt próbálunk
    szerkeszteni.  Esetenként nem található pontos hibaleírás, ekkor viszont a
    hibát kiváltó kódrészletben a hibakód fel van tüntetve. >

	:help E128

<   a |:function| parancs által előidézett hibakódok


==============================================================================

Következő fejezet: |usr_03.txt|  Navigáció

Jogi indformációk: lásd |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:

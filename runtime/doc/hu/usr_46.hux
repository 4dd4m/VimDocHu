*usr_46.txt*	Vim Verzió 8.2.	Utolsó módosítás: 2020 Jun 14

		  Bram Moolenaar: Vim felhasználói kézikönyv

			Beépülők írása Vim9 szkripttel

A Vim9 szkriptnyelvet beépülők írásához tervezték, kifejezetten olyanokra,
amik több fájlra oszlanak fel. A fejezte azt részletezi, hogy a szkriptünket
hogyan tudjuk fájlokba, modulokba szervezni és hogy ezeket részeit hogyan
tudjuk importálni és exportálni.

|46.1|	Bevezetés
|46.2|	Változó deklarálása
|46.3|	Függvények és típusok
|46.?|	Vim9 szkript használata

Következő fejezet: |usr_90.txt|  A Vim telepítése
    Előző fejezet: |usr_45.txt|  Nyelv kiválasztása
  Tartalomjegyzék: |usr_toc.txt|

==============================================================================
*46.1*	Bevezetés				*vim9-script-intro*

A Vim9-et arra tervezték, hogy könnyebb legyen nagyobb terjedelmű szkripteket
írni. Hasonlít a többi szkriptnyelvhez, különösen a Typescripthez. A
függvényeket instrukciókba fordítjuk, melyek gyorsan futtathatóak. Ez teszi a
Vim9-et gyorsabbá, több mint százszor gyorsabbá.

Az alapötlet, hogy a szkriptfájl egyes elemei privát tulajdonsággal
rendelkezik, mely csak a szkriptfájl számára érhető el, az exportált elemeket
viszont a szkriptfájlon kívülről is el lehet érni, melyeket más szkriptfájlok
importálhatnak. A szkript természete miatt pontosan meg tudjuk mondani, hogy
mit hol definiáltunk.

Kezdjük egy példával: a szkript egy függvényt exportál és egy privát függvénye
van: >

	vim9script  " This indicates a Vim9 script file.

	export def GetMessage(): string
	   let result = ''
	   ...
	   result = GetPart(count)
	   ...
	   return result
	enddef

	def GetPart(nr: number): string
	  if nr == 4
	     return 'yes'
	  else
	     return 'no'
	  endif
	enddef

A `vim9script` parancsnak kell legelőször szerepelnie, nélküle csak egyszerű
Vim szkriptnek minősülne.

Az `export def GetMessage(): string` sor az `export` paranccsal kezdődik, mely
azt jelenti, hogy importálható és hívható más szkriptek számára. A def
`Getpart(...` nem kezdődik `export`tal, ez a szkript lokális függvénye, mely csak
ebben a szkriptfájlban használható.

Az `export def GetMessage(): string` sorban észrevehetjük a kettőspontot és a
visszatérési típust. A Vim9-ben a `de`f kulcsszóval definiáljuk a függvényeket,
melyeknek meg kell határoznunk az argumentumait és visszatérési típusát. Így a
Vim a kódot nagy eredményességgel tudja lefordítani. A Getpart függvény az
"nr" argumentumot várja, mely "number" típusú.

Figyeljük meg, hogy az értékadás result = `GetPart(count)` nem használja a
`le`t parancsot. Ennek magyarázata a következő bekezdésben.

==============================================================================
*46.2*	Változók deklarálása				*vim9-declarations*

A Vim9 szkriptekben a változókat a :`let`, vagy a :`const` paranccsal deklaráljuk.
Az értékadás történhet a :`let` nélkül, a változóra nem használhatjuk a :`unlet`
parancsot.

A legtöbb esetben a lépést leegyszerűsítsük és a deklarációt és értékadást egy
műveletben végezzük: >

	let myText = 'some text'
	...
	myText = 'other text'

A változó típusát a kifejezés határozza meg (a példában string). Ha számmal
inicializáljuk a változót, akkor szám típusú lesz: >

	let myNumber = 1234
	...
	myNumber = 0

Ezért később, ha egy stringet szeretnénk a változónak adni értékül, akkor
hibaüzenetet kapunk: >

	let myNumber = 'this fails!'

Szükségünk lehet dinamikus változókra, melyek bármilyen típusú értéket
felvehetnek: >
	
	let myVar: any = 1234
	myVar = 'text also works'

A változókat érték nélkül is deklarálhatjuk, így üres változót kapunk: >

	let word: string
	if condition
	  word = 'yes'
	else
	  word = 'no'
	endif

Amit így rövidíthetünk: >

	let word = condition ? 'yes' : 'no'

==============================================================================
*46.3*	Függvények és típusok

A régi Vim szkript végez típusellenőrzést, de ez futásidőben történik. Az
ellenőrzés pedig nem ritka, hibaüzenet nélkül megy végbe az ellenőrzés. Ezért
létrehozunk egy függvényt, amiről azt hisszük, hogy jól működik, de a
problémát csak akkor látjuk, ha meghívjuk: >

	let s:collected = ''
	func ExtendAndReturn(add)
	   let s:collected += a:add
	   return s:collected
	endfunc

Felfedezed a hibát? Próbáld így: >

	echo ExtendAndReturn('text')

Nulla. Miért? Mert a régi Vim szkriptben az "+=" operátor az argumentumokat
számmá konvertálja és bármely string szám nullát eredményez.

:def-el a típusellenőrzés fordításkor történik, ezért meg kell határoznunk az
argumentumok típusait és a függvény visszatérési típusát. Az argumentumot az
"a:" prefixum nélkül használjuk: >

	let s:collected = ''
	def ExtendAndReturn(add: string): string
	   s:collected += add
	   return s:collected
	enddef
	defcompile

A :defcompile-al a fordítást itt helyben elvégezzük, enélkül a fordítás csak
akkor történne meg, ha a függvény meghívjuk. Hiba esetén pontos üzenetet
kapunk: >

	E1013: type mismatch, expected number but got string

A Vim9 szkriptnyelv szigorú. A "+" operátort csak számokhoz és lebegőpontos
számokhoz használja. A stringek összefűzésére a ".." operátor áll
rendelkezésre, mely kiküszöböli a típuskonverziókból adódó hibalehetőségeket,
így nem érhet bennünket meglepetés. Cseréljük le a függvény első sorát: >

	   s:collected ..= add

Működik.

Ha a függvénynek nincs visszatérési típusa, akkor csak egyszerűen hagyjuk ki
a definíciót: >

	def ReportResult(result: string)
	   echo 'The result is: ' .. result
	enddef

Ez szintén ellenőrizve van, ezért return esetén hibaüzenetet kapunk.

Ebben az esetben nem kell törődnünk a típussal. Ha olyan függvényt szeretnénk
írni, melynek mindegy az argumentum típusa, alkalmazzuk az "any" típust: >

	def Store(key: string, value: any)
	  resultDict[key] = value
	enddef

==============================================================================
*46.?*	Vim9 szkript használata				*source-vim9-script*

Olykor a régi Vim szkripteket a Vim9 szkriptből szeretnéd használni. Például a
.vimrc fájlodban szeretnél inicializálni egy beépülőt. A legjobb, ha ezt az
:importtal végzed el. Például:   >

	import Init as NiceInit from 'myNicePlugin.vim'
	call NiceInit('today')

Így megtaláljuk az exportált "Init" függvény a Vim9 szkript fájlban és
elérhetővé tesszük a szkript lokális elemei között "NiceInit" néven. Az
:import mindig a szkript névterét használja, még akkor is, ha "s:" nincs
megadva. Ha a "myNicePlugin.vim" már be lett töltve, akkor nem töltődik be még
egyszer (akárhányszor is próbáljuk meg betölteni).

Mely elkerüli az elemek globális névtérbe való helyezését (ahol a nevek
ütközése váratlanul hibát eredményezhetne).

Egyes esetekben, például tesztelésnél, csak a Vim9 szkriptet kívánjuk
betölteni. Ez rendben van, de csak a globális elemeket fogjuk elérni. A Vim9
szkriptnek meg fog győződni arról, hogy a globális elemekre egyedi nevekkel
hivatkozunk. Például:   >

	source ~/.vim/extra/myNicePlugin.vim
	call g:NicePluginTest()

==============================================================================

Következő fejezet: |usr_90.txt|  A Vim telepítése

Jogi információk: lásd |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:

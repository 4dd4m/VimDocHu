*usr_24.txt*	Vim Verzió 8.2.	Utolsó módosítás: 2018 Mar 18


		  Bram Moolenaar: Vim felhasználói kézikönyv

			     Beszúrás gyorsan


A szövegek beszúrásnak folyamatát számos billentyűkombináció igyekszik
lerövidíteni és ezzel minimalizálni a hibalehetőségeket. Egészítsd ki a
félkész szavakat, rövidíts le szavakat. Gépelj olyan karaktereket, melyek nem
szerepelnek a billentyűzeteden.

|24.1|	Korrekciók
|24.2|	Egyezések mutatása
|24.3|	Kiegészítés
|24.4|	Beszúrás ismétlése
|24.5|	Másolás másik sorból
|24.6|	Regiszter tartalmának beszúrása
|24.7|	Rövidítések
|24.8|	Speciális karakterek bevitele
|24.9|	Digrammák
|24.10|	Normal módú parancsok

Következő fejezet: |usr_25.txt|  Formázott szövegek szerkesztése
    Előző fejezet: |usr_23.txt|  Egyéb fájlok szerkesztése
  Tartalomjegyzék: |usr_toc.txt|

==============================================================================
*24.1*	Korrekciók

A <BS> billentyű funkcióját már ismerjük.  Egy karakter töröl a kurzor előtt.
A <Del> billentyű pedig egy karaktert töröl a kurzor után (alatt).
   Ha egy egész szót újra szeretnél gépelni, akkor CTRL-W

	The horse had fallen to the sky ~
				       CTRL-W
	The horse had fallen to the ~

Ha valamit nagyon nem úgy szerettél volna, akkor a CTRL-U paranccsal az egész
sort törölheted. Ez megtartja a kurzor utáni karaktereket, illetve a sor eleji
behúzást. A sor első nem üres karakterétől a kurzorig töröl. Ha a kurzorunk a
"fallen" szó "f" betűjén áll, akkor ez történik:

	The horse had fallen to the ~
		      CTRL-U
	fallen to the ~

Ha pár szóval hátrébb fedezted fel a hibát, akkor a kurzorral vissza kell
menned arra a pontra. Például, ezt gépelted:

	The horse had follen to the ground ~

A "follen" szót ki kell cserélned "fallenre". A sor végén álló kurzorral így
korrigálhatod a problémát: >

					<Esc>4blraA

<	kilépés insert módból		<Esc>
	négy szót hátra			     4b
	"o"-ra ugrás			       l
	csere "a"-ra				ra
	vissza Insert módba			  A

Másik módszer: >

		<C-Left><C-Left><C-Left><C-Left><Right><Del>a<End>

<	négy szót hátra		     <C-Left><C-Left><C-Left><C-Left>
	"o"-ra ugrás				<Right>
	"o" törlése					<Del>
	"a" beszúrása					    a
	sor végére ugrás				    <End>

Az utóbbi módszer speciális billentyűt használ a korrigáláshoz, az első pedig
végig Insert módban marad. Ez kellőképpen szemlélteti a nem-modális
szerkesztő munkamenetét. Könnyebb megjegyezni, do sokkal tovább tart
végrehajtani (kezeidet a kurzorbillentyűkhöz viszed, az <End> billentyűért
pedig valószínűleg le kell pillantanod. 
   Ezeket speciális billentyűk arra jók, hogy segítségükkel olyan mappeket
hozzunk létre, ami nem hagyja el az Insert módot. Így pedig az extra gépelés
nem számít.
   Áttekintés az Insert módban használható billentyűkről:

	<C-Home>	fájl kezdetéhez ugrás
	<PageUp>	teljes képernyőt fel
	<Home>		sor kezdetéhez ugrás
	<S-Left>	egy szót balra
	<C-Left>	egy szót balra
	<S-Right>	egy szót jobbra
	<C-Right>	egy szót balra
	<End>		sor végéhez ugrás
	<PageDown>	egy teljes képernyőt le
	<C-End>		fájl végéhez ugrás

Ennél több létezik,  |ins-special-special|.

==============================================================================
*24.2*	Egyezések mutatása

Ha ) karaktert gépelsz, akkor jó lenne látni a párját (. Ehhez add ki az
alábbi parancsot: >

	:set showmatch

Szövegbevitelkor például a "(example)" gépelésénél, rögtön miután ) karaktert
gépelsz, a Vim egy pillanatra felvillantja a párját, melyhez odaugrik, aztán
vissza a kurzor eredeti helyére. 
   Ha nem találja meg a zárókarakter párját ( ( ), akkor hangjelzést ad. Így
tudod, hogy elfelejtettél valamit, vagy túl sokat gépeltél.
   Az ellenőrzés a [] és a {} párokra is kiterjed. Nem kell megvárnod, amíg az
ellenőrzés fut, gépelhetsz tovább.
   A várakozási időt itt beállíthatod 'matchtime'. Például, másfél másodperces
időköz. >

	:set matchtime=15

Az egység 0.1s.

==============================================================================
*24.3*	Kiegészítés

A Vim képes a begépelt szavak kiegészítésére. A szó első részét begépeled,
nyomj CTRL-P-t és a Vim megpróbálja kiegészíteni.
   Tegyük fel, hogy C program szerkesztésekor ezt szeretnéd beírni:

	total = ch_array[0] + ch_array[1] + ch_array[2]; ~

Eddig beírsz mindent:

	total = ch_array[0] + ch_ ~

Itt azt mondod a Vimnek, hogy próbálja kiegészíteni a szót. CTRL-P-t nyomva a
szerkesztő ellenőrzi a fájlt és olyan szavak után néz, melyek az aktuális
szavunk karaktereivel kezdődnek. Ebben az esetben a "ch_" megtalálható a
"ch_array" szóban, azért a parancs után a következőket látod: 

	total = ch_array[0] + ch_array ~

Még kicsivel többet gépelsz és ide jutsz (a sor végén szóköz található):

	total = ch_array[0] + ch_array[1] + ~

Ha most nyomsz CTRL-P-t, akkor a olyan szavak után néz, melyek kiegészíthetnék
a kurzort. Mivel még nem gépeltünk semmit (üres karakter), ezért a Vim elkezd
visszafelé keresni teljes szavak után, az első szót megtalálja visszafelé
"ch_array". CTRL-P újbóli megnyitása a következő egyező szóra egészít ki, ami
a "total". A harmadik CTRL-P billentyűparancsra még hátrébb lép a listában. Ha
elfogynak a szavak, akkor a szerkesztő visszatér az eredeti szóhoz. És így
tovább.

Az előre kereséshez nyomj CTRL-N-t. A mechanizmus teljesen ugyan az, az irány
kivételével. A keresés újrakezdődik a fájl elejétől, így gyakorlatilag a lista
ugyanazokat az elemeket tartalmazza, csak fordított sorrendben.


A Vim hatalmas erőfeszítést tesz, hogy ki tudja egészíteni a szavainkat.
Alapértelmezett beállításokkal az alábbi helyeken keres:

	1. Az aktív fájlban
	2. A többi ablakban megnyitott fájlokon
	3. Egyéb betöltött fájlokon (rejtett buffer)
	4. Olyan fájlokban, melyek nincsenek betöltve (inaktív buffer)
	5. Tag fájlokban
	6. Az összes fájlban #include-olt fájlban.


BEÁLLÍTÁSOK

A keresési sorrendet a 'complete' opcióban megváltoztathatod.

Az 'ignorecase' hatással van a kiegészítésre, ami ha be van állítva, akkor a
program nem tesz különbséget nagy- és kisbetű között.

A kiegészítés speciális beállítása a 'infercase'. Ez hasznos az ilyen jellegű
kereséseknél ('ignorecase' opció bekapcsolt állapotában kell, hogy legyen),
dinamikusan kezeli a nagy- és kisbetűket. Például, ha "For"-t gépelsz, akkor a
Vim megtalálja a "fortunately" szót, de "Fortunately"-ként lesz kiegészítve.


SPECIÁLIS ELEMEK KIEGÉSZÍTÉSE

Ha tisztában vagy a keresés jellegével, akkor ezeket a parancsokat
használhatod:

	CTRL-X CTRL-F		fájlnevek
	CTRL-X CTRL-L		teljes sorok
	CTRL-X CTRL-D		makró definíciók (az #includeolt fájlokban is)
	CTRL-X CTRL-I		aktív és #includeolt fájlok
	CTRL-X CTRL-K		szavak szótár alapján
	CTRL-X CTRL-T		Thesaurus szavak
	CTRL-X CTRL-]		tagek
	CTRL-X CTRL-V		Vim command-line

Az összes parancs esetén megegyezik a navigáció: CTRL-N a következő találatra,
 CTRL-P pedig az előzőre ugrik.
   A parancsokról további részleteket olvashatsz: |ins-completion|.


FÁJLNEVEK KIEGÉSZÍTÉSE

Vegyük például a CTRL-X CTRL-F kombinációt. Ez fájlnevekre keres. Végigjárja a
munkakönyvtárat és az összes egyezést megjeleníti a kurzor előtt.
   Tegyük fel, hogy munkakönyvtáradban az alábbi fájlok találhatóak:

	main.c  sub_count.c  sub_done.c  sub_exit.c

Válts Insert módra és kezdd el gépelni:

	The exit code is in the file sub ~

Ezen a ponton ad ki a CTRL-X CTRL-F parancsot. Keresés kezdődik a
munkakönyvtárban olyan fájlok után, melyek "sub" karakterekkel kezdődnek. Az
első találat a "sub_count.c" fájl. Nem ezt a fájlt szeretted volna, ezért
lépsz a következőre CTRL-N. A következő találat a "dub_done.c". Egy újabb
CTRL-N végül "sub_exit.c"-n landol. Az eredmény:

	The exit code is in the file sub_exit.c ~

Nem számít, hogy milyen formátumú az elérési út, kezdődhet / jellel (Unix),
vagy C:\-vel (MS-Windows), a fájlrendszeren minden egyes fájl megtalálható.
Például, "/u" szó CTRL-X CTRL-F-el "/usr" szóra egészít (csak Unixon):

	the file is found in /usr/ ~

CTRL-N visszatér az eredeti szóra "/u". CTRL-X CTRL-F-el elfogadhatod a
"/usr/" kiegészítést és az alkönyvtárba léphetsz (ez nincs hatással az
munkakönyvtáradra, elérési utak esetén a Vim képes akármilyen mélységig
kiegészíteni).

	the file is found in /usr/X11R6/ ~

Az eredmény csak attól függ, hogy mi található a fájlrendszereden. Az
egyezések betűrend alapján rendezettek.


FORRÁSKÓD KIEGÉSZÍTÉSE

A forráskódok jól struktúráltak, ezáltal a kiegészítésnek egy intelligensebb
változatát teszi lehetővé. Ez a Vimben Omni kiegészítésnek hívjuk. Más
szerkesztőkben pedig intellisensenek, ami ráadásul jogvédett.

Az Omni kiegészítés kombinációja a CTRL-X CTRL-O. Az O ebben a kontextusban
"Omni"-t jelent, így könnyebb megjegyezni. Szemléljük meg a működését:

	{ ~
	    struct foo *p; ~
	    p-> ~

Kurzorunk a "p->" karakterek után áll. CTRL-X CTRL-O. Számos alternatíva közül
választhatsz, melyeket a "struct foo" tartalmaz. Ez picit különbözik a CTRL-P
működésétől, ami bármely szóra egészítene, itt csak "struct foo" tagjai
érvényesek.

Az Omni kiegészítés beállításához be kell állítanunk pár dolgot. Győződj meg
arról, hogy a filetype plugin használata engedélyezve van. Ha a vimrc fájlod
tartalmazza ezt: >
	filetype plugin on
vagy ezt a sort: >
	filetype plugin indent on

Akkor minden rendben. C kódokhoz készítenünk kell egy tag fájlt a 'tags'
opcióval. Részletesen  |ft-c-omni|. Egyéb fájltípusokhoz valami hasonlót kell
csinálnod |compl-omni-filetypes|. Nem működik minden fájltípusnál. Az
'omnifunc' opció értékének ellenőrzésével kiderítheted, hogy mely fájltípusokkal
működik.

==============================================================================
*24.4*	Beszúrás ismétlése

Ha CTRL-A-t ütsz (Insert módban), akkor az utolsó szerkesztésed (Insert mód) 
szövegét automatikusan beilleszti a program.
   Például, van egy fájlod, ami így kezdődik:

	"file.h" ~
	/* Main program begins */ ~

A szerkesztéseddel az "#include "-ot hozzáadod a sor elejére:

	#include "file.h" ~
	/* Main program begins */ ~

A következő sor elejére ugrasz "j^", Insert módra váltasz, ahová ismét beírsz
egy "#include"-ot, de immáron így: >

	i CTRL-A

Mely ezt eredményezi:

	#include "file.h" ~
	#include /* Main program begins */ ~

Az "#include " azért került be a bufferbe, mert CTRL-A megismételte az előző
szerkesztésedet. Már csak annyit dolgod van, hogy beírod a fájlnevet
"main.h"<Enter>:

	#include "file.h" ~
	#include "main.h" ~
	/* Main program begins */ ~

A CTRL-@ parancs ugyan az, mint a CTRL-A, csak ki is lép Insert módból.
Repetitív beillesztések ellenszere.

==============================================================================
*24.5*	Másolás másik sorból

A CTRL-Y parancs (Insert módban) a kurzor fölötti karaktert gépeli.
Csodálatos, ha például az új sor nagy része megegyezik a fentebbivel. Például,
van egy sorod C-ben:

	b_array[i]->s_next = a_array[i]->s_next; ~

A következő sorod javarészt meg fog egyezni ("s_prev" helyett "s_next").
Indíts egy új sort és támaszkodj rá a CTRL-Y billentyűre (14-szer), amíg a
második "_" karakterhez érsz:

	b_array[i]->s_next = a_array[i]->s_next; ~
	b_array[i]->s_ ~

Beírod a különböző szót:

	b_array[i]->s_next = a_array[i]->s_next; ~
	b_array[i]->s_prev ~

CTRL-Y-vel kiegészíted a sor a "next"-ig:

	b_array[i]->s_next = a_array[i]->s_next; ~
	b_array[i]->s_prev = a_array[i]->s_ ~

Most pedig az utolsó "prev;".

A parancs inverze a CTRL-E, ami kurzor alatti lévő karaktert gépeli be.

==============================================================================
*24.6*	Regiszter tartalmának beszúrása

A CTRL-R {register} parancs a hivatkozott regiszter tartalmát illeszti be.
Kiválóan felhasználható hosszú szavak gépelésére. Például, ezt kell
kialakítanod a forráskódban:

	r = VeryLongFunction(a) + VeryLongFunction(b) + VeryLongFunction(c) ~

A függvény nevét egy másik fájl definiálja. Szerkeszd a definíciót, a függvény
nevét pedig másold be egy általad választott regiszterbe, mondjuk v: >

	"vyiw

"v a regiszterazonosító, "yiw" pedig kimásolja a szót (yank-inner-word). Most
menj arra a helyre, ahová be szeretnéd illeszteni. Kezdd el a sort:

	r = ~

A függvény nevét illeszd be a CTRL-R v-vel:

	r = VeryLongFunction ~

A függvények közötti " + " részt kézzel kell megoldanunk, de további két
alkalommal a CTRL-R v használható.
   Mezei kiegészítéssel is megoldhattuk volna a feladatot. A regiszterek akkor
remekelnek, ha sok azonos betűkkel kezdődő elemünk van.

A regiszterek speciális karakterei (<BS> stb.) a képernyőre íródnak, mintha
begépeltük volna őket. Ha ezt nem szeretnéd és a <BS> karaktereket szövegként
szeretnéd beilleszteni, akkor CTRL-R CTRL-R {register}.

==============================================================================
*24.7*	Rövidítések

A rövidítésekkel hosszú szavak rövidíthetünk, elgépeléseket korrigálhatunk.
Például, az "ad" szót gépeléskor automatikusan kiegészíti a szerkesztő
"advertisement"-re.
  Hogy ezt definiáljuk insert módban, adjuk ki a parancsot: >

	:iabbrev ad advertisement

Most, ha "ad"-ot gépelsz, a szó "advertisement"-re átváltozik, amikor az első
olyan karaktert gépeled be, amely a szavakban nem szerepelhet:

	Amit beírsz		Amit látsz
	I saw the a		I saw the a ~
	I saw the ad		I saw the ad ~
	I saw the ad<Space>	I saw the advertisement<Space> ~

A kibontás nem történik meg még akkor sem, ha az "ad" szót begépeljük. Így
gépelhetünk egy teljesen más szót is ("add"), a rövidítés nem lesz kibontva.
The expansion doesn't happen when typing just "ad". A rövidítések ellenőrzése
teljes szavak alapján történik.


TÖBB SZÓ RÖVIDÍTÉSE

Akár egynél több szóban végződő rövidítéseket is definiálhatunk. Például,
meghatározhatjuk, hogy "JB" karakterek "Jack Benny"-t eredményezzenek kibontás
után: >

	:iabbrev JB Jack Benny

Programozóként, két szokatlan rövidítést használok: >

	:iabbrev #b /****************************************
	:iabbrev #e <Space>****************************************/

Ezek a többsoros kommentek írását könnyítik meg. A komment a #b rövidítéssel
kezdődik, mely kirajzolja az első sort. A komment beírását követően a #e
rövidítés pedig lezárja a kommentet.
   Az #e rövidítés üres karakterrel kezdődik. A Vim figyelmen kívül hagyja az
üres karaktereket a rövidítés és a kibontott értékek között, ezért a szóköz
karaktert itt <space>-ként van megadva. Használhatjuk a billentyűzet speciális
karaktereit is, például: <Tab>,<Left>,<Right>,<Enter> stb.

	`:iabbrev pf public function(){<Left><Left><Left>`

	Megjegyzés:
	Az ":iabbrev" parancs hosszú, rövid megfelelője a ":iab". Ez a
	rövidítés parancsnak a rövidítése.


GÉPELÉSI HIBÁK JAVÍTÁSA

Elég gyakran ugyanazokat a gépelési hibákat követjük el. Például, "the" szót
rendszeresen "teh"-nek írjuk. Rövidítéssel a probléma eliminálható: >

	:abbreviate teh the

Készíthetsz róluk akár egy teljes listát is, melyet frissíthetsz minden egyes
gyakori hiba felfedezésekor.


RÖVIDÍTÉSEK LISTÁZÁSA

Az ":abbreviate" parancs kilistázza a rövidítéseket:

	:abbreviate
	i  #e		  ****************************************/
	i  #b		 /****************************************
	i  JB		 Jack Benny
	i  ad		 advertisement
	!  teh		 the

Az "i" karakter az első oszlopban az Insert módra utal. Ezek a rövidítések
csak Insert módban működnek. A további változatok:

	c	Command-line mód			:cabbrev
	!	Insert és Command-line mód		:abbreviate

A rövidítések használata command-line módban nem túl gyakori, ezért az esetek
többségében az ":iabbrev" parancsot fogod használni. Ráadásul, elkerülhetőek
azok az helyzetek, amikor a command-line-ban kibontásra kerülne egy rövidítés.
Például, ha a fájlnevünk "ad" karakterekkel kezdődik, az ":iabbrev" parancs
megakadályozza a kibontást: >

	:edit ad

Tegyük fel, hogy létrehozod az alábbi rövidítést:

	`:ab h  hogy`

Ez ütközni fog a "help" rövidített alakjával, így minden egyes alkalommal, mikor
a help-fájlokkal dolgozol, a ":h",  ":hogy "-ra vált.

RÖVIDÍTÉSEK TÖRLÉSE

Rövidítéseinket az ":unabbreviate" paranccsal törölhetjük. Ha az alábbi
rövidítést definiáltuk: >
	
	:abbreviate @f fresh

Akkor ezt így távolíthatjuk el: >

	:unabbreviate @f

Az "@f" karaktereket a Vim azonnal kibontja "fresh"-re, ahogy beírod őket.
Emiatt ne aggódj, a Vim érteni fogja (hacsak nem definiáltál a "fresh" szóhoz
is egy másik rövidítés, de ez nem valószínű).
   Az összes rövidítés eltávolítása: >

	:abclear

Az "unabbreviate" és az ":abclear" parancsoknak van Insert módú megfelelője
(":iunabbreviate" és ":iabclear") és command-line megfelelője is
(":cunabbreviate").


RÖVIDÍTÉSEK MAPPELÉSE

Csupán egyetlen egy dologra kell figyelnünk rövidítések létrehozásakor: A
kibontott String ne tartozzon mapphez. Például:  >

	:abbreviate @a adder
	:imap dd disk-door

Ha most @a-t gépelsz, akkor a képernyőn "adisk-doorer" jelenik meg. Nem ezt
szeretted volna. A ":noreabbrev" parancsot használata (mely ":abbreviate"
parancs kiegészített változata) megakadályozza, hogy a rövidítésben szereplő
karakterek további mappeket hívjanak meg.  >

	:noreabbrev @a adder

Szerencsére nem gyakori jelenség, de okozhat meglepetéseket.

==============================================================================
*24.8*	Speciális karakterek bevitele

A CTRL-V parancs beilleszti a következő karaktert szó szerint. Más szavakkal,
ha a karakternek van speciális jelentése, akkor az figyelmen kívül lesz
hagyva. >
	CTRL-V <Esc>

A parancs beszúrja az Esc karaktert (ahelyett, hogy elhagyná az Insert módot).
A szóközt ne gépel be a CTRL-V után, csak a parancs tagolása miatt szerepel a
parancsban: CTRL-V<Esc>).

Vimrc szerkesztésénél már hasznát is vehetjük, ahová az alábbi billentyűket
szeretnénk rögzíteni:

	`<Left><Left><Left><Left><Left>`

Insert módban ezt így vihetjük be gyorsan:

	`CTRL-V<Left>CTRL-V<Left>CTRL-V<Left>CTRL-V<Left>CTRL-V<Left>`
 
	Megjegyzés:
	MS-Windows platformon a CTRL-V a vágólap tartalmának beillesztésére
	használják. Használj CTRL-Q-t a CTRL-V helyett. Unixon CTRL-Q egyes
	terminálokon nem működik, hiszen terminál-specifikus funkciója lehet.

A karakterek beilleszthetőek decimális számuk alapján is (CTRL-V {digits}).
Például, a <Del> karaktert reprezentálja a 127-es szám (de nem feltétlenül a
<Del> billentyűt!). <Del> beszúrása: >

	CTRL-V 127
 
A módszerrel 255 karakter vihető be. Ha kétszámjegyű kell beszúrnunk, akkor az
első nem szám karakter futtatja a parancsot, így szükségtelen 0 karakterrel
háromjegyűre bővíteni a kódot.
   Az alábbi parancsok mindegyike <Tab>-ot és egy pontot szúr be:

	CTRL-V 9.
	CTRL-V 09.
	CTRL-V 009.

Karakterek hexadecimális beszúrásánál a kódot "x" karakter előzi meg: >

	CTRL-V x7f

A paranccsal 255 karakter szúrható be ismételten (CTRL-V xff). Az "o"
prefixummal oktális számokat tudunk bevinni, illetve két további módszerrel
pedig 16 és 32 bites számot (például Unicode karakterhez): >

	CTRL-V o123
	CTRL-V u1234
	CTRL-V U12345678

==============================================================================
*24.9*	Digrammák

Néha olyan karaktert szeretnénk beszúrni, amely egyáltalán nem szerepel a
billentyűzetünkön. Ilyen például a copyright karakter (©). Az ilyen típusú
karakterek gépeléséhez a digrammákat használjuk. A digrammák olyan
két-három karakterből álló azonosítók, melyek egy speciális karakterre
hivatkoznak. >

	CTRL-K Co

Az összes digramma listázása: >

	:digraphs

Három sor a példa a parancs kimenetéből:

  AC ~_ 159  NS |  160  !I ¡  161  Ct ¢  162  Pd £  163  Cu ¤  164  Ye ¥  165 ~
  BB ¦  166  SE §  167  ': ¨  168  Co ©  169  -a ª  170  << «  171  NO ¬  172 ~
  -- ­  173  Rg ®  174  'm ¯  175  DG °  176  +- ±  177  2S ²  178  3S ³  179 ~

Melynek alapján megállapíthatjuk, hogy CTRL-K Pd kombinációk a £ karakterre
hivatkoznak, melynek elérhető decimális változata a 163.
   A Pd a font rövidítése (PounD), a legtöbb digramma azonosítója úgy lett
meghatározva, hogy utaljon a speciális karakterre. Ha belepillantasz a
táblázatba, akkor felfedezheted a logikát.
   A digramma azonosítójának első és második karaktere felcserélhető abban az
esetben, ha az így kapott azonosító nem foglalt. Ezért CTRL-K dP szintén
működik (mivel a "dP" azonosítóhoz nem tartozik semmi, ezért a Vim a "Pd"
azonosítót is keresi).

	Megjegyzés:
	A digrammák azonosítóit a nyelvi beállításaid befolyásolják, ezért
	mindig érdemes megtekinteni a listát mielőtt használjuk őket.

A saját digrammáidat is definiálhatod. Például: >

	:digraph a" ä

Ez definiálja az a" azonosítójú digrammát, melynek kimenete ä lesz. Decimális
szám alapján is történhet a definíció, az alábbi például ugyan azt a digrammát
definiálja: >

	:digraph a" 228

A digrammákról még több információ: |digraphs|.
   A speciális karakterek bevitelére létezik még egy módszer: keymap. Erről
többet itt |45.5|.

==============================================================================
*24.10*	Normal módú parancsok

Az Insert módban csak limitált számú parancsot használhatunk. Normál módban a
többszöröse is elérhető. Használatukhoz azonban gyakran ell kell hagynod az
Insert módot <Esc> billentyűvel, lefuttatni a Normal módú parancsot, majd
visszatérni Insert módba az "i", "a", "A", "I" stb. billentyűkkel.
   A gyorsabb módszer: CTRL-O {command} képes futtatni bármilyen Normal módú
parancsot Insert módban. Például, törlés a kurzortól a sor végéig: >

	CTRL-O D

Csak és kizárólag Normal módú parancsok futtathatóak ilyen módon. A
mennyiségek és a regiszterek használata azonban engedélyezett,például egy
kicsit bonyolultabb műveletre: >

	CTRL-O "g3dw

A parancs törli és a "g" azonosítójú regiszterben tárolja a kurzort követő
három szót.

==============================================================================

Következő fejezet: |usr_25.txt|  Formázott szövegek szerkesztése

Jogi információk: lásd |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:

*usr_26.txt*	For Vim version 8.2.	Last change: 2006 Apr 24

		  Bram Moolenaar: Vim felhasználói kézikönyv

				   Ismétlés


A szerkesztés sokszor repetitív, melyek újra és újra elvégzünk. Ebben a
fejezetben az ismétlési módokról és használatukról lesz szó.

|26.1|	Ismétlés Visual módban
|26.2|	Hozzáadás és kivonás
|26.3|	Szerkesztések több fájlon
|26.4|	Vim használata shell-szkripttel

Következő fejezet: |usr_27.txt|  Keresési parancsok és minták
    Előző fejezet: |usr_25.txt|  Formázott szöveg szerkesztése
 Tartalomjegyzék: |usr_toc.txt|

==============================================================================
*26.1*	Ismétlés Visual módban

A Visual módban többsoros szerkesztéseket alkalmazunk. A kijelölt szöveget
láthatod, így egyszerű megállapítani, hogy a szerkesztés a fájl mely részeit
változtatja meg. A kijelölés extra gépeléssel jár. A "gv" parancs kiválasztja
a legutóbbi kijelölt területet újra, így viszonylag rövid idő alatt több
parancsot is futtathatunk a kijelölésen.
   Tegyük fel, hogy példában ki szeretnél cserélni az évszámokat, a "2001"-et
   "2002"-re, a "2000" pedig "2002"-re:

	The financial results for 2001 are better ~
	than for 2000.  The income increased by 50%, ~
	even though 2001 had more rain than 2000. ~
			2000		2001 ~
	income		45,403		66,234 ~

Az első csere "2001"-"2002". Jelöld ki a területet Visual módban és cseréld le
őket: >

	:s/2001/2002/g

Most választ ki a területet újra "gv" és cseréld le a maradékot
":s/2000/2001/g".
   A technika ismételhetősége nyilvánvaló.

==============================================================================
*26.2*	Hozzáadás és kivonás

Ha két számot kell változtatni, akkor általában meg adva az offset (azaz, hogy
mennyivel kell növelni, vagy csökkenteni az adott számot). A fenti példában
mindegyik évhez hozzáadtunk egyet. Most keresés helyett végezzünk egy
pontosabb keresést, amely csak az évszámokat jelöli ki, majd használjuk a
CTRL-A parancsot.
   A fenti példára alapozva, keressük meg az évszámokat: >

	/19[0-9][0-9]\|20[0-9][0-9]

Most nyomj CTRL-A-t. Az évszámok eggyel nőnek:

	The financial results for 2002 are better ~
	than for 2000.  The income increased by 50%, ~
	even though 2001 had more rain than 2000. ~
			2000		2001 ~
	income		45,403		66,234 ~

"n" paranccsal találd meg a következő évszámot, "."-al pedig ismételjük a
CTRL-A parancsot (a "." gyorsabb gépelni). Ezek után már csak "n" és "."kell
ismételned.
   Tipp: állítsd be a 'hlsearch' opciót, hogy lásd a keresés találatait, így
jobban felkészülhetsz az műveletre.

A számokhoz nem csak egyet tudunk hozzáadni, a CTRL-A mennyiséggel
prefixálható. Például:

	1.  item four ~
	2.  item five ~
	3.  item six ~

Vidd a kurzort az "1."-re és gépelj: >

	3 CTRL-A

Az "1." "4."-re változott. Ismételhető "." billentyűvel.

Másik példa:

	006	foo bar ~
	007	foo bar ~

CTRL-A használata az alábbi elemeken:

	007	foo bar ~
	010	foo bar ~

7 meg 1 az 10? A Vim nem ismert fel "007"-et oktális számként a vezető nulla
miatt. Az ilyen típusú jelölést C programok esetén használják. Ha nem
szeretnéd, hogy a Vim oktális számként kezelje a az ilyen formátumú számokat:
>
	:set nrformats-=octal

A CTRL-X parancs kivonást végez el, hasonló módon.

==============================================================================
*26.3*	Szerkesztések több fájlon

Tegyük fel, hogy van egy változód, melynek neve "x_cnt" és át szeretnéd
nevezni "x_counter"-re. A változó több fájlban is jelen van, ezért az összes
előfordulást le kell cserélni. Így oldhatod meg.
   Tedd az összes érintett fájlt az argumentumlistába: >

	:args *.c
<
mely az összes C fájlt az argumentumlistába rakja, a lista első eleme pedig
megjelenik aktív fájlként. Cseréld le a változónevet az összes fájlban: >

	:argdo %s/\<x_cnt\>/x_counter/ge | update

Az ":argdo" parancs elfogad egy másik argumentumot is, melynek parancsnak kell
lennie, a parancsot a szerkesztő lefuttatja az összes fájlon.
   Az "%s" substitute parancs cserét hajt végre az összes fájlban
(tartományuk: teljes fájl). Az "\<x_cnt\>" mintával megtaláljuk a "x_cnt"
szót. A "\<" és "\>" minták miatt a keresés csak teljes szavakra fog
illeszkedni ("px_cnt" vagy "x_cnt2" szavak nem fognak illeszkedni).
   A keresés flagje a "g" (soronkénti összes előfordulás cseréje), az "e",
mely nem dob hibaüzenetet, ha "x_cnt" nem található a fájlban (az ":argdo"
parancs megszakadna a legelső hibaüzenetnél).
   A "|" két parancsot választ el, az "update" parancs pedig menti a fájlt
változás esetén. Ha egyetlen egy "x_cnt" sem cserélődött le, akkor nem
történik semmi

Létezik egy úgynevezett ":windo" parancs, mely argumentumot futtat az összes
ablakon, ":bufdo", amely az argumentumokat a buffereken futtatja. Légy óvatos,
hiszen általában mindig sokkal több fájl van a bufferlistádon, mint azt
gondolnád. Ellenőrzés a ":buffers" paranccsal. (vagy ":ls").

==============================================================================
*26.4*	Vim használata shell-szkripttel

Képzeljük el, hogy rengeteg fájlod van, amiben le kell cserélned a "-person-"
szöveget "Jones"-ra, majd kinyomtatni a fájlokat. Hogyan csináljuk? Az egyik
lehetőség az, ha nagyon sokat gépelünk. A másik, hogy írunk egy shell szkriptet,
amely elvégzi a munkát helyettünk.
   A Vim szuper munkát végez a Normál módú parancsai által. Tömeges
feldolgozásnál a normál módú parancsok miatt fájlunk nem lesz tiszta, szépen
kommentelhető fájlt, így ebben az esetben az Ex módot fogjuk használni, ami
egy egysoros command-line interfészt biztosít számunkra, melyek szebben
integrálhatóak bash szkriptekben. (Az "Ex" a ":" parancsokat jelenti).
   Az alábbi három Ex parancsra van szükséged. >

	%s/-person-/Jones/g
	write tempfile
	quit

A parancsokat mentsd el "change.vim" néven, és dolgozzuk fel a fájlokat az
alábbi shell szkripttel: >

	for file in *.txt; do
	  vim -e -s $file < change.vim
	  lpr -r tempfile
	done

A for-done ciklus a két behúzott sort ismétli, minden iterációnál a $file nevű
változó új értéket kap.
   A második sor futtatja Ex módban a Vimet (-e argumentum) a $file változóban
lévő fájlon. A change.vim fájlban leírt szerkesztések futtatja a fájlon. Az
"-s" argumentum (silent) határásra a Vimnek egyáltalán nem lesz kimenete
(:prompt üzenetek).
   Az "lpr -r tempfile" parancs kiírja a "tempfile"-t, majd törli (-r) azt.
   The "lpr -r tempfile" command prints the resulting "tempfile" and deletes
it (that's what the -r argument does).


OLVASÁS STANDARD BEMENETRŐL

A Vim képes olvasni a sztenderd bemenetről. Fájlnév helyett add át az "-"
argumentumot. Például: >

	ls | vim -

Ez lehetővé teszi számunkra, hogy azonnal szerkesszük az "ls" parancs
kimenetét anélkül, hogy ezt először fájlba mentenénk (vagy Vimből kelljen
beolvasnunk ugyanezt a kimentet).
   Ha a sztenderd kimentről olvasol be, akkor az "-S" argumentummal szkriptet
olvashatsz be: >

	producer | vim -S change.vim -


NORMÁL MÓDÚ SZKRIPTEK

Ha tényleg Normal módú parancsokat szeretnél használni, akkor végülis
megteheted: >

	vim -s script file.txt ...
<
	Az "-s" argumentumnak más jelentése van, ha "-e" nélkül használjuk.
	Az "-s" a beolvasandó szkriptfájlt jelenti ebben az esetben. Ha az
	"-e" argumentummal használjuk, akkor pedig némítja a kimenetet
	(silent), valamint nem használja a következő argumentumot fájlnévként.

A "script" fájlban lévő parancsok úgy értelmeződnek, ahogy írod őket. Ne
feledd, hogy a sortörés <Enter>-ként interpretálódik. Normal módban ez kurzort
a következő sorba helyezni.
   A szkript létrehozásához egyenként begépelheted a parancsaidat, viszont így
képzeletben kell követned, hogy mit fog csinálni a szerkesztő és mi lesz az
eredmény. Praktikusabb, ha az általad kiadott parancsokat felveszed, miközben
elvégzed a feladatot: >

	vim -w script file.txt ...

Minden általad kiadott parancs a "script" fájlban tárolódik. Ha hibáztál,
akkor jegyezd meg azt a pontot, ezt később manuálisan korrigálhatod.
   A "-w" argument hozzáfűz a szkriptfájlhoz. Nagyszerű megoldás, ha rögzíteni
szeretnél egy nagyobb terjedelmű szerkesztést. Ha elölről szeretnéd kezdeni,
akkor a "-W" argumentum felülírja a fájlt.

==============================================================================

Következő fejezet: |usr_27.txt|  Keresési parancsok és minták

Jogi információk: lásd |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:

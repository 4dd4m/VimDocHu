*usr_05.txt*	For Vim version 8.2.	Last change: 2019 May 23

		  Bram Moolenaar: Vim felhasználói kézikönyv

				A beállításaid


A Vim úgy működik, ahogy szeretnéd. Az alábbi fejezet bemutatja, hogy hogyan
indíthatod a Vimet az alapértelmezett beállításoktól eltérően, hogy hogyan
bővítheted a Vim funkcionalitását beépülőkkel vagy hogyan definiálhatsz
makrókat.

|05.1|	A vimrc fájl
|05.2|	A példa vimrc fájl magyarázata
|05.3|	defaults.vim fájl magyarázata
|05.4|	Egyszerű mappek
|05.5|	Csomag hozzáadása
|05.6|	Beépülő hozzáadása
|05.7|	Help fájl hozzáadása
|05.8|	A beállítások ablak
|05.9|	Gyakran használt beállítások

Következő fejezet: |usr_06.txt|  Szintaxis kiemelés használata
    Előző fejezet: |usr_04.txt|  Kisebb változtatások
 Tartalomjegyzék: |usr_toc.txt|

==============================================================================
*05.1*	A vimrc fájl					*vimrc-intro*

Talán már belefáradtál abba, hogy minden egyes alkalommal parancsokat kell
írnod a beállítások cseréjéhez. Gyűjtsd össze kedvenc beállításaid,
mappingjeidet és írd őket egy úgynevezett vimrc fájlba. A szövegszerkesztő
indításánál a fájl tartalmát képző parancsok automatikusan lefutnak.

Ha már van vimrc fájlod (mert például az admin már létrehozott neked egyet),
akkor így szerkesztheted >

	:edit $MYVIMRC

Ha még nincs vimrc fájlod, akkor olvasd el a |vimrc| vonatkozó leírásait a
fájl helyét illetően. A ":version" parancs említést tesz a fájlról "user vimrc
file" néven.

Unix és Macintosh rendszereken a fájl (ajánlott) elérési útja:

	~/.vimrc ~

MS-Windows platformon az alábbiak használatosak:

	$HOME/_vimrc ~
	$VIM/_vimrc ~

Ha még eddig nem rendelkeztél vimrc fájllal, akkor az első sorba másold be az
alábbi parancsot: >

	source $VIMRUNTIME/defaults.vim

A parancs új felhasználók számára inicializálja a Vimet (ellentétben a Vi
userekkel). Részletesebben: |defaults.vim|.

A vimrc fájlban ":" nélkül szerepelnek a parancsok, azaz minden olyan
parancsot beírhatsz, amit egyébként a ":" után írnál. A beállító (set)
parancsok a legegyszerűbbek. Például, ha szeretnéd indításnál bekapcsolni a
'incsearch' opciót, akkor add hozzá a vimrc fájlodhoz: >

	set incsearch

Mentés után a beállítás nem lép érvénybe, ehhez újra kell indítanod a Vimet.
Későbbiekben lesz példa egy elegánsabb megoldásra, melyhez nem kell
újraindítania a szerkesztőt.

Mivel ez a fejezet csak az alapokat hivatott elmagyarázni, ezért Vim script
fájlokról itt tudhatsz meg többet: |usr_41.txt|.

==============================================================================
*05.2*	A példa vimrc fájl magyarázata			*vimrc_example.vim*

Az első rész magyarázatot adott arra, hogy hogyan működik a példa vimrc fájl
(ami a Vim disztribúcióval érkezik), amit not-compatible módban használhatunk
(lásd |not-compatible|). A fájl itt található:

	$VIMRUNTIME/vimrc_example.vim ~

Ebben a részben a fájl tartalmának (részleges) magyarázatával foglalkozunk.
A fájl egyes részeit felhasználva jó kiindulópontot teremthet saját vimrc fájlok
létrehozásához. A ":help" paranccsal kiderítheted az el nem magyarázott
részleteket.
>
	" Get the defaults that most users want.
	source $VIMRUNTIME/defaults.vim

A parancs betölti a "defaults.vim" fájlt a $VIMRUNTIME könyvtárból, mely
megpróbálja konfigurálni a szerkesztőt a leggyakoribb beállításokkal. A nem
tetsző beállításokat nyugodtan kommentté alakíthatod. A fájl tartalmának
magyarázata |defaults-vim.explained|.
>
	if has("vms")
	  set nobackup
	else
	  set backup
	  if has('persistent_undo')
	    set undofile
	  endif
	endif

Ez arra utasítja a Vimet, hogy felülírás esetén tartson biztonsági másolatot.
Kivéve VMS rendszered, hiszen erről a rendszer gondoskodik. A biztonsági
másolat fájl neve és az  eredeti fájl neve ugyan az lesz, ha a "~" karaktert
hozzáadjuk. Lásd |07.4|.

A kód második fele bekapcsolja az 'undofile' opciót, ha elérhető, mely a
visszavonások (multi-level) leírását tartalmazza. A beállítás bekapcsolásával
akkor is képesek leszünk a szerkesztéseinket visszavonni, ha már túl vagyunk
egy mentés-bezárás-megnyitás cikluson. Nagyszerű és hasznos beállítás,
mindösszesen egy fájlt kell tárolnunk a merevlemezen. Bővebben |undo-persistance|.

Az "if" parancsot akkor használjuk a beállítások során, ha azt várjuk, hogy
egy feltétel teljesüljön. Lásd |usr_41.txt|.
>
	if &t_Co > 2 || has("gui_running")
	  set hlsearch
	endif

Bekapcsolja a 'hlsearch' opciót, kiemeli az előző keresés összes találatát.
>
	augroup vimrcEx
	  au!
	  autocmd FileType text setlocal textwidth=78
	augroup END

A fenti beállítás csoporttal korlátozhatjuk a sorain hosszát, mely nem lehet
több, mint 78 karakter. De csak annál a fájloknál, ahol a fájltípus egyszerű
szöveg. Igazság szerint a parancsnak két része van. "autocmd FileType text"
egy autocommand, mely azt mondja: futtasd az alábbi parancsokat akkor, ha a
fájltípus egyszerű szöveg. A második részben a lefuttatandó parancsok vannak
definiálva: "setlocal textwidth=78" 78-ra állítja a 'textwidth' változót, de
csak lokálisan, az aktuális bufferre nézve.

A wrapper "augroup vimrcEx" és az "augroup END" teszi lehetővé, hogy ezen
beállításokat menet közben kikapcsolhassuk az "au!" paranccsal. Lásd:
|:augroup|.
>
	if has('syntax') && has('eval')
	  packadd! matchit
	endif

Ez betölti a "matchit" plugint (mely a % parancsot egészíti ki), ha a feltételek
teljesültek. A beépülő hozzáadása: |matchit-install|.


==============================================================================
*05.3*	defaults.vim magyarázat                    *defaults.vim-explained*

A |defaults.vim| akkor töltődik be, ha felhasználónak nincs vimrc fájlja. Ha a
továbbiakban is használni szeretnéd a beállításait, akkor a vimrc fájlodhoz
add hozzá az alábbi sort: >

	source $VIMRUNTIME/defaults.vim

Vagy használd a fentebb említett vimrc_example.vim fájlt.

A kódrészlet elmagyarázza, hogy mit is csinál a defaults.vim.
>
	if exists('skip_defaults_vim')
	  finish
	endif

A defaults.vim betöltését letilthatjuk: >

	let skip_defaults_vim = 1

Ezt azonban a rendszerszintű vimrc fájlban kell elhelyeznünk. Lásd
|system-vimrc|. Ha már van user vimrc fájl, akkor ez szükségtelen, hiszen a
defaults.vim fájl nem lesz automatikusan betöltve.
>
	set nocompatible

Az előző fejezetben már kitértünk arra, hogy ezek a leírások a Vim "fejlett"
működését taglalják (nem a Vi kompatibilis módot). Nincs értelme a 'compatible'
módot kikapcsolni, hiszen a 'nocompatible' erről gondoskodik.
>
	set backspace=indent,eol,start

A beállítás meghatározza, hogy a <BS> billentyű hol törölhet. A három
vesszővel elválasztott opció a karakterek törlését engedélyezi behúzásoknál
(sor eleji whitespace), sortöréseknél és Insert módban (klasszikus). Még több
információ: 'backspace'.

>
	set history=200

History számának meghatározása, mely kiterjed a parancsokra és a keresésekre.
Tetszőlegesen szabályozható, ha többre, vagy kevesebbre van szükséged. Lásd
'history'.
>
	set ruler

A kurzor pozíciójának megjelenítése a jobb alsó sarokban. Lásd 'ruler'.
>
	set showcmd

A részleges parancsokat jeleníti meg a jobb alsó sarokban. Például "2f"
részlet esetén a Vim egy karaktert vár, melyre ugorhat a parancs befejezése
után. "w" billentyű esetén a parancs lefut ("2fw"), a "2f" pedig  eltűnik.

	+-------------------------------------------------+
	|text in the Vim window				  |
	|~						  |
	|~						  |
	|-- VISUAL --			2f     43,8   17% |
	+-------------------------------------------------+
	 ^^^^^^^^^^^		      ^^^^^^^^ ^^^^^^^^^^
	  'showmode'		     'showcmd'	'ruler'


>
	set wildmenu

Az egyezéseket mutatja például automatikus kiegészítéseknél az állapotsoron
(amikor <Tab> esetén több egyezés lehetséges). Lásd 'wildmenu'.
>
	set ttimeout
	set ttimeoutlen=100

Ez gyorsítja az <Esc> billentyű működését. Normál esetben a Vim egy
másodpercet annak ellenőrzésére, hogy kiderüljön, hogy az Esc billentyű
alkot-e valamilyen szekvenciát. Ha nagyon lassú kapcsolatod van, akkor ezt a
számot növelheted. Lásd: 'ttimeout'.
>
	set display=truncate

A teljes sor elrejtése helyett a Vim @@@ karakterekkel jelzi, ha a sor
csonkolt. Lásd 'display'.
>
	set incsearch

Egyezések kiemelése a keresés írásával párhuzamosan. Lásd 'incsearch'.
>
	set nrformats-=octal

A nullával kezdődő számokat a Vim nem kezeli oktálisként. Lásd: 'nrformats'.
>
	map Q gq

Egy mappet definiál. Ezekről többet tudhatsz meg a későbbi fejezetekben. A "Q"
parancshoz rendeli a "gq" formázási operátort. Vim 5.0 verziójáig ez volt az
alapértelmezett működés. Egyébként "Q" belépne Ex módba, de erre most nincs
szükségünk.
>
	inoremap <C-U> <C-G>u<C-U>

CTRL-U Insert módban a teljes sor tartalmát törli.  ??? Use CTRL-G u to first
break undo, so that you can undo CTRL-U after inserting a
line break.  Revert with ":iunmap <C-U>".

>
	if has('mouse')
	  set mouse=a
	endif

Engedélyezi az egérhasználatot, ha elérhető. Lásd 'mouse'.

>
	vnoremap _g y:exe "grep /" . escape(@", '\\/') . "/ *.c *.h"<CR>

A mapping másolja a kijelölt szöveget, amit majd megkeres C fájlokban.
Láthatod, hogy a mappekkel bonyolult dolgokat is elvégezhetünk. Azonban ezek
sem többek annál, mintha a parancsot részenként és manuálisan futtatnánk.
>
	syntax on

Szintaxis kiemelés használata. Lásd |syntax|.

							*vimrc-filetype*  >
	filetype plugin indent on

Három nagyszerű funkció bekapcsolása:
1. Filetype felismerés.
   A fájlok betöltésénél a Vim megpróbálja megállapítani a fájl típusát. Ha a
   "main.c" fájlt szerkeszted, a Vim észreveszi, hogy egy ".c" kiterjesztésű
   fájlról beszélünk. Ha olyan fájlt szerkesztesz, ami "#/bin/sh" sorral
   kezdődik, akkor a Vim "sh" fájlnak fogja tekinteni. A filetype felismerésre
   támaszkodik a szintaxis kiemelés, és az alábbi két beállítás. Lásd |filetypes|.

2. Filetype beépülők használata
   Ahány fájltípus, annyi beállítás. Nem minden esetben válik előnyünkre, ha
   minden fájltípushoz ugyanazokat a beállításokat alkalmazzuk. Például, ha "c"
   fájlt szerkesztesz, akkor nagyon jól jön a 'cindent' opció, mely
   automatikusan behúzza a sorokat. A leggyakoribb beállításokat a filetype
   beépülők tartalmazzák. Egészítsd ki, vagy hozd létre a sajátodat:
   |write-filetype-plugin|.

3. Indentálási fájlok használata.
   Programok szerkesztése során a behúzások nagy része automatikusan kerül
   megállapításra. Az összes fájltípushoz elérhetjük a behúzás részletes
   definícióját, melyet akár ki is egészíthetünk. Lásd |:filetype-indent-on|és
   'indentexpr'.

				*restore-cursor* *last-position-jump*  >
    autocmd BufReadPost *
      \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
      \ |   exe "normal! g`\""
      \ | endif

Másik parancs. A definíció szerint bármilyen (*) fájl betöltése után
(BufReadPost) lefut a parancs. A bonyolult rész azután következik, hogy a
program ellenőrzi a '" jelölő meglétét (legutolsó szerkesztési pont). Ha létezik
az adott jelölő, akkor a kurzort arra a pontra állítja. A backslashek a sorok
elején a parancs folytatását jelzik, így elkerülhetjük, hogy egy sor nagyon
hosszúvá váljon. Lásd |line-continuation|. A techinka kizárólag a Vim script
fájljaiban működik, command-line módban nem.
>
	command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
		  \ | wincmd p | diffthis

A parancs definiálja a "DiffOrig" parancsot. Egy módosított buffer tartalmán
és az eredeti fájlok alkalmazott diff. Lásd |diff| és |:DiffOrig|.
>
	set nolangremap
???
Prevent that the langmap option applies to characters that result from a
mapping.  If set (default), this may break plugins (but it's backward
compatible).  See 'langremap'.

==============================================================================
*05.4*	Egyszerű mappek

Egy (vagy több) parancsnak a billentyűhöz rendelését mappelésnek hívjuk.
Tételezzük fel, hogy egy adott szó kapcsos-zárójelek közé kell zárnod (amount
- {amount} ). A ":map" paranccsal tudathatod a Vimmel, hogy ezt a funkciót az
  F5 billentyűvel szeretnéd elérni. A parancs a következő: >

	:map <F5> i{<Esc>ea}<Esc>
<
	Megjegyzés:
	A parancs definíciójánál a billentyűket úgy kell beírni, ahogyan azt
	fent látod. Tehát az F5 billentyűt <F5> ként, az Esc billentyűt <Esc>
	ként. Ha elhagyod a <> jeleket, akkor a parancs teljesen mást fog
	csinálni. (beírja szó szerint, hogy F5 és Esc). Ezekre figyelj oda.

Bontsuk szét az alábbi parancsot:
    <F5>	Az F5 billentyű fogja elindítani a parancsot.

    i{<Esc>	{ karakter beszúrása.  Az <Esc> kilép Insert módból.

    e		Ugrás a szó végéhez.

    a}<Esc>	Hozzáfűzés } karakter, kilépés Insert módból.

A parancs definiálása után bármikor meghívhatod a parancsot (sourceolás vagy
újraindítással érvényesíteni kell a változtatásokat). F5 megnyomásával a
kurzor alatt lévő szót {} jelek közé zárja.

Példánkban parancsindító (trigger) egyetlen egy billentyű, mely lehet akár
több is. Csalogatónak tűnik, de ha felülírsz egy alapértelmezett vim funkciót,
akkor az ezentúl nem lesz elérhető. Mielőtt definiálnánk egy parancsot, nézzük
meg, hogy mit írunk felül. Érdemes olyan funkciót felülírni, melyet egyáltalán
nem használunk.
   A parancsok mappelhetőek backslashel is, egy új réteget biztosítva, hiszen
el fog jönni az a pont, amikor már egy billentyű nem lesz elég a definícióhoz.
Rendezést tekintve lehetünk következetesek: \p () (parentheses) közé záráshoz,
\c {} (curly braces) közé záráshoz. Például: >

	:map \p i(<Esc>ea)<Esc>
	:map \c i{<Esc>ea}<Esc>

A parancsban szereplő \ és p gyorsan kell gépeljük egymás után, a Vim innen
fogja tudni, hogy egy parancsot képeznek.

A ":map" parancs (argumentumok nélkül) listázza az aktív mappeket (a kiegészítők
mapjeivel együtt). Legalább a Normál módúakat. Még több a mappelésekről: |40.1|.

==============================================================================
*05.5*	Csomag hozzáadása			*add-package* *matchit-install*

A csomagok tulajdonképpen fájlok, melyeket hozzáadhatsz a Vimhez. Két fajtája
létezik: opcionális és indításnál automatikusan betöltött.

Az alapértelmezett Vim disztribúció tartalmaz néhány opcionálisan használható
csomagot. Például a matchit beépülő. A beépülő kiterjeszti a % parancsot, így
a parancs nem csak a zárójeleket képes kezelni, hanem a HTML tageket,
if/else/endif vezérlési szerkezeteket a Vim szkriptekben. Nagyon hasznos, bár
visszafelé nem kompatibilis (ez az oka annak, hogy alapértelmezetten nincs
engedélyezve).

A matchit használatához először add hozzá az alábbi sort a vimrchez: >
	packadd! matchit

És ennyi! A Vim újraindítása után a beépülő helpfájlait így éred el:
	:help matchit

Ez azért működik, mert amikor a `:packadd`  betöltötte a plugint, akkor
hozzáadta a csomag elérési útját a 'runtimepath' változóhoz, így a Vim azt
meg tudta találni.

Az Interneten számos helyen találhatsz csomagokat, beépülőket. Általában
tömörített állományként, vagy kódbázis (repository) formában találkozhatsz
velük. Tömörített állomány esetében a teendő a  következő:
	1. Készíts egy könyvtárat a csomagnak: >

		mkdir -p ~/.vim/pack/fancy

<	   "fancy" helyett a név akármi lehet ami tetszik. Természetesen olyan
	    nevet érdemes használni, mely leírja a csomag működését.
	2. Csomagold ki a tömörített állományt a könyvtárba.  Az alábbi
	feltételezi azt, hogy a csomag állományának gyökere "start": >

	   	cd ~/.vim/pack/fancy
		unzip /tmp/fancy.zip

<          Ha a struktúra más, akkor alakíts ki egy hasonló struktúrát:
>
		~/.vim/pack/fancy/start/fancytext/plugin/fancy.vim ~
<
	  Itt "fancytext" a csomag neve, de bármi más is lehet.

Több információ a csomagokról: |packages|.

==============================================================================
*05.6*	Beépülő hozzáadása				*add-plugin* *plugin*

Beépülőkkel bővíthetjük a Vim funkcionalitását. A beépülők csak egyszerű Vim
script fájlok, melyek automatikusan betöltődnek induláskor. Beépülő
hozzáadásához csak be kell másolni a szkriptfájlt a plugin könyvtárba. {Ez
azonban csak akkor elérhető, ha a Vim az |+eval| flaggel lett lefordítva}

A beépülőknek két csoportja van:

Globális beépülő: Hatásköre minden fájlra kiterjed
Filetype beépülő: Hatása csak bizonyos fájltípusokra terjed ki.

Először a globális beépülőket fogjuk megvizsgálni, aztán a filetype
belépülőket |add-filetype-plugin|.


GLOBÁLIS BEÉPÜLŐK					*standard-plugin*

A Vim indulásakor számos globális beépülőt tölt be. Ehhez nem kell semmit
tenned. Ezek olyan funkcionalitások, melyeket a legtöbb fejlesztő használ,
viszont az implementációt tekintve nem képzi a Vim natív részét, csak Vim
script formában léteznek. A listát itt tekintheted meg |standard-plugin-list|,
valamint |load-pugins|.

							*add-global-plugin*
Globális kiegészítők hozzáadásával az extra funkciók feltétel nélkül
rendelkezésre állnak a Vim használata során. Globális beépülők telepítésének a
menete:
1. Másold le a beépülő könyvtárát
2. Másold be a megfelelő helyre


GLOBÁLIS BEÉPÜLŐK BESZERZÉSE

Hol találhatsz beépülőt?
- Egyes beépülők betöltött állapotban vannak, ezeket láthatod a
  $VIMRUNTIME/plugin könyvtárban
- Más beépülők a Vimmel érkeznek. Őket itt találod: $VIMRUNTIME/macros,
  valamint az alkönyvtárakat $VIM/vimfiles/pack/dist/opt/.
- Letöltés az internetről. Egy nagyobb kollekció: http://www.vim.org.
- A Vim |maillist| olvasása során.
- Magad is létrehozhatsz egyet, lásd |write-plugin|.

A beépülők érkezhetnek vimball állományként: |vimball|,
de képesek lehetnek akár önmaguk frissítésére is, lásd |getscirpt|.
Some plugins can be updated automatically, see |getscript|.


GLOBÁLIS BEÉPÜLŐK HASZNÁLATA

Olvasd el a beépülő read.me fájlját. Egyes pluginok esetében a működés
biztosításához teljesíteni kell bizonyos feltételeket (például egyéb
függőségek):
Másold be a fájlt a beépülők könyvtárába:

	system		plugin directory ~
	Unix		~/.vim/plugin/
	PC		$HOME/vimfiles/plugin or $VIM/vimfiles/plugin
	Amiga		s:vimfiles/plugin
	Macintosh	$VIM:vimfiles:plugin
	Mac OS X	~/.vim/plugin/

Például Unix rendszereken (feltételezve azt, hogy a beépülő könyvtára még nem
létezik):

	mkdir ~/.vim
	mkdir ~/.vim/plugin
	cp /tmp/yourplugin.vim ~/.vim/plugin

Ennyi! Mostantól használhatod a beépülő által definiált parancsokat.

Ahelyett, hogy csak bemásolnád a beépülőket a plugin/ könyvtárba, érdemes
megfontolni a rendezésüket, alkönyvtárakba szervezni őket. Például
"~/.vim/plugin/perl/*.vim" útvonal használata az összes Perllel kapcsolatos
kiegészítő tárolására.


FILETYPE BEÉPÜLŐK			*add-filetype-plugin* *ftplugins*

A Vim disztribúciók számos kiterjesztéshez tartozó beállításai. Így
kapcsolhatod be őket: >

	:filetype plugin on

Ennyi! Lásd |vimrc-filetype|.

Ha hiányzik az adott fájltípushoz tartozó fájl, vagy esetleg jobbat találtál,
hozzáadhatod. Két lépésben:
1. Másold le a beépülő könyvtárát
2. Másold be a megfelelő helyre


FILETYPE PLUGIN BESZERZÉSE

A globális beépülőkkel megegyező helyen találhatod őket. Ha a fájlnévben van
utalás a kiterjesztésre, akkor tudod, hogy az a filetype plugin fájlja és nem
globális beépülő.
    A $VIMRUNTIME/macros könyvtárban található szkriptek globálisak, a filetype
    pluginok a $VIMRUNTIME/ftplugin könyvtárban találhatóak.


FILETYPE PLUGINOK HASZNÁLATA				*ftplugin-name*

Filetype plugin hozzáadásához csak másold be a fájlt a megfelelő könyvtárba. A
könyvtár neve a fent már említettekkel megegyező, de az utolsó rész
"ftplugin"-al végződik. Tételezzük fel, hogy találtál egy jó fájlt a "stuff"
fájltípushoz Unix rendszeren. A fájlt ide kell másolnod: >

	mv thefile ~/.vim/ftplugin/stuff.vim

Ha a fájl már létezik, akkor már van beépülőd a "stuff" fájltípushoz.
Ellenőrizned kell az ütközéseket. Ha minden rendben van, akkor adj neki eltérő
nevet: >

	mv thefile ~/.vim/ftplugin/stuff_too.vim

A "_" karakterrel elválaszthatod a fájltípust és a nevet, ami bármi lehet. Ha
"otherstuff.vim" fájlnév esetén a fájl nem fog betöltődni (a stuff
fájltípushoz, az otherstuffhoz viszont igen).

MS-DOS rendszereken nem használhatunk túlságosan hosszú fájlneveket (több mint
6 karakter). Extra könyvtárak létrehozásával megkerülhetjük a problémát: >

	mkdir $VIM/vimfiles/ftplugin/fortran
	copy thefile $VIM/vimfiles/ftplugin/fortran/too.vim

Az általánosított filetype nevek: >

	ftplugin/<filetype>.vim
	ftplugin/<filetype>_<name>.vim
	ftplugin/<filetype>/<name>.vim

A <name> tetszőleges lehet.
Példák a "stuff" fájltípusra:

	~/.vim/ftplugin/stuff.vim
	~/.vim/ftplugin/stuff_def.vim
	~/.vim/ftplugin/stuff/header.vim

A <filetype> rész a fájltípus meghatározására szolgál (amihez be fog töltődni
a belépülő). A beállítások a fájltípusra vonatkoznak, tehát hiába van több
fájl megnyitva, más fájltípusok figyelmen kívül lesznek hagyva. Ha egy
fájltípushoz több fájl tartozik, a <name> résszel tudunk különbséget tenni
közöttük. Megjegyzés: az összes fájlnak ".vim"-el kell végződjön.


További irodalom:
|filetype-plugins|	Filetype pluginok dokumentációja, információk arról,
			hogy hogyan kerülhetjük el a mappelési problémákat.
|load-plugins|		Mikor töltődnek be a beépülők indítás során.
|ftplugin-overrule|	Globális beépülők működésének felülírása.
|write-plugin|		Hogyan írjunk beépülőt.
|plugin-details|	Még több tudnivaló a beépülők működéséről, mit tegyünk
			ha a plugin nem működik.
|new-filetype|		Új fájltípus detektálása.

==============================================================================
*05.7*	Help fájl hozzáadása				*add-local-help*

Ha szerencsés vagy, akkor a beépülő telepítette a help fájlját. Ebben a
részben kitérünk a help fájlok importálásának menetére.
   Induljunk ki a "doit.vim" beépülőből. A beépülőhöz tartozó dokumentáció
"doit.txt". Először másoljuk a beépülőt a megfelelő könyvtárba. Mindezt
Vimből. Ha létezik már a könyvtár akkor ezeket a parancsokat átugorhatod.  >

	:!mkdir ~/.vim
	:!mkdir ~/.vim/plugin
	:!cp /tmp/doit.vim ~/.vim/plugin

A "cp" Unix parancs, MS-Windowsos megfelelője a  "copy"

Most készítsünk egy "doc" könyvtárat a 'runtimepath' változóban tárolt elérési
utak egyikében. >

	:!mkdir ~/.vim/doc

Másold a help fájlt a "doc" könyvtárba. >

	:!cp /tmp/doit.txt ~/.vim/doc

Itt jön a trükk, a helpfájlban deklarált tageket újra kell generálni, hogy
használatba vehesd az újakat. Lokális tagfájlok generálása a |:helptags|
paranccsal. >

	:helptags ~/.vim/doc

Most már használhatod: >

	:help doit

A parancs megkeresi "doit" helpfájljait. Ha az alábbi parancsot futtatva látsz
bejegyzést a telepített helpfájlról, akkor minden jól sikerült: >

	:help local-additions

A címsorok automatikusan frissülnek minden egyes telepítéskor, a lista átfogó
képet ad, hogy milyen további help fájlok érhetőek el.

Lokális helpfájlok létrehozása: |write-local-help|.

==============================================================================
*05.8*	A beállítások ablak

Ha egy beállítást keresel megkeresheted az |options|-ben, de itt egy másik
módszer: >

	:options

A beállítások listájával új ablakot nyit, az opciókat egy rövid sorban
összefoglalja. Az opciók tárgyak szerint csoportosítottak. Az <Enter>
megnyomásával a tárgyra ugorhatunk, <Enter> újbóli megnyomásával pedig
vissza (vagy CTRL-O).

A beállításokat itt meg tudjuk változtatni. Például menjünk a "display"
opcióra. Majd válasszuk ki a sorból az alábbit:

	set wrap	nowrap ~

Ha <Enter>t ütünk, a sor megváltozik erre:

	set nowrap	wrap ~

Az beállítás most ki lett kapcsolva.

Fölötte egy sorral egy rövid leírás található a 'wrap' opcióról. Ezt
kiválasztva a teljes dokumentáció megjelenik a 'wrap' opciót illetően.

A opciók esetleges String vagy szám argumentumait szerkeszthetjük. <Enter>
megnyomásával alkalmazhatjuk az új beállítást. Például vidd a kurzor pár sorra
feljebb erre a sorra:

	set so=0 ~

"$" segítségével állj rá a 0 karakterre. Cseréld ki ötre "r5" végül <Enter>
billentyűvel alkalmazd. Ha most mozgatod a kurzort, akkor a görgetés hamarabb
kezdődik mielőtt elérnéd az ablak alját, vagy tetejét. Ezt csinálja a
'scrolloff' opció. Görgetési offset.

==============================================================================
*05.9*	Gyakran használt beállítások

Elképesztően sok beállítás létezik, javarészüket talán sohasem fogod
használni. Itt összegyűjtöttük a leghasznosabbakat. Ne feledd, a ":help"
paranccsal további információkat tudhatsz meg a beállításokról (a beállítást
aposztrófok közé kell zárni). Például: >

	:help 'wrap'

Ha elrontasz egy változót, akkor az ampersand jellel (&) a beállítást
visszaállíthatod alapértelmezett értékre. Például: >

	:set iskeyword&


SORTÖRÉSEK HIÁNYA

A Vim normál esetekben tördeli a hosszú sorokat, hogy láthasd a teljes
szöveget. Olykor előfordulhat, hogy sokkal kényelmesebb a sorokat nem
tördelni. Tördelés kikapcsolása: >

	:set nowrap

A Vim automatikusan oda scrollozik a szöveghez (horizontálisan), ha az a nem
látható tartományban van. Tíz karakter görgetése oldalra: >

	:set sidescroll=10

Ez nem változtatja meg a fájlt, csupán a szerkesztőben való megjelenésére van
hatással.


MOZGÁSI PARANCSOK WRAPPELÉSE

A legtöbb elmozdulásért felelős parancs megáll a sor elejénél és a végénél. A
'whichwrap' opcióval ezen változtathatunk. Az alapbeállítás: >

	:set whichwrap=b,s

A "b" paraméter engedélyezi a <BS> billentyűt a sor legelső karakterén, így a
kurzor az előző sor legvégére kerül. Az "s" paraméter a <Space> billentyűt
engedélyezi a sor legutolsó karakterén, azaz a kurzor a következő sor elejére
érkezik.

A nyilakat (<Left>,<Right>) is definiálhatjuk (Normál módban) az alábbiak szerint: >

	:set whichwrap=b,s,<,>


Nyilak wrappelésének engedélyezése Insert módban ([,]): >

	:set whichwrap=b,s,<,>,[,]

További paraméterekről itt szerezhetsz tudomást, 'whichwrap'.


TABOK MEGJELENÍTÉSE

A tabokat nem látható karakterek. Láthatóvá tételük: >

	:set list

Most minden tabulátor ^I karakterként jelenik meg, a sorvégek $-el vannak
jelölve. Nagyszerű trükk, ha a fájl üres karaktereit kell megtalálnod.
   Az egyetlen hátránya a csúnya külalak, különösen akkor, ha a fájl sok tab
karaktert tartalmaz. Ha a terminálod kezeli a színeket, vagy a Vimet a GUIn
keresztül használod, akkor az üres karaktereket a vim ki tudja emelni a
'listchar' opció segítségével: >

	:set listchars=tab:>-,trail:-

Melynek hatására minden tabulátor ">---"-ként jelenik meg (több, vagy kevesebb
"-" karakterrel), a sorvégi üres karakterek pedig "-". Sokkal jobban néz ki,
ugye?


KULCSSZAVAK

Az 'iskeyword' beállítás paraméterei meghatározzák, hogy a szavak milyen
(alfanumerikustól) eltérő karaktereket tartalmazhatnak: >

	:set iskeyword
<	  iskeyword=@,48-57,_,192-255 ~

A "@" jelenti az összes alfanumerikus karaktert. "48-57" az ASCII
karakterekért felel (itt történetesen 0 és 9 között), a "192-255" pedig a
nyomtatható latin karakterek.
   Esetenként jól jönne, ha a Vim egy szónak tekintené azokat a szavakat,
   melyek például kötőjelet tartalmaznak. Azaz a "w" parancs az "upper-case"
   szóban nem állna meg a kötőjelnél. Ezt így lehet megvalósítani: >

	:set iskeyword+=-
	:set iskeyword
<	  iskeyword=@,48-57,_,192-255,- ~

A második kódrészlet alapján megállapíthatjuk, hogy a Vim egy vesszővel
gazdagította a paraméterlistát (illetve magával a "-" karakterrel). Az első sorban adjuk hozzá a kötőjelet, a
második sor csak egy lista a változó paramétereiről. (+= az operátor).
Eltávolítani az "-=" operátorral lehet. Például távolítsuk el az alsó
összekötőjelet: >

	:set iskeyword-=_
	:set iskeyword
<	  iskeyword=@,48-57,192-255,- ~

Az iskeyword változó tehát egy vesszővel elválasztott lista, melyeket a Vim a
szavak részének tekint.


ÜZENETEK

Kezdőbeállítások szerint a különbféle üzenetek számára csak egyetlen sor van
fenntartva. Ha az üzenet túl hosszú, akkor a Vim nem képes megjeleníteni az
üzenet egészét, ezért csak egy része válik láthatóvá.
   A 'cmdheight' beállítással meghatározható az üzenetek számára lefoglalt
sorok mennyisége. Például: >

	:set cmdheight=3

Így már az üzenetek kellemesen elférnek, viszont kevesebb helyünk marad a
szövegszerkesztésre.

==============================================================================

Következő fejezet: |usr_06.txt|  Szintaxis kiemelés használata

Jogi információk: lásd |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:

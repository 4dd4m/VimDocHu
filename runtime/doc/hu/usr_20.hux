*usr_20.txt*	Vim Verzió 8.2.	Utolsó módosítás: 2021 Nov 18

		  Bram Moolenaar: Vim felhasználói kézikönyv

		   Command-line parancsok gépelése gyorsan


A Vim tulajdonságai könnyebbé teszik a parancsok bevitelét, a ":" parancsok
rövidíthetőek, szerkeszthetőek és ismételhetőek. Kiegészítés kis túlzással
majdnem az összes adatbevitelhez elérhető.

|20.1|	Command-line szerkesztés
|20.2|	Command-line rövidítések
|20.3|	Command-line kiegészítés
|20.4|	Command-line történet
|20.5|	Command-line ablak

Következő fejezet: |usr_21.txt|  Visszatérés adott pontra
    Előző fejezet: |usr_12.txt|  Tippek, trükkök
  Tartalomjegyzék: |usr_toc.txt|

==============================================================================
*20.1*	Command-line szerkesztés

Parancsok (:) használatánál, kereséseknél (/ vagy ?), a Vim az ablak aljára
helyezi a kurzort, ahol begépelheted parancsaidat, vagy keresési mintáidat.
Ezt a területet hívjuk command-linenak. 

A parancsok szerkesztésének legintuitívebb módja a <BS> billentyű használata,
mely törli a kurzor előtti karaktert. A nyilak segítségével még visszább
léphetünk a már begépelt parancsunkban, kereséseinkben. 
Tegyük fel, hogy az alábbi keresést kezdeményezed: >

	:s/col/pig/

Már éppen készülnél <Enter> billentyűt ütni, amikor felfedezed a hibát. A
keresés tárgya a "cow" és nem a "col". Ennek korrigálásához öt <Left>
billentyűt kell ütnöd, illetve egy <BS> billentyűt az "l" karakter törléséhez:
>
	:s/cow/pig/

Ezen a ponton már mehet is az <Enter> billentyű, a parancs futtatásához  nem
szükséges a kurzort a parancs végére vinni.

A command-line használatának leggyakoribb gyorsbillentyűi:

	<Left>				egy karakter balra
	<Right>				egy karakter jobbra
	<S-Left>    vagy <C-Left>	egy szót balra
	<S-Right>   vagy <C-Right>	egy szót jobbra
	CTRL-B	    vagy <Home>		command-line elejére
	CTRL-E	    vagy <End>		command-line végére

	Megjegyzés:
	<S-Left> (shift billentyű és bal nyíl) and <C-Left> (control billentyű
	és bal nyíl). Léteznek olyan billentyűzetek, melyeken ezek (és a többi
	listázott) billentyűkombináció nem működik.

A kurzort az egérrel is pozícionálhatod.


TÖRLÉS

Ahogy azt már említettük, a <BS> billentyű törli a kurzortól balra
elhelyezkedő karaktert. Egy teljes szó törléséhez használd a CTRL-W
kombinációt.

	/the fine pig ~

		     CTRL-W

	/the fine ~

CTRL-U eltávolítja a teljes command-line tartalmát.


TÚLGÉPELÉS

Az <Insert> billentyű vált a beszúrás és a csere módok között. Kezdésnek
vegyük az alábbi szöveget.

	/the fine pig ~

Vidd a kurzort a "fine" szó kezdetére <S-Left>-el kétszer, (vagy <Left> nyolc
alkalommal, ha <S-Left> nem működik). Most nyomj <Insert> billentyűt és gépeld
be a "great" szót. 

	/the greatpig ~

Hoppá, a szóközünk eltűnt. Ha <BS> billentyűn töröd a fejed, az kitörölné a
"t" betűt a "great" szóból, ezért nem használhatod. Helyette, nyomj meg még
egyszer az <Insert> billentyűt és vidd be a szóközt.

	/the great pig ~


MEGSZAKÍTÁS

Úgy gondoltad, hogy most futtatni fogsz egy ":" vagy "/" parancsot, de
meggondoltad magad, CTRL-C vagy <Esc> billentyűkkel megszakíthatod a bevitelt
(mely egyúttal törli az összes eddig bevitt adatot).

	Megjegyzés:
	Az <Esc> billentyű egy univerzális "kilépés" billentyű. Érdekesség, a
	Vi program ebben az esetben futtatná a parancsot. Annak érdekében,
	hogy ez ne hibaként legyen elkönyvelve, a Vim megszakítja a
	command-line bevitelt. A 'cpoptions' beállítás Vi kompatibilissé
	tehető. Ezért ha olyan mappinget futtatsz, mely eredetileg Vi-ra
	íródott, az <Esc> billentyű megtartható. Bárhogyan is döntesz, CTRL-C
	minden esetben működik.

Ha csak éppen beléptél command-line (és még nem írtál be semmit ) módba a <BS> 
karakter kilép a command-line módból, ":" és "/" egyaránt.

==============================================================================
*20.2*	Command-line rövidítések

A ":" parancsok egy része túl hosszú. Már említettük, hogy a ":substitute"
parancs lerövidíthető (":s"). Ez alapértelmezett mechanizmus. Minden
parancsnak létezik rövidített megfelelője.

Milyen rövid lehet egy parancs? Parancsot 26 különböző módon kezdhetünk (angol
abc), de ennél sokkal több parancsunk van. Például, a ":set" parancs szintén
":s"-el kezdődik, de ":s" nem fogja meghívni a ":set" parancsot, hiszen az már
foglalt a ":substitute" számára. ":set" rövidítése ezért ":se".
   Ha a parancs rövidített formája több parancsot is meghívhat, abban az
esetben is csak egyet fog. Ebben nincs felfedezhető logika, meg kell őket
tanulnod. A helpfájlokban a parancs mellett a rövidítése is fel van tüntetve.
Például: >

	:s[ubstitute]

Ez azt jelenti, hogy a ":substitute" rövidített alakja: ":s". A többi karakter
opcionális, ezért ":su" ugyanúgy működni fog, mint ":sub".

A dokumentációban vagy a parancs teljes alakját látod, vagy pedig azt a
rövidített alakot, amely még olvasható. Például, a ":function" rövidíthető így
":fu". Azért, hogy mindenki számára világosabb legyen, ":fun" rövidítést
használunk.

Vim szkriptek írásakor ajánlott a parancsok teljes alakját használni.
Olvashatóbbá teszi a kódot, ha később változtatni kell rajta. Kivéve egy-két
triviális parancs, mint a ":w" (":write") és ":r" (":read").
   Kifejezetten zavarba ejtő lehet az ":end", hiszen olvasható ":endif"-nek,
":endwhile"-nak vagy ":endfunction"-nak.


BEÁLLÍTÁSOK RÖVID ALAKJA

A dokumentációban a teljes alakjukban találkozhatsz velük. Számos opció
rövidítéssel is rendelkezik. A ":" parancsoktól eltérően itt csak egyetlen egy
rövid névvel hivatkozhatóak. Például, az 'autoindent' rövid alakja az 'ai', az
alábbi két hivatkozás azonos: >

	:set autoindent
	:set ai

A teljes és rövid alakokat tartalmazó összefoglaló listát itt találhatod:
|option-list|.

==============================================================================
*20.3*	Command-line kiegészítés

Nagy erőssége a Vimnek, már csak ezért is megéri Vi-ról Vimre váltani. Ha
egyszer már hozzászoktál, nem fogsz tudni élni nélküle.

Tegyük fel, hogy a könyvtár az alábbi fájlokat tartalmazza:

	info.txt
	intro.txt
	bodyofthepaper.txt

Az utolsó fájl szerkesztését így kezdeményezheted (ha imádod a gépelést): >

	:edit bodyofthepaper.txt

Szignifikánsan nagyobb a hibalehetőségek száma (hibaüzenetet, kezdheted az
egészet elölről). Egészítsünk: >

	:edit b<Tab>

Mindkét parancs ugyan azt csinálja. Mi történt? A <Tab> billentyű
kiegészítette a kurzor előtti szót. Ebben az esetben a "b"-t. A Vim tudta,
hogy a könyvtárban ez az egyetlen fájl, ami "b"-vel kezdődik és
feltételezhetően pontosan erre van szükségünk.

Most gépeld: >

	:edit i<Tab>

A Vim hangjelzést ad: >

	:edit info.txt

A jelzés azt jelenti, hogy több egyezés is lehetséges. A kiegészítés pedig a
legelső találatra egészített ki (betűrendben). Ha most még egyszer <Tab>-ot
ütsz, akkor kiegészíti a következő fájlnevet a sorrendben: >

	:edit intro.txt

Az első <Tab> billentyű nem arra egészített ki, mint ahogyan azt vártuk ezért
még egyszer meg kellett nyomnunk. Több egyezés esetén az összes fájlnevet
listában fogod megkapni. 
   Következő <Tab> leütésekor, ha az utolsó fájlon állunk, akkor  az fogjuk
visszakapni, amit begépeltünk: >

	:edit i

És az egész kezdődik elölről.  A szerkesztő végigjárja a találati listát.
CTRL-P billentyűvel navigálhatunk az ellenkező irányba:

	   <---------------------- <Tab> -------------------------+
								  |
		  <Tab> -->		       <Tab> -->
	:edit i		      :edit info.txt		   :edit intro.txt
		  <-- CTRL-P		       <-- CTRL-P
	   |
	   +---------------------- CTRL-P ------------------------>


KONTEXTUS

Ha ":set i"-t gépeltél ":edit i" helyett, akkor a <Tab> billentyű így
viselkedik: >

	:set icon

Mi? Miért nem a ":set info.txt"-re váltott? Azért, mert a Vim képes kontextus
alapján felismerni és alkalmazni a kiegészítést. Az előző parancsok fogják a
kiegészítést meghatározni. A szerkesztő tudja, hogy nem adhatsz át fájlnevet a
":set" parancs számára, beállítást viszont igen.
   <Tab> billentyű pedig ismét görgeti végig a találatokat (van egy pár, ezért
jobb ha több karakterrel kezdesz): >

	:set isk<Tab>

És a teljes parancs: >

	:set iskeyword

Most írj egy "=" jelet, majd <Tab>: >

	:set iskeyword=@,48-57,_,192-255

Szimplán csak annyit történt, hogy a Vim kiírta a változó tartalmát, így
könnyedén szerkesztheted.
   A kiegészítés mindig olyan dologra történik, amit éppen vár a Vim az adott
kontextusban. Lesznek pillanatok, amikor nem azt fogod kapni, amit vársz. Ez
történhet azért, mert a Vim nem tudja, hogy mit szeretnél, vagy mert
kiegészítés még nem lett implementálva az adott szituációhoz. Ha ez
megtörténik, akkor a <Tab> billentyű leütése ^I karakterként megjelenik a
command-line ablakban.


TALÁLATOK LISTÁZÁSA

Több találat esetén a CTRL-D billentyűvel listát kapsz a kiegészítés
lehetséges értékeiről. Például, üss egy CTRL-D az alábbiak után: >

	:set is

és a lista: >

	:set is
	incsearch  isfname    isident    iskeyword  isprint
	:set is

A Vim megjelenítette a listát és a command-lineban hagyta amit eddig beírtál.
Most megnézheted, hogy valóban szerepel-e az az érték a listában, melyet
szerettél volna. Ha nem, akkor <BS> billentyűvel korrigálhatsz. Ha egynél több
találat van, akkor <Tab> billentyűvel görgethetsz a találatok között.
   Ha figyelmes voltál, észrevehetted, hogy az "incsearch" nem "is" szóval
kezdődik. Jelen esetben az "is" az "incsearch" rövidített alakja. (A
beállításoknak rövid alakjuk is van). A Vim gondol arra, hogy talán éppen a
rövidítést szeretnéd kibontani a hosszabb névre.


ÉS MÉG TÖBB

A CTRL-L parancs kiegészíti a szót az utolsó közös karakterig. Ha azt írod be,
hogy ":edit i" egy olyan könyvtárban, melyben "info.txt" és "info_backup.txt"
is szerepelnek, akkor ezt kapod: ":edit info".

A 'wildmode' beállítás befolyásolja a kiegészítés mechanizmusát. 
A 'wildmenu' beállítással találatainkról egy menüt kaphatunk. 
A 'suffixes' beállításával prioritást állíthatunk fel, melynek alapján egyes
fájlokat a szerkesztő a lista végére rendez.
A 'wildignore' beállítással pedig egy fájlokat, fájlcsoportokat el is
tüntethetünk ebből a listából.

Ezekről bővebben itt olvashatsz: |cmdline-completion|

==============================================================================
*20.4*	Command-line történet

A 3. fejezetben már említést tettünk róla. <Up> billentyűvel a régebbi
parancsok felé böngészhetsz, míg <Down> az újabbak felé navigál.

Valójában öt historyról beszélhetünk. Melyekről itt beszélünk: ":", "/", "?".
A "/" és "?" parancsokkal végzett munka egy historyba kerül, hiszen mindkettő
a keresésért felel. A másik három history a kifejezések, debug mód parancsok
és az input() függvény számára van fenntartva. |cmdline-history|.

Tegyük fel, hogy kiadtad tíz paranccsal ezelőtt a ":set" parancsot. Meg
szeretnéd ismételni ezért gyorsan tízszer <Up> billentyűt ütsz. Létezik egy
gyorsabb módszer: >

	:se<Up>

A Vim megvizsgálja az eddig bevitt parancsaid, melyek ":se"-vel kezdődtek. Jó
esély van rá, hogy ez a ":set" parancs lesz. Ha mégsem, akkor sem baj,
legalább nem kell túl sokszor <Up> billentyűt ütnöd (kivéve, ha a ":set" az 
egyetlen parancs amit eddig kiadtál).

A <Up> billentyű összehasonlítja az általad bevitt szöveget a már historyban
lévővel. Csak az egyező parancsokat használja. 
   Ha nem találtad meg azt, amit kerestél, akkor a <Down> billentyűvel
korrigálhatsz, CTRL-U-val pedig újrakezdheted a gépelést.

A history listázása (összes bejegyzés): >

	:history

Ez a ":" parancsok historyja. A keresés historyjának a listázása: >

	:history /

CTRL-P egyenértékű az <Up> billentyűvel, viszont CTRL-P nem veszi figyelembe a
command-line tartalmát. Hasonlóan a CTRL-P billentyűhöz, CTRL-N pedig a <Down>
billentyűt helyettesíti ugyanilyen módon.

==============================================================================
*20.5*	Command-line ablak

A command-lineba való gépelés eltér az Insert módban megszokott beviteltől.
Nem sok parancsnak engedélyezi, hogy változtasson a szövegen. A legtöbb
esetben ez teljesen OK, viszont néha elég komplex parancsot kell bevinnünk.
Itt jön képbe a command-line ablak.

A command-line ablak megnyitása: >

	q:

A parancs egy kis ablakot nyit meg a képernyő alján, mely tartalmazza a
command-line historyt és egy üres sort az ablak alján:

	+-------------------------------------+
	|other window			      |
	|~				      |
	|file.txt=============================|
	|:e c				      |
	|:e config.h.in			      |
	|:set path=.,/usr/include,,	      |
	|:set iskeyword=@,48-57,_,192-255     |
	|:set is			      |
	|:q				      |
	|:				      |
	|command-line=========================|
	|				      |
	+-------------------------------------+

Most Normal módban vagy. Mozoghatsz a "hjkl" billentyűkkel. Például öt sorral
feljebb: 5k, ezzel a mozdulattal az ":e config.h.in" soron vagyunk. Menjünk az
"i" karakterrel a "$h" paranccsal és cseréljük le a kiterjesztést "cwout". A
sort erre változtattuk:

	:e config.h.out ~

<Enter> hatására a sor lefut (függetlenül attól, hogy Insert vagy Normal
módban vagyunk), a command-line ablak pedig bezáródik. 
   A history nem változott a parancs futtatása után sem (az általunk
szerkesztett sor, az új parancs melyet futtattunk viszont bekerült legalulra). 
   Az előző példában a "?config" keresési parancsot használhattuk volna, hogy
megtaláljuk a parancs sorát. Nem biztos, hogy egyértelmű, hiszen
command-line ablakban visszafelé keresni nem túl intuitív. Egyszerre csak egy
command-line ablak lehet.

==============================================================================

Következő fejezet: |usr_21.txt|  Visszatérés adott pontra

Jogi információk: lásd |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:

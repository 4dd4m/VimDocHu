*usr_31.txt*	Vim Verzió 8.2.	Utolsó módosítás: 2020 Jul 28

		  Bram Moolenaar: Vim felhasználói kézikönyv

			     A GUI (ki)használása


A Vim remekül működik a terminálban, de a GUI fel van szerelve extrákkal. A
grafikus fájlböngészők környezeti menüjéből gyorsan megnyithatjuk a fájlt,
amire szükségünk van. A választási lehetőségek ablakban jelennek meg, extra
menüket adhatunk hozzá, melyeket a billentyűzet segítségével könnyedén
bejárhatunk.

|31.1|	A fájlböngésző
|31.2|	Megerősítés
|31.3|	Menüelemek
|31.4|	A Vim ablak pozíciója és mérete
|31.5|	Egyebek

Következő fejezet: |usr_32.txt|  A visszavonás-fa
    Előző fejezet: |usr_30.txt|  Programok szerkesztése
  Tartalomjegyzék: |usr_toc.txt|

==============================================================================
*31.1*	A fájlböngésző 

A Fájl/Megnyitás... menüpontot választva a elénk tárul a fájlböngésző. A kellő
bóklászással megnyithatjuk a kívánt fájlt. De mi van akkor, ha a fájlt
splitben szeretnénk megnyitni? A beépített fájlkezelőben nincs ilyen opció. A
Vim GUI-ban nincs ilyen menü. Kiválaszthatod az Ablak menü Felosztás menüjét,
mielőtt megnyitnád a fájlt (Fájl/Megnyitás)..., de ez túl sokáig tart. 
   A parancsok többségét gépeled, miért ne gépelnéd ezt  is? A command-linet
grafikus módban is elérjük. Split létrehozásához használd a "browse"
parancsot és kombináld a "split"-tel: >

	:browse split

Miután kiválasztod a fájlt, a ":split" parancs azonnal felosztja az ablakot.
Ha meggondoltad magad és nem választasz fájlt, a split nem lesz létrehozva. 
   Ha a fájlnév argumentumkét egy könyvtárat adunk meg, akkor a fájlböngésző
azon a ponton fog megnyílni. Például: >

	:browse split /etc

A fájlböngésző megnyílik az "/etc" könyvtárban.

A ":browse" parancs bármilyen parancs elé beszúrható, ami fájlt nyit meg.
   Ha nem adunk meg könyvtárat, akkor a Vim maga eldönti, hogy hol nyitja meg
a fájlböngészőt. Alapértelmezés szerint a legutolsó elérési út nyílik meg.
Ezért, ha előzőleg megnyitottál valamit a "/usr/local/share" könyvtárban
":browse split", akkor következő alkalommal is ":browse" a "/usr/local/share"
könyvtárból nyílik a grafikus fájlböngésző.
   A 'browsedir' opcióval ezen változtathatunk, három lehetőségünk van:

	last		az utolsó könyvtár (alapértelmezés)
	buffer		a bufferben lévő fájl elérési útjának a használata
	current		munkakönyvtár (pwd)

Például, ha a "/usr" könyvtárban vagy és szerkeszted a
"/usr/local/share/readme" fájlt, majd kiadod az alábbi parancsokat: >

	:set browsedir=buffer
	:browse edit

A fájlböngésző a "/usr/local/share" könyvtárban nyílik meg. Alternatíva: >

	:set browsedir=current
	:browse edit

Pedig a "/usr" könyvtárban indítja a böngészőt.

	Megjegyzés:
	A legtöbb fájlkezelőben a billentyűzet segítségével is navigálhatunk
	(nem csak az egérrel). Erre nem térünk ki, mert rendszerenként
	különböző a módszer. Feltételezzük, hogy a rendszered
	dokumentációjában utána tudsz nézni a billentyűparancsoknak. 

Ha a szövegszerkesztőt a terminálban használod, fájljaidat ugyanilyen
módszerrel megkeresheted. Bár, ez a ":browse" paranccsal nem működik. Használd
az ":Explore" parancsot. Lásd |netrw-browse|.

==============================================================================
*31.2*	Megerősítés

A szerkesztő próbál megóvni bennünket a véletlen felülírásoktól vagy, hogy
egyéb módon adatot veszítsünk. Ha valami olyasmit szeretnél tenni, ami erre
lehetőséget ad, akkor hibaüzenetet kapsz, ami azt javasolja, hogy "!" jellel
erősítsd meg a műveletet.
   Gépelhetjük újra? Nem. Párbeszédablakot kapunk, melyben megerősíthetjük a
műveletet ("OK" vagy "Mégsem").
   Például, módosítottál az aktív fájlon. A következő paranccsal már egy másik
fájl szeretnél szerkeszteni: >

	:confirm edit foo.txt

A párbeszédablak pedig előbukkan:

	+-----------------------------------+
	|				    |
	|   ?	Save changes to "bar.txt"?  |
	|				    |
	|   YES   NO		 CANCEL     |
	+-----------------------------------+

Dönthetsz. Ha mented a fájl változásait, akkor válaszd az "IGEN"-t. Ha a
változásokat eldobod (örökre): "NEM". A "MÉGSEM" gomb pedig megszakítja az új
fájl megnyitását, a fókusz visszakerül az aktív ablakba, így lehetőségünk van
a fájlt elmenteni.

Nem csak a ":browse", de a ":confirm" parancsot is beszúrhatjuk bármely olyan
parancs elé, amely fájlt szerkeszt. Kombinálhatóak akár így is: >

	:confirm browse edit

A parancs párbeszédablakot jelenít meg, ha a buffer tartalma változott, majd
megnyitja a fájlböngészőt.

	Megjegyzés:
	A párbeszédablakban a billentyűzet segítségével választhatunk az
	opciók között. Általában a <Tab> billentyű járja körbe a válaszokat.
	Az <Enter> pedig kiválaszt. Természetesen rendszerfüggő.

Terminálos szerkesztő esetében a ":confirm" parancs működése teljesen
megegyező. A párbeszédablak helyett a képernyő alján üzenetben kapjuk meg a
választási lehetőségeket. >

	:confirm edit main.c
<	Save changes to "Untitled"? ~
	[Y]es, (N)o, (C)ancel:  ~

Egyetlen egy billentyűvel választ adhatunk. A választást követően nincs
szükség az <Enter> megnyomására.

==============================================================================
*31.3*	Menüelemek

A billentyűzet segítségével az összes parancs kiadható, viszont a menük
leegyszerűsíthetik a gépelés mennyiségét. Még azt sem kell tudnunk pontosan,
hogy az adott parancs mit hív meg, cserébe meg kell fognunk az egeret.
   A menüket billentyűkkel is kiválaszthatjuk. Rendszerenként eltérő lehet, de
általánosságban az elv működik. Az <Alt> billentyűt kell megnyomnunk, melyet a
menü aláhúzott karaktere követ. Például, <A-w> (<Alt> és w), az ablak menüt
nyitja le.
   A menüben a "split" opció "p" betűje aláhúzott. Kiválasztásához nyomjunk
<Alt>, majd p billentyűket.

Miután a főmenü megnyílt, a kurzorbillentyűkkel <Up><Down> mozoghatunk az
almenük között, a <Left><Right> gombokkal pedig bezárhatjuk és megnyithatjuk
az almenüket. <Enter> kiválasztja a menüelemet.

A főmenüket kiválasztó <Alt> és a mappeket tartalmazó <Alt> billentyűk között
ütközés van. A 'winaltkeys' opció meghatározza, hogy mit csináljon a Vim  az
<Alt> billentyű megnyomásakor.
   Az első érték a "menu". Ha kombináció egy menüelemhez tartozik, akkor nem
mappelhető, ezt kivéve nincs korlátozás a mappeket illetően.
   Ha az érték "no" akkor az <Alt> billentyű egyáltalán nem használható a
menüelemek eléréséhez, viszont <Alt> teljes értékűen mappelhető.
   Ha az érték "yes", akkor a Vim az <Alt> megnyomásával kiválasztja az adott
menüt, de nem akadályozza meg, hogy az esetleges mappek lefussanak.

==============================================================================
*31.4*	A vim ablak pozíciója és mérete

Az ablak aktuális pozíciójának kiíratása: >

	:winpos

Ez csak GUI üzemmódban működik. A kimenet:

	Window position: X 272, Y 103 ~

Az értékek pixelben értendőek. Most, hogy már van viszonyítási alapunk, az
ablakot bárhová áthelyezhetjük. Például, mozgassuk az ablakot balra 100
pixellel. >

	:winpos 172 103
<
	Megjegyzés:
	Offszet jelentkezhet az ablak valós és végleges helyzete között. Ez
	azért van, mert az ablakkezelő keretet rajzol az ablak köré (ami nincs
	beleszámolva a végleges pozícióba).

Ha ezt a parancsot bemásolod a vimrcbe, akkor az ablak mindig ugyanabban a
helyzetben fog megnyílni.

Az ablak méretét a Vim karakterekben számolja. Ez viszont függ attól, hogy
milyen nagy betűtípus alkalmazunk. A jelenlegi méretet így kérheted le: >

	:set lines columns

Az ablakméret megváltoztatása a 'lines' és vagy 'columns' opciókkal: >

	:set lines=50
	:set columns=80

A méretet terminál üzemmódban is lekérhetjük, de a beállítása nem fog működni,
hiszen ez nem lehetséges a legtöbb terminálban.

Elindíthatod a gvim X-Windows verzióját, argumentummal a méret és pozíció
megadható: >

	gvim -geometry {width}x{height}+{x-offset}+{y-offset}

{width} és {height} karakterekben értendőek, {x-offset} és {y-offset}
pixelekben. Példa: >

	gvim -geometry 80x25+100+300

==============================================================================
*31.5*	Egyebek

A gvimmel az e-mailjeidet is szerkesztheted. Az e-mail kliensedben add meg
szerkesztőként a gvimet. Ha megpróbálod, akkor ez nem fog menni: Az e-mail
kliens azt hiszi, hogy már befejezted a fájl szerkesztését, holott a gvim még
mindig fut!
   Azt történik, hogy a gvim egy külön shellben indul (és nem abban, amiben
indítottad). Normál esetben ez jó, hiszen a munkát a shellben továbbra is
folytathatod, nem kell megvárni a gvim bezárását. Ha viszont tényleg meg
szeretnéd várni, hogy a gvim bezáródjon, akkor használd az "-f" argumentumot,
mely elindítja a gvimet abban a shellben, ahol kiadtad a parancsot és megvárja
a program bezárását: >

	gvim -f file.txt

Az "-f" jelentése előtérben (foreground). A Vim blokkolja a shellt a
szerkesztés befejezéséig.


GUI KÉSLELTETETT INDÍTÁSA

Unix rendszeren megtehetjük azt, hogy a Vimet először terminálból indítjuk.
Feltételezve, hogy a munkafolyamatot megelőzően is a terminálban
tevékenykedünk. A fájlok szerkesztése során dönthetünk úgy, hogy innentől
kezdve a Vim GUI verzióját használjuk tovább. Semmi akadálya: >

	:gui

Megnyílik a GUI, ettől a ponttól kezdve már nem a terminált használjuk. Az
"-f" argumentum használható, mely blokkolja a shellt addig, amíg a szerkesztőt
be nem zárjuk.

A GVIM BEÁLLÍTÓFÁJL

A gvim induláskor olvassa a gvimrc fájl. Hasonlóan a Vim vimrc fájljához. A
gvimrc fájlt csak GUI specifikus beállítások tárolására használjuk. Például a
'lines' opcióval az ablakméretet állíthatjuk: >

	:set lines=55

Ezt a terminálban nem tudod megtenni (fix méretű), kivéve azokat az xterm
terminálokat, melyek támogatják az átméretezést.
   A gvimrc fájlt a vimrc fájlhoz azonos elérési utakon keresi a szerkesztő.
Normális esetben ez "~/.gvimrc" Unix rendszereken és "$VIM/_gvimrc MS-Windows
A $MYGVIMRC környezeti változó be van rá állítva, ezért a fájl szerkesztéséhez
is használhatod: >

	:edit $MYGVIMRC
<
   Ha valami oknál fogva nem szeretnéd az alapértelmezett gvimrc fájlt
használni, akkor az "-U" argumentummal egy másik beállítófájl tölthetsz be: >

	gvim -U thisrc ...

Ezért lehet több gvimrc fájlod, mindegyik más típusú szerkesztésre, például az
egyikben sokkal nagyobb betűméret stb.
   Ha nem szeretnél betölteni beállítófájlt, akkor: >

	gvim -U NONE ...

==============================================================================

Következő fejezet: |usr_32.txt|  A visszavonásfa

Jogi információk: lásd |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:

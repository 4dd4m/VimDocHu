*usr_30.txt*	For Vim version 8.2.	Last change: 2007 Nov 10

		  Bram Moolenaar: Vim felhasználói kézikönyv

			    Programok szerkesztése


Rengeteg parancs nyújt támaszt a programok szerkesztése során. A program
fordítása,  majd egyből a legelső hibára ugrás. Automatikus behúzás, formázott
kommentek.

|30.1|	Fordítás
|30.2|	C fájlok behúzása
|30.3|	Automatikus behúzás
|30.4|	Egyéb behúzások
|30.5|	Tabulátorok és szóközök
|30.6|	Kommentek formázása

Következő fejezet: |usr_31.txt|  A GUI használata
    Előző fejezet: |usr_29.txt|  Navigáció kódbázisban
  Tartalomjegyzék: |usr_toc.txt|

==============================================================================
*30.1*	Fordítás

Meg kell ismerjük a Vim következő nagy parancs csomagját, a "quickfix"
parancsokat. Használatukkal úgy fordíthatunk, hogy nem kell elhagynunk a
szerkesztőt, végigjárhatjuk a hibák listáját, kísérletet tehetünk a javításra. 
Majd új ciklust kezdünk, fordítunk és javítjuk a hibákat addig, amíg az összes
hibától megszabadulunk.

A következő parancs a "make" programot futtatja (azokkal az argumentumokkal,
melyeket megadsz) és rögzíti a hibákat: >

    :make {arguments}

A hibákat egy listában összegyűjti a Vim és az első találathoz navigál.
Köved végig az alábbi ":make" munkafolyamatot. A ":make" beírása utáni
kimenet:

	:!make | &tee /tmp/vim215953.err ~
	gcc -g -Wall -o prog main.c sub.c ~
	main.c: In function 'main': ~
	main.c:6: too many arguments to function 'do_sub' ~
	main.c: At top level: ~
	main.c:10: parse error before '}' ~
	make: *** [prog] Error 1 ~

	2 returned ~
	"main.c" 11L, 111C ~
	(3 of 6): too many arguments to function 'do_sub' ~
	Press ENTER or type command to continue ~

Ebből azt láthatjuk, hogy hiba forrás a "main.c" fájl. Ha <Enter> billentyűt
nyomsz, akkor a szerkesztő a "main.c" fájlt fogja megnyitni, a kurzort a 6.
sorra pozícionálva. Nem kell meghatároznod sem a fájl helyét, sem a kurzor
helyét. A Vim tudja, hogy hová kell mennie hiba esetén.

		+---------------------------------------------------+
		|int main()					    |
		|{						    |
		|	int i=3;				    |
      kurzor -> |	do_sub("foo");				    |
		|	++i;					    |
		|	return (0);				    |
		|}						    |
		|}						    |
		| ~						    |
		|(3 of 12): too many arguments to function 'do_sub' |
		+---------------------------------------------------+

Ugrás a következő hibára: >

	:cnext

A kurzor a 10. sorba kerül (fájl utolsó sora), ahol az extra '}' található.
   Ha a hibaüzenet nem fér ki, akkor a Vim lerövidíti az üzenetet. A teljes
hibaüzenet elérése: >

	:cc

Az összes hibaüzenetről a ":clist" paranccsal kaphatsz egy egysoros
áttekintést, mely így néz ki: >

	:clist  
>	3 main.c: 6:too many arguments to function 'do_sub' ~
	5 main.c: 10:parse error before '}' ~

A listában csak a fájlnévvel és a sor számával beazonosítható hibák
szerepelnek. Feltételezi, hogy ezek a sorok érdekelhetnek bennünket leginkább.
Előfordulhat, hogy a nem felismerhető sorok tartalmaznak valami olyasmit, amit
szívesen megvizsgálnál. A linker kimenete, például egy nem létező függvény. Az
összes hibaüzenet megjelenítéséhez adj a parancshoz egy "!" jelet:
>
	:clist!
<	1 gcc -g -Wall -o prog main.c sub.c ~
	2 main.c: In function 'main': ~
	3 main.c:6: too many arguments to function 'do_sub' ~
	4 main.c: At top level: ~
	5 main.c:10: parse error before '}' ~
	6 make: *** [prog] Error 1 ~

A Vim kiemeli az aktív hibát. Visszatérés az előző hibára: >
>
	:cprevious

Navigáció a hibalistában:

	:cfirst		első hibához
	:clast		utolsó hibához
	:cc 3		a 3. hibához


MÁSIK FORDÍTÓ HASZNÁLATA


A 'makeprg' határozza meg, hogy a ":make" parancs milyen parancsot hív meg.
Általában az érték "make", de a Visual C++ felhasználóknak ezt az értéket át
kell állítaniuk "nmake"-re az alábbi paranccsal: >

	:set makeprg=nmake

Argumentumokat is hozzáfűzhetsz, viszont a speciális karaktereket escapelni
kell \ karakterrel. Például: >

	:set makeprg=nmake\ -f\ project.mak

A speciális Vim kulcsszavak is használhatóak. A % karakter a jelenlegi
fájlnevet jelenti. Szóval ha ezt a parancsot futtatod: >

	:set makeprg=make\ %:S

Ha a main.c fájlt szerkeszted, majd kiadod a ":make" parancsot, akkor a
parancs ez lesz: >

	make main.c

Nincs túl sok értelme, ezért még finomítani kell, most használjuk a :r (root)
módosítót: >

	:set makeprg=make\ %:r:S.o

A parancs így fog lefutni: >

	make main.o

A módosítókról még több: |filename-modifiers|.


A RÉGI ERROR LIST

Tegyük fel, hogy fordítanál egy programot a ":make" paranccsal. Egy fájlhoz
figyelmeztető üzenet jelent meg, a másik fájlhoz pedig egy hibaüzenet.
Korrigálod a hibát, majd lefuttatod még egyszer a ":make" programot, tesztelve
a hibát. Meg szeretnéd tekinteni a figyelmeztető üzenet is. Ez viszont nem
jelent meg újra, hiszen a fájlt nem sikerült lefordítani. Az előző
hibalistához visszatérhetsz: >

	:colder

Aztán a ":clist" és a ":cc {nr}" paranccsal a figyelmeztető üzenet helyére
ugorhatsz.
   A frissebb hibalistához váltás: >

	:cnewer

A Vim tíz hibalistát tart számon.


FORDÍTÓK CSERÉJE

Az 'errorformat' opcióban be kell állítanunk, hogy a fordítónk milyen milyen
formátumban listázza a hibaüzeneteket. A változó szintaxisa elég komplex,
viszont bármelyik fordítóra meg lehet írni a megfelelő formátumot. Erről több
magyarázatot itt találsz: |errorformat|.

Lehet, hogy több fordítót is használsz. Így a 'makeprg' opció manuális
állítgatása nem egyszerű feladat. Ezért a Vim egy paranccsal zárja rövidre a
témát. Például, váltás Microsoft Visual C++ fordítóra: >

	:compiler msvc

Ami betölti az "msvc" fordítóhoz szükséges beállításokat.
   Hozd létre a saját fájlod, így |write-compiler-plugin|.


KIMENET ÁTIRÁNYÍTÁS

A ":make" parancs egy error fájlba átirányítja a futtatott program kimenetét.
A működése számos tényezőtől függ, például a 'shell'. Ha a ":make" parancsod
nem kapja el a kimenetet, ellenőrizd a 'makeef' és a 'shellpipe' opciót. A
'shellquote' és a 'shellxquote' is számíthatnak.

Alternatív megoldásként a programot lefordítható egy külön ablakban, melynek
kimenetét fájlba tudjuk irányítani, azonban ennek feldolgozásához a Vimnek
először be kell olvasnia: >

	:cfile {filename}

A hibák közötti ugrás teljesen megegyezik a ":make" parancs navigációjával.

==============================================================================
*30.2*	C stílusú szöveg behúzása

A program olvashatóbb, ha struktúrált behúzásokkal látjuk el. A Vim számos
módon igyekszik tehermentesíteni bennünket. A C és C stílusú programnyelvek,
mint a Java vagy C++, állítsd be a 'cindent' opciót. A szerkesztő ismeri a C
nyelvet is mindent megtesz, hogy a programunkra megfelelő behúzásokat
alkalmazzon. Állítsd be a 'shiftwidth' opciót, mellyel meghatározhatod a kód
mélységét. Négy szóköz elég. Egy ":set" parancsot adjunk ki: >

	:set cindent shiftwidth=4

Így ha valami olyasmit gépelünk, hogy "if (x)", akkor a következő sor behúzása
automatikusan egy szinttel megnövekszik.

					        if (flag){
	automatikus behúzás	        --->	    do_the_work();
	automatikus behúzás csökkentése <--	if (other_flag) {
	automatikus behúzás             --->	    do_file();
	behúzás tartása				    do_some_more();
	automatikus behúzás csökkentése <--	}

A kapcsos zárójelek {} gépelésénél, a szövegtörzs eleje be lesz húzva, a
behúzás pedig csökkenni fog, ha '}' karaktert gépelünk, hiszen a Vim tudja,
hogy körülbelül mit szeretnél írni.

Mellékhatásként segít a kódban szereplő korai hibák kiszűrésére. Ha } jelet
gépelsz, és a következő behúzás váratlanul nagy, akkor valószínűleg valamit
elfelejtettél lezárni (}). A "%" parancs segítségével derítsd ki a hiba okát.
   A hiányzó ) és ; szintén extra behúzást eredményez. Ilyenkor érdemes
visszamenőleg megvizsgálni az utolsó sorokat.

A Vimben szerencsére nem kell sokat törődni a behúzásokkal, melyek elcsúsznak
ha sorokat mozgatunk, törlünk. A "=" operátor automatikusan behúzza a
sorainkat. Legegyszerűbb formája: >

	==

Ez csak az aktív sorra vonatkozik. Mint minden operátor, három módon
használatos. Visual módban, "=" behúzza a kijelölés sorait. Hasznos
szöveg-objektum a "a{" mely az aktív {} blokkon végez műveletet, azaz a blokk
újra indentálása: >

	=a{

Ha feltűnően rosszul néz ki a kódod, akkor az egész fájlon futtasd: >
>
	gg=G

Abban az esetben, ha a fájlodat gondosan kézzel húztad be, a parancs nem
ajánlott. Az automatikus behúzás az esetek többségében jó, de akadhatnak
kivételek, amikor manuálisan közbe kell avatkoznunk.


IDENTÁLÁSI STÍLUS BEÁLLÍTÁSA

Ahány ház, annyi szokás. Az alapértelmezett stílus megfelel a programozók 
90%-ának.  Léteznek különböző stílusok, melyek mentén, ha szeretnéd,
igazíthatod a kódod.
   A 'cinoptions'-nak nincs értéke. Beállításával megadhatod, hogy milyen
stílusú legyen kódod. Például, ha a {} jeleket így szeretnéd használni:

	if (flag) ~
	  { ~
	    i = 8; ~
	    j = 0; ~
	  } ~

Beállítása: >

	:set cinoptions+={2

Amennyiben érdekel az összes opció: |cinoptions-values|.

==============================================================================
*30.3*	Automatikus behúzás

Valószínűleg nem szeretnéd a 'cindent' opciót minden egyes alkalommal
manuálisan beállítani C fájlok szerkesztésekor. Így teheted automatikussá: >

	:filetype indent on

A valóság az, hogy ezzel a beállítással sokkal több dolgot állítottunk be, nem
csak a 'cindent'-et. Először is, engedélyeztük a fájltípus megállapítást, amit
már a szintaxis kiemelés kapcsán előzőleg beállítottunk. 
   Ha a fájltípus ismert, akkor a Vim megkeresi az adott fájlhoz tartozó
behúzás-fájlt, melynek alapján a szerkesztő szervezi a behúzásokat.

Ha nem tetszik az automatikus behúzás, akkor ki is kapcsolhatod: >

	:filetype indent off

Ha csak egy fájltípus behúzását nem kedveled, akkor így kerülheted el. Hozz
létre egy fájl a következő tartalommal: >

	:let b:did_indent = 1

Most pedig mentsd el a fájlt, az alábbiak szerint: 

	{directory}/indent/{filetype}.vim

A {filetype} fájl kiterjesztése, mint "cpp" vagy "java".  A {filetype}
megjelenik (így ellenőrizhető, hogy tényleg jó-e a fájltípus: >

	:set filetype

Ha itt írod be, akkor a kézikönyv fájltípusát fogod megkapni:

	filetype=help ~

A {directory} részhez egy runtime könyvtárat kell megadni. Nézd meg a
'runtimepath' változód tartalmát: >

	set runtimepath

A fájlt másold a vessző előtti (első) elérési útra. 'runtimepath' tartalma:

	runtimepath=~/.vim,/usr/local/share/vim/vim60/runtime,~/.vim/after ~

Például "~/.vim" használod a {directory}-hoz.  Akkor a teljes elérési utad:

	~/.vim/indent/help.vim ~

Ahelyett, hogy a behúzásokat kapcsolgatod, írj saját behúzás-fájlt. Itt minden
el van magyarázva: |indent-expression|.

==============================================================================
*30.4*	Egyéb behúzás

A legegyszerűbb módszer az 'autoindent' opció használata. Csak másolja a
behúzást az előző sorból. Egy picivel okosabb a 'smartindent'. Ez akkor jön
jól, ha a fájltípushoz nincs behúzás-fájlunk. A 'smartindent' nem annyira
okos, mint a 'cident', de okosabb 'autoindent'-nél.
   A 'smartindent' beállítással, egy extra behúzás van adva minden { karakter
után, és eggyel csökkentve } karakter után. További extra behúzás van adva a
'cinwords' beállításban meghatározott szavak után. A # karterrel kezdődő
sorok speciálisak: minden behúzás el van távolítva. Erre azért van szükség,
hogy a preprocesszor direktívái az első oszlopban kezdődhessenek. A következő
sorban a behúzás folytatódik.


BEHÚZÁSOK KORREKCIÓJA

Ha az 'autoindent' vagy a 'smartindent'-et használod, az előző sor
indentálásának folytatásához sokszor hozzá kell adni, vagy el kell távolítani
egy 'shiftwidth' értéknyi behúzást. Insert módban a probléma orvosolható
CTRL-D (behúzás csökkentése) és CTRL-T (behúzás növelése parancsokkal).
   Például, egy shell szkriptet írsz, melynek így kell kinéznie:

	if test -n a; then ~
	   echo a ~
	   echo "-------" ~
	fi ~

Kezdésnek állítsunk az alábbi opciókon: >

	:set autoindent shiftwidth=3

Begépeled az első sort, <Enter>, és a második sor:

	if test -n a; then ~
	echo ~

Most kell egy extra behúzás (CTRL-T), amely után: 

	if test -n a; then ~
	   echo ~

A CTRL-T parancs Insert módban egy 'shiftwidth' értéknyi behúzást add hozzá a
sor elejéhez (bárhol is legyen a kurzor a sorban).
   Folytatod a második sorral, <Enter> és a harmadik sor. Most minden behúzás
a helyén van. Majd <Enter> és az utolsó sor. Most itt tartunk:

	if test -n a; then ~
	   echo a ~
	   echo "-------" ~
	   fi ~

Az extra behúzás eltávolításához CTRL-D (Insert módban), ami töröl egy
'shiftwidth' értéket a sor elejéről. 
   Normál módban, a ">>" és "<<" operátorok, szóval háromféleképpen
használhatjuk. A leghasznosabb: >

	>i{

A parancs egy behúzást ad a {} jelek között szereplő blokknak. A { és }
tartalmazó (határoló) sorokat nem kapnak behúzást (">a{" paranccsal igen). Az
alábbi példában a kurzor a "printf" függvényen van:

	eredeti szöveg		">i{" után		">a{" után

	if (flag)		if (flag)		if (flag) ~
	{			{			    { ~
	printf("yes");		    printf("yes");	    printf("yes"); ~
	flag = 0;		    flag = 0;		    flag = 0;  ~
	}			}			    } ~

==============================================================================
*30.5*	Tabulátorok és szóközök

A 'tabstop' alapértelmezett értéke  8. Megváltoztathatod ugyan, de ebből
később probléma lehet. Egyes programok nem tudják majd értelmezni, ha valami
egzotikus értéket állítasz be. Például, az esetek nagy részében a külsős
szerkesztők rosszul jeleníthetik meg a fájlt, hiszen nekik egy előre beállított
értékű 'tabstop' van beállítva (mely általában 8). Ezért, ha ettől 'tabstop'
értéket állítunk be a Vimben, akkor a fájl itt vagy ott (attól függ melyik
programmal hoztuk létre), hibásan fog megjelenni. A (mátrix) nyomtatók
'tabstop' értéke szintén nyolc, ezért a legjobb választás ha a beállítást nem
állítjuk el. (Ha olyan fájlt kell szerkesztened, melynek értéke eltér az
alapértelmezettől, akkor a |25.3| fejezet alapján korrigálhatod).
   Forráskód írása során, ha nyolc karaktert használunk a behúzásokhoz, akkor
gyorsan a jobb margónál találjuk magunkat. Egy karakter nem elég, hogy
vizuálisan jól megkülönböztethető legyen a behúzás. Sokan négy karaktert
használnak, ami jó kompromisszum.
   Szóval a <Tab> billentyű  nyolc karaktert húz be, viszont mi csak néggyel
szeretnénk behúzni, ezért a <Tab> billentyűt nem használhatjuk. Két megoldás
közül választhatunk:

    1. <Space> és <Tab> karakterek vegyes használata. Mivel a <Tab> nyolc
    karaktert foglal, így a fájl kevesebb karakterből fog állni. A <Tab>
    beszúrása gyorsabb, mint nyolc szóközt gépelni, ráadásul a <Backspace>
    billentyű is gyorsabban dolgozik.

    2. Csak <Space> karakterek használata. Ezzel megkerülhető a
    szerkesztőprogramok közötti 'tabstop' differencia.

Szerencsére a Vim mindkét megoldást nagyon jól kezeli


SZÓKÖZÖK ÉS TABULÁTOROK

Ha tabokat és a szóközöket vegyesen használod, akkor csak szerekessz tovább.
Az alapértelmezett Vim beállításokkal nem lesz problémád.
   Könnyebbé teheted az életed, a 'softtabstop' opcióval.
A beállítással a <Tab> billentyű megáll a 'softtabstop' értékeken, de a
színfalak mögött a Vim automatikusan tabulátorokat és szóközöket használ
vegyesen.
   Miután kiadod a parancsot, a <Tab> billentyű 4 oszloppal viszi a kurzort
jobbra: >

	:set softtabstop=4

Ha az első oszlopban vagy, nyomj <Tab>-ot, ez négy karaktert húz beljebb. A
második alkalommal, a Vim elveszi az előzőleg beillesztett 4 szóközt, melyet
tabra cserél (4+4=8). Annyi <Tab> karaktert használ a szerkesztő, amennyit
lehetséges, a többit kitölti szóközzel.
   A törlés ehhez képest fordítottan működik. A <Backspace> mindig a
'softtabstop' értékével töröl. A sor újra kiértékelődik, az üres karaktereket
pedig tabulátorra és szóközökre cseréli a megfelelő arányban.
   Az alábbi ábra azt mutatja, hogy mi történik a <Tab> billentyű utáni <BS>
használatakor. A "." karakter jelzi a szóközt, a "------->" pedig a
tabulátort:

	billetnyű		  eredmény ~
	<Tab>			  ....
	<Tab><Tab>		  ------->
	<Tab><Tab><Tab>		  ------->....
	<Tab><Tab><Tab><BS>	  ------->
	<Tab><Tab><Tab><BS><BS>   ....

Kipróbálhatjuk a 'smarttab' opciót. Ha ez be van állítva, akkor a Vim
'shiftwidth' értéknyit használ a <Tab> karakterekhez (a behúzásnál), valamint
valódi tabulátort az első karakter gépelésekor. Ezért a <BS> billentyű a
'softtabstop'-tól eltérően fog működni.


CSAK SZÓKÖZÖK

Ha egyáltalán nem szeretnél tabulátort használni, akkor engedélyezd a
'expandtab' opciót: >

	:set expandtab

Így a <Tab> karaktereinket teljes egészében szóköz fogja kitölteni (a tab 
értékének megfelelő mennyiségű szóközökkel).
   A <Backspace> karakter szóközönként töröl, ami azt jelenti, hogy egy <Tab>
karaktert nyolc <Backspace> karakterrel tudunk törölni. Ha a behúzni szeretnél
(Insert mód), akkor a CTRL-D sokkal gyorsabb.


TABULÁTOROK CSERÉJE SZÓKÖZÖKKEL (ÉS VISSZA)

Az 'expandtab' beállítása nem lesz hatással a fájlban már szereplő
tabulátorokra. Más szavakkal, a fájlban minden tabulátor tabulátor marad. Ha
át szeretnéd konvertálni a tabulátor karaktereket szóköz karakterekre, akkor
használd a ":retab" parancsot: >

	:set expandtab
	:%retab

Ezzel a Vim lecseréli az összes tabulátor karakter szóközökre és megtartja a
sorokban lévő tabulátorokat (azok a tabulátorok, mely az első nem üres
karakterek után következik a sorban). A maradékot is át tudod konvertálni,
csak adj a parancshoz egy "!" jelet: >

	:%retab!

Légy óvatos, mert ez egy veszélyes művelet, hiszen ez cseréi a stringekben
lévő tabulátorokat is. Ha nem vagy biztos benne, akkor ezzel a paranccsal le
tudod ellenőrizni: >

	/"[^"\t]*\t[^"]*"

Ezért a stringekben ajánlott a kemény (hard) tabulátorok használata. Cseréld
le őket erre: "\t", így nem érhet meglepetés.

Egy másik megoldás: >

	:set noexpandtab
	:%retab!

==============================================================================
*30.6*	Kommentek formázása

A Vim érti a kommentjeidet, ezért pillanatok alatt képes egységesen formázni 
őket. A formázási parancsokat ne teszteld ebben a fájlban, mert a komment
végén lévő ~ karakterek miatt a formázás nem megfelelő.
   Tegyük fel, hogy például az alábbi kommentet írtad: 

	/* ~
	 * This is a test ~
	 * of the text formatting. ~
	 */ ~

Vidd a kurzort a komment kezdetére és gépeld: >

	gq]/

A "gq" egy szövegformázó operátor. A "]/" egy elmozdulás (a komment végére).
Végeredmény:

	/* ~
	 * This is a test of the text formatting. ~
	 */ ~

Figyeld meg, hogy a Vim tökéletesen kezelte a komment elejét.
  Ha ez kényelmetlen, akkor a kijelölésünket el tudjuk végezni Visual módban,
melyet a "qt" parancs követ.

Új sor hozzáadásához állítsd a kurzort a komment egyik sorára, és nyiss új
sort (o,O), az új sor a komment részeként jön létre:

	/* ~
	 * This is a test of the text formatting. ~
	 * ~
	 */ ~

A Vim automatikusan beillesztette a * karaktert, ezért nyugodtan fókuszálhatsz
innentől a komment írására. Ha sor meghaladja a 'textwidth' értékét, akkor a
Vim új sort kezd a vezető * karakterrel természetesen:

	/* ~
	 * This is a test of the text formatting. ~
	 * Typing a lot of text here will make Vim ~
	 * break ~
	 */ ~

Ennek működéséhez viszont az alábbi flageket definiálni kell a
'formatoptions'-ban:

	r	* karakter beszúrása <Enter> billentyűnél Insert módban
	o	* karakter beszúrása "o" vagy "O" használatánál Normal módban
	c	komment sorainak tördelése 'textwidth' szerint

Lásd |fo-table| még több flag megismeréséhez.


KOMMENT DEFINIÁLÁSA

A 'comments' opció felelős a kommentek kinézetéért. A Vim képes megkülönböztetni
az egysoros kommenteket, illetve az olyan kommenteket, melyek első, közép és
végei különbözőek.
   Az egysoros kommentek szintaxisa nyelvenként eltérőek. C++-ban //, a
Makefájlokban #, a Vim szkriptekben pedig ". Például, így vehetjük rá, hogy a
Vim C++ típusúként kezelje a kommentjeinket: >

	:set comments=://

A bejegyzésekben ":" karakter választja el a flageket az értékektől (melyek
alapján a Vim felismeri a kommentet). A 'comments' elemek általános alakja: 

	{flags}:{text}

A {flag} lehet üres is, mint ebben az esetben.
   Számos elemet összevonhatunk vagy elválaszthatunk vesszők segítségével.
Ezzel megoldható a különböző típusú kommentek felismerése (egy fájlban).
Például, szerkesszünk egy e-mail üzenetet. Válasz esetén az eredeti üzenet
megjelenik a szerkesztőben (a sorok elején lévő ">" és "!" karakterekkel). Ezt
az alábbi paranccsal  állíthatjuk be: >

	:set comments=n:>,n:!

Az opció két elemet tartalmaz, az első a ">" jelekkel kezdődő sorokat tekinti
kommentnek, míg a másik "!" karakterekkel kezdődő sorokat. Mindkettő az "n"
flaget használja. Ez azt jelenti, hogy a kommentek egymásba ágyazhatóak (nest).
Ezért a ">" karakterrel kezdődő sor tartalmazhat egy másik kommentet (a kezdő
">" után. A szöveg formázása pedig:

	> ! Did you see that site? ~
	> ! It looks really great. ~
	> I don't like it.  The ~
	> colors are terrible. ~
	What is the URL of that ~
	site? ~

Próbálkozz meg a 'textwidth' különböző értékre állításával, például 80, és
formázd a kommentet a "gq" paranccsal. Az eredmény:

	> ! Did you see that site?  It looks really great. ~
	> I don't like it.  The colors are terrible. ~
	What is the URL of that site? ~

Ha figyelmes vagy, akkor kiszúrtad, hogy a Vim nem mozgatta át a különböző
típusú kommenteket. Az "I" karakter elfért volna az első sor elejére is 
("> !"), de a Vim tudta, hogy az egy másik típusú komment (">").


HÁROMRÉSZES KOMMENT

A C stílusú kommentek "/*" karakterekkel, a komment törzse "*", komment vége
pedig "*/" karakterekkel kezdődnek. A 'comments' opcióban lévő bejegyzésük így
néz ki: >

	:set comments=s1:/*,mb:*,ex:*/

A kezdőpont "s1:/*"-ként van definiálva. Az "s" jelenti a komment kezdetét. A
":" karakter választja el a flaget az értéktől, mely itt "/*". Az "1" flag az
offszetet jelöli, azaz a középső rész egy karakterrel beljebb fog kezdődni.
   A középső rész "mb:*" az "m" karakterrel kezdődik, mely jelzi, hogy ez a
középső (middle) rész. A "b" flag pedig arra utal, hogy a komment elején lévő
* karaktert egy üres (blank) karakternek kell követnie. Ha ez nem történik
meg, akkor a komment "*így kezdődik", ahelyett, hogy "* így kezdődne" (emiatt
csúszhat a formázás is).
   A definíció vége, az "ex:*/", "e" háromrészes komment vége (end). Az "x"
flagnek speciális jelentése van: miután a Vim beszúrta a "*" karaktert, a /
gépelése eltávolítja az üres karaktereket.

További lehetőségekért olvasd el: |format-comments|.

==============================================================================

Következő fejezet: |usr_31.txt|  A GUI használata

Jogi információk: lásd |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:

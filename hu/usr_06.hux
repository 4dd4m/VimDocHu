*usr_06.txt*	Vim verzió" 8.2.  Frissítve: 2019 Jun 01

		  Bram Moolenaar: Vim Felhasználói Kézikönyv

		       Szintakszis kiemelés használata


Unalmas a fekete-fehér szöveg. A színek életre keltik fájljaid. Nem csak
szépen néz ki, de a munkát is felgyorsítja.

|06.1|	Bekapcsolás
|06.2|	Nincsenek, vagy rossz színek?
|06.3|	Különböző színek
|06.4|	Színekkel és anélkül
|06.5|	Nyomtatás színekkel
|06.6|	További irodalom

Következő fejezet: |usr_07.txt|  Több fájl szerkesztése
    Előző fejezet: |usr_05.txt|  A beállításaid
  Tartalomjegyzék: |usr_toc.txt|

==============================================================================
*06.1*	Bekapcsolás

Az egész egy egyszerű pranaccsal kezdődik: >

	:syntax enable

A legtöbb szituációban ez már színt visz a fájljaidba. A Vim felismeri a
fájltípust és annak megfelelő kiemelést tölt be. Hirtelen a kommentek kékek, a
kulcsszavak barnák, a stringek vörösek. Ez teszi áttekinthetővé a fájlt.
Később észre fogod venni, hogy a pusztán fekete-fehér szöveg nagyon lelassít.

Ha konstans szeretnéd a funkciót használni akkor ":syntax enable" parancsot
kell beírnod a  |vimrc| fájlodba.

Ha csak akkor szeretnél szintaxiskiemelést használni, ha a terminálod
támogatja a színeket, akkor ezt add hozzá a |vimrc| fájlodhoz: >

	if &t_Co > 1
	   syntax enable
	endif

Ha csak kizárólag a GUI verzióban szeretnél élni ezzel a lehetőséggel, akkor
":syntax enable"-t kell betenned a |gvimrc| fájlba.

==============================================================================
*06.2*	Nincsenek, vagy rossz színek?

Számos oka lehet, ha nem látsz színeket:
There can be a number of reasons why you don't see colors:

- A terminálod nem támogatja a színes megjelenítést.
	A Vim nem csak színesen, de a fékövér és dőlt karaktereket is képes
	megjeleníteni, amely nem minden esetben produkál kellemes kinézetet.
	Unix rendszeren az xterm terminált javaslom, ami az XFree86 projekt
	része: |xfree-xterm|.

- A terminálod nem támogatja a színes megjelenítést és a Vim errpl nem tud.
	Győződj meg arról, hogy a $TERM beállításod helyes. Például, xterm
	használata esetén: >

		setenv TERM xterm-color
<
	vagy (a shelledtől függően): >

		TERM=xterm-color; export TERM

<        A terminál nevének meg kell egyezni az általad használttal. ha még
	most sem működik, akkor olvasd el ezt |xterm-color|, amiben találsz
	pár módszert arra, hogy hogyan lehet színeket megjeleníteni a Vimmel
	(nem csak xterm terminálokhoz).

- A fájtípus felismerés sikertelen volt.
	Az összes fájltípus ismerete szinte lehetetlen, ezért tájékoztatni
	kell a Vimet, hogy milyen fájllal van dolga. A parancs: >

		:set filetype
<
	Ha a végeredmény "filetype=", akkor a Vim valóban nem ismeri az adott
	fájlt. A fájltípust manuálisan kell beállítani: >

		:set filetype=fortran

<	To see which types are available, look in the directory
	$VIMRUNTIME/syntax.  For the GUI you can use the Syntax menu.
	Setting the filetype can also be done with a |modeline|, so that the
	file will be highlighted each time you edit it.  For example, this
	line can be used in a Makefile (put it near the start or end of the
	file): >

		# vim: syntax=make

<	You might know how to detect the file type yourself.  Often the file
	name extension (after the dot) can be used.
	See |new-filetype| for how to tell Vim to detect that file type.

- There is no highlighting for your file type.
	You could try using a similar file type by manually setting it as
	mentioned above.  If that isn't good enough, you can write your own
	syntax file, see |mysyntaxfile|.


Or the colors could be wrong:

- The colored text is very hard to read.
	Vim guesses the background color that you are using.  If it is black
	(or another dark color) it will use light colors for text.  If it is
	white (or another light color) it will use dark colors for text.  If
	Vim guessed wrong the text will be hard to read.  To solve this, set
	the 'background' option.  For a dark background: >

		:set background=dark

<	And for a light background: >

		:set background=light

<	Make sure you put this _before_ the ":syntax enable" command,
	otherwise the colors will already have been set.  You could do
	":syntax reset" after setting 'background' to make Vim set the default
	colors again.

- The colors are wrong when scrolling bottom to top.
	Vim doesn't read the whole file to parse the text.  It starts parsing
	wherever you are viewing the file.  That saves a lot of time, but
	sometimes the colors are wrong.  A simple fix is hitting CTRL-L.  Or
	scroll back a bit and then forward again.
	For a real fix, see |:syn-sync|.  Some syntax files have a way to make
	it look further back, see the help for the specific syntax file.  For
	example, |tex.vim| for the TeX syntax.

==============================================================================
*06.3*	Different colors				*:syn-default-override*

If you don't like the default colors, you can select another color scheme.  In
the GUI use the Edit/Color Scheme menu.  You can also type the command: >

	:colorscheme evening

"evening" is the name of the color scheme.  There are several others you might
want to try out.  Look in the directory $VIMRUNTIME/colors.

When you found the color scheme that you like, add the ":colorscheme" command
to your |vimrc| file.

You could also write your own color scheme.  This is how you do it:

1. Select a color scheme that comes close.  Copy this file to your own Vim
   directory.  For Unix, this should work: >

	!mkdir ~/.vim/colors
	!cp $VIMRUNTIME/colors/morning.vim ~/.vim/colors/mine.vim
<
   This is done from Vim, because it knows the value of $VIMRUNTIME.

2. Edit the color scheme file.  These entries are useful:

	term		attributes in a B&W terminal
	cterm		attributes in a color terminal
	ctermfg		foreground color in a color terminal
	ctermbg		background color in a color terminal
	gui		attributes in the GUI
	guifg		foreground color in the GUI
	guibg		background color in the GUI

   For example, to make comments green: >

	:highlight Comment ctermfg=green guifg=green
<
   Attributes you can use for "cterm" and "gui" are "bold" and "underline".
   If you want both, use "bold,underline".  For details see the |:highlight|
   command.

3. Tell Vim to always use your color scheme.  Put this line in your |vimrc|: >

	colorscheme mine

If you want to see what the most often used color combinations look like, use
this command: >

	:runtime syntax/colortest.vim

You will see text in various color combinations.  You can check which ones are
readable and look nice.

==============================================================================
*06.4*	With colors or without colors

Displaying text in color takes a lot of effort.  If you find the displaying
too slow, you might want to disable syntax highlighting for a moment: >

	:syntax clear

When editing another file (or the same one) the colors will come back.

If you want to stop highlighting completely use: >

	:syntax off

This will completely disable syntax highlighting and remove it immediately for
all buffers.  See |:syntax-off| for more details.

							*:syn-manual*
If you want syntax highlighting only for specific files, use this: >

	:syntax manual

This will enable the syntax highlighting, but not switch it on automatically
when starting to edit a buffer.  To switch highlighting on for the current
buffer, set the 'syntax' option: >

	:set syntax=ON
<
==============================================================================
*06.5*	Printing with colors				*syntax-printing*

In the MS-Windows version you can print the current file with this command: >

	:hardcopy

You will get the usual printer dialog, where you can select the printer and a
few settings.  If you have a color printer, the paper output should look the
same as what you see inside Vim.  But when you use a dark background the
colors will be adjusted to look good on white paper.

There are several options that change the way Vim prints:
	'printdevice'
	'printheader'
	'printfont'
	'printoptions'

To print only a range of lines,  use Visual mode to select the lines and then
type the command: >

	v100j:hardcopy

"v" starts Visual mode.  "100j" moves a hundred lines down, they will be
highlighted.  Then ":hardcopy" will print those lines.  You can use other
commands to move in Visual mode, of course.

This also works on Unix, if you have a PostScript printer.  Otherwise, you
will have to do a bit more work.  You need to convert the text to HTML first,
and then print it from a web browser.

Convert the current file to HTML with this command: >

	:TOhtml

In case that doesn't work: >

	:source $VIMRUNTIME/syntax/2html.vim

You will see it crunching away, this can take quite a while for a large file.
Some time later another window shows the HTML code.  Now write this somewhere
(doesn't matter where, you throw it away later):
>
	:write main.c.html

Open this file in your favorite browser and print it from there.  If all goes
well, the output should look exactly as it does in Vim.  See |2html.vim| for
details.  Don't forget to delete the HTML file when you are done with it.

Instead of printing, you could also put the HTML file on a web server, and let
others look at the colored text.

==============================================================================
*06.6*	További Irodalom

|usr_44.txt|  A saját szintaxis kiemelésed
|syntax|      Az összes részlet

==============================================================================

Következő fejezet: |usr_07.txt|  Több fájl szerkesztése

Jogi információk: lásd |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:

*usr_40.txt*	For Vim version 8.2.  Last change: 2020 Sep 02

		  Bram Moolenaar: Vim felhasználói kézikönyv

			   Új parancsok létrehozása


A Vim nagyszerűen kiegészíthető. A gyakran kiadott parancs sorozatokat
összegyűjtheted és egy új parancsot hozhatsz létre belőlük. Vagy definiálj
újra egy létező parancsot másképpen. Az atuocommandokkal a parancsok
automatikusan futtathatóak.

|40.1|	Billentyű mappek
|40.2|	Command-line parancsok definiálása
|40.3|	Atuocommandok

Következő fejezet: |usr_41.txt|  Vim szkriptek
    Előző fejezet: |usr_32.txt|  A visszavonásfa
  Tartalomjegyzék: |usr_toc.txt|

==============================================================================
*40.1*	Billentyű mappek

Az egyszerű mappekkel már foglalkoztunk a |05.3| fejezetben. A lényeg, hogy a
billentyűleütésekkel (általában több) billentyűleütést idézünk elő, mely egy
egyszerű, de erőteljes mechanizmus.
   A mappelés legegyszerűbb formája, amikor egy billentyűleütés (vagy
kombinációt) egy meghatározott kombinációhoz kapcsolunk. A funkció
billentyűknek (az <F1> kivételével) nincs előre meghatározott jelentésük a
Vimben, ezért remekül használhatjuk őket kezdeti mapjeink létrehozásához: >

	:map <F2> GoDate: <Esc>:read !date<CR>kJ

Az fenti parancs három módot egyesít. A "G" a fájl aljára ugrik, az "o" pedig
új sort nyit alulra (Normal mód), Insert módba lépés után beírja a "Date: "
szöveget, majd az <Esc> billentyű kilép az Insert módból. 
   Minden speciális billentyűt <> karakterek (angle bracket) közé kell zárnunk. 
A definícióban be kell írnunk ezeket a karaktereket (<F1>), tehát nem elég csak
F1-et nyomnunk, ez sokkal olvashatóbbá teszi a mappeket a későbbiek során.
   A :" karakterrel command-line módba lépünk. A ":read !date" beolvassa a
"date" parancs kimenetét és hozzáfűzi az aktív sorhoz. A <CR> a "<F13>:read"
parancs futtatásához szükséges.
   Jelen pillanatban a szövegünk:

	Date:  ~
	Fri Jun 15 12:54:34 CEST 2001 ~

Most "k" sort vált felfelé irányban, "J" pedig összefűzi a sorokat.
   Annak eldöntésére, hogy milyen billentyűkel használj a mapjeidben Lásd
|map-which-keys|.


MAPPELÉS ÉS MÓDOK

A ":map" parancs Normal módú mappeket hoz létre. Az összes módhoz tartozik egy
mappelési parancs. Például: ":imap" az Insert módhoz. Insert módban
létrehozhatunk egy olyan mappet, ami a dátumot illeszti be a kurzor alá: >

	:imap <F2> <CR>Date: <Esc>:read !date<CR>kJ

Nagyon hasonlóan néz ki a fent említett Normal módú maphez képest, azonban a
definíció eleje különbözik. Az <F2>-re létrehozott Normal módú map még mindig
érvényben van, hiszen a két mód nem üti egymást (":map" Normal - ":imap" 
Insert). Tehát semmi akadálya, hogy <F2>-t definiáljuk a többi módban (például
Visual, Select,Visual-Block stb).
   Megfigyelhetjük, hogy a map Insert módban kezdődik és Normal módban
végződik (ha Insert módban szeretnél maradni, akkor add hozzá a hozzáfűzés
parancsot a map végéhez "a").

Mappelhető módok:

	:map		Normal, Visual és Operator-pending
	:vmap		Visual
	:nmap		Normal
	:omap		Operator-pending
	:map!		Insert és Command-line
	:imap		Insert
	:cmap		Command-line

Operator-pending módban akkor vagyunk, ha egy operátort használunk (például
"d" vagy "y"). Mihelyst leütjük az operátort, a Vim egy elmozdulási parancsra
vár, ez az Operator-pending mód. Az operátor kiegészítése után, például "dw" a
parancs lefut és visszakerülünk Normal módban. 
    A folyamat: Normal mód -> Operator-pending -> Normal mód.

Tegyük fel, hogy lére szeretnél hozni egy mapet, amely az <F7> billentyűt
használja. A teljes parancs d<F7>, ami egy {} karakterekkel közrezárt
kódblokkot töröl. Ennek mintájára pedig a y<F7> parancsot, ami a kódblokkot a
névtelen regiszterbe másolja. Az első lépés, hogy az <F7> hivatkozzon a
kódblokkra. A parancs: >

	:omap <F7> a{

A "d" parancs várakozik végrehajtásra, melynek <F7> átadja a szöveg-objektumot
"a{". Hasznos map lehet abban az esetben, ha a {} karakterek nehézkesen
gépelhetőek.



MAPPEK LISTÁZÁSA

Az összes map listázásához hívd meg a ":map" parancsot argumentumok nélkül,
vagy azokkal a variánsokkal, melyek leszűkítik a találatokat módokra. A
kimenet:

	   _g		 :call MyGrep(1)<CR> ~
	v  <F2>		 :s/^/> /<CR>:noh<CR>`` ~
	n  <F2>		 :.,$s/^/> /<CR>:noh<CR>`` ~
	   <xHome>	 <Home>
	   <xEnd>	 <End>


Az első oszlopban a map módját láthatjuk (v,n). "n" Normal mód, "i" Insert
mód stb. Ha az első oszlopban nem szerepel mód, akkor azt Normál és Visual
módban is használhatjuk. 
   Ellenőrizhetjük, hogy a speciális billentyű mappeket felismert-e a
szerkesztő (ez csak akkor érvényes, ha a terminálunk kezeli a színeket).
Például, ha <Esc> billentyűt színesen látod, akkor az escape billentyűt
reprezentálja. A billentyűt nem ismerte fel a szerkesztő, ha a szöveggel
egyszínű (ekkor csak egyszerűen öt karakterként szerepel a mapben <,E,s,c,>).


ÚJRAMAPPELÉS

A Vim megvizsgálja, hogy a mapben szereplő tartalom elindíthat-e egy másik
mappet. Például, a fenti példában az <F2> mapjét így rövidíthetjük. >

	:map <F2> G<F3>
	:imap <F2> <Esc><F3>
	:map <F3>  oDate: <Esc>:read !date<CR>kJ

Normál módban <F2> a fájl utolsó sorára ugrik, aztán megnyomja az <F3>
gombot. Insert módban <F2> befejezi az Insert módot (<Esc>), majd <F3>-at
használ,vagy végül az igazi munkát <F3> végzi el.

Valószínűleg a Vimes pályafutásod elején nem sokat fogod használni az Ex
módot, ezért a "Q" billentyűt szeretnéd mappelni a szöveg formázásához (a
régebbi verziókban ez volt az alapértelmezett): >

	:map Q gq

Azért ne zárjuk ki teljesen az Ex mód használatát. Mappeljük a "gQ"-t "Q"-ra,
így az Ex mód elérhető marad: >

	:map gQ Q

Mi történik? Ha a "gQ" "Q"-ra let mappelve. Eddig rendben. De aztán a "Q"
pedig a "gq"-hez lett mappelve, ezért ha "gQ"-t gépelünk, annak eredménye "gq"
lesz és nem kerülünk Ex módba egyáltalán.
   Mappeljük újra a billentyűt, oly módon, ami megakadályozza, hogy a
kombináció újra legyen mappelve: >

	:noremap gQ Q

Ezzel a Vim tudni fogja, hogy a map jobb oldalán lévő billentyűket úgy kell
végrehajtania , hogy azok újabb mappeket hívnának meg:

	:noremap	Normal, Visual és Operator-pending
	:vnoremap	Visual
	:nnoremap	Normal
	:onoremap	Operator-pending
	:noremap!	Insert és Command-line
	:inoremap	Insert
	:cnoremap	Command-line


REKURZÍV MAPPEK

Ha a map önmagára hivatkozik, akkor végtelen ciklus jön létre. 
   Például a programod forráskódjában az első sor tartalmazza a verziószámot.
Az összes fájlt megnyitod szerkesztésre "vim *.txt". Az első fájlon vagy. Hozd
létre az alábbi mappet: >

	:map ,, :s/5.1/5.2/<CR>:wnext<CR>,,

A ",," karakterek elindítják a mappet. Az "5.1" lecserélődik "5.2"-re az első
sorban. Menti a fájlt, majd a következőre lép ":wnext". A map ",,"
karakterekkel ér véget, ami újra futtatja a mappet, csere, írás, következő
fájl, stb.
   Ez addig megy, amíg hibába nem ütközünk (a hiba akkor keletkezhet, ha a
csere tárgya "5.1" nem található, vagy ha nem tudjuk megnyitni a következő
fájlt ":wnext", mert az utolsó fájlon állunk).
   Hiba esetén a map futása azonnal megszakad (történhet ez a akár a fájllista
közepén is). CTRL-C manuálisan szakítja meg a szkriptet (CTRL-Break
Windowson).


MAPPEK TÖRLÉSE

A ":unmap" parancs segítségével érvényteleníthetőek a mappek. Módspecifikusan
is eltávolíthatóak a mappek:

	:unmap		Normal, Visual és Operator-pending
	:vunmap		Visual
	:nunmap		Normal
	:ounmap		Operator-pending
	:unmap!		Insert és Command-line
	:iunmap		Insert
	:cunmap		Command-line

Ezzel a trükkel olyan mappet hozhatunk létre, ami működik Normal és
Operator-pending módban, viszont Visual módban nem. A Mappet készítsük el
mindhárom módhoz ":map", majd távolítsuk el a Visual módú mappet ":unmap": >

	:map <C-A> /---><CR>
	:vunmap <C-A>

A <C-A> itt billentyű kombinációként szerepel és nem öt karakterként 
(<,C,-,A,>).

Az összes map eltávolításáért a |:mapclear| parancs felel. A variációit most
már kitalálhatod. Óvatosan, hiszen ez eltávolítja az alapértelmezett mappeket
is.


SPECIÁLIS KARAKTERÉT

A ":map" parancs egyéb parancsok követhetik. A | karakter két parancsot
választ el. Ez sajnos azt jelenti, hogy a | karakterként nem használhatjuk a
mappek belsejében. Ha használni szeretnéd mappekben is, akkor így add meg:
<Bars>. Például: >
>
	:map <F8> :write <Bar> !checkin %:S<CR>

A probléma jelentkezik az ":unmap" parancsnál is, ráadásul figyelned kell a
parancsokat követő szóközökre. Az alábbi két parancs különböző: >
>
	:unmap a | unmap b
	:unmap a| unmap b

Az első parancs megpróbálja eltávolítani "a " mapját (szóközzel).

A szóköz billentyűt így tudjuk mapben <Space>-ként tudjuk definiálni (hét
karakter): >

	:map <Space> W

Ezzel a szóköz billentyű egy SZÓT lép előre.

Nem helyezhető el komment " rögtön a map után, hiszen az map részét képezné.
Kommentet úgy tudunk elhelyezni, hogy a | karakterrel új (üres) parancsot 
kezdünk, melyet a komment követ |". Például: >

	:map <Space> W|     " Use spacebar to move forward a word


MAPPEK ÉS RÖVIDÍTÉSEK

A rövidítések nagyon hasonlítanak az Insert módú mappekhez. Az argumentumok
kezelése azonos, különbség csak futtatási mechanizmusban van. A rövidítések
akkor futnak le, ha leütjük az első nem szó karakter a rövidítés után. A
mappek akkor futnak le, ha leütöttük a map utolsó karakterét.
   A másik fontos különbség, hogy a rövidítéshez használt karakterek
megjelennek a képernyőn a gépelés során. Ha a rövidítés lefut, akkor az addig
beírt definíciót a Vim törli és a rövidítésben meghatározott karakterekkel
helyettesíti. A mappek gépelésekor semmi sem jelenik meg a képernyőn
(szövegként), addig, amíg az utolsó karaktert le nem ütjük. Ha a 'showcmd'
opció be van kapcsolva, akkor a beírt karakterek megjelennek az ablak utolsó
sorában.
   Kivételes eset, ha a map definíciója nem egyértelmű. Tegyük fel, hogy
létrehozod az alábbi két mappet: >

	:imap aa foo
	:imap aaa bar

Gépeld be az első azonosítót "aa", a Vim nem tudja eldönteni, hogy melyik
mappet futtassa, ezért még egy karaktert vár. Ha a karakter "a", akkor a
második map fut le. Bármely karakter esetén az első map fut le, illetve az
utolsó gépelt karakter is megjelenik a képernyőn. Például, "aa<Space>"
futtatja az "aa" mappet, és egy szóközt is beilleszt.


KIEGÉSZÍTÉSKÉPPEN...

A <script> kulcsszóval a mappekhez szkripteket rendelhetünk. Lásd
|:map-<script>|.

A <buffer> kulcsszóval buffer-specifikus mappek hozhatók létre Lásd 
|:map-<buffer>|

A <unique> kulcsszóval kényszeríthetjük, hogy map egyedi legyen. Amennyiben a
map már létezik, akkor hibaüzenetet kapunk (egyébként a Vim szó nélkül
felülírja a régi mappet az újjal). Lásd |:map-<unique>|.


A billentyűket kiiktathatjuk (töröljük a funkcióit) a <Nop> karakterekkel. Az
alábbi map után <F7> billentyűnek abszolút nem lesz funkciója: >

	:map <F7> <Nop>| map! <F7> <Nop>

A <Nop> karakterek után szóköz nem állhat.

==============================================================================
*40.2*	Új command-line parancsok definiálása

A Vimben akár új parancsokat is létrehozhatsz, amiket ugyanúgy tudsz futtatni,
mint a beépítetteket. 
   Új parancs létrehozása a ":command" paranccsal: >

	:command DeleteFirst 1delete

Ezek után futtathatod a ":DeleteFirst" parancsot, mely futtatja a ":1delete"
parancsot (törli a legelső sort).

	Megjegyzés:
	A felhasználó által létrehozott parancsok első betűjének kötelezően
	nagybetűvel kell kezdődnie. ":X", ":Next" és ":Print" parancsok nem
	hozhatóak létre. "_" karakter nem használható a parancsok nevében!
	Számokat használata megengedett, de nem ajánlott.

Az összes felhasználó által létrehozott parancs: >

	:command
<
    Megjegyzés: Az összes beépülő által létrehozott parancs felhasználói
    parancsnak minősül.    

A felhasználói parancsok is rövidíthetőek. Elegendő karakter gépelése után, ha
a parancs egyedi, akkor használható a command-line kiegészítés.


ARGUMENTUMOK SZÁMA

A felhasználói parancsok képesek argumentumok kezelésére, de az argumentumok
számát meg kell határoznunk a -nargs  opcióval. Például, a :DeleteFirst
parancs nem kezel argumentumot, ezért így is létrehozhattuk volna: >

	:command -nargs=0 DeleteFirst 1delete

Nos, mivel alapértelmezetten a parancsunk 0 argumentumot fogad, ezért a
"-nargs=0" elhagyható. Az argumentum mennyiségének meghatározása: 

	-nargs=0	Nincs argumentum
	-nargs=1	Egy argumentum
	-nargs=*	Bármennyi argumentum
	-nargs=?	Null vagy egy argumentum
	-nargs=+	Egy vagy több argumentum


ARGUMENTUMOK HASZNÁLATA

A parancs definíciójában az argumentumokat az <args> kulcsszó reprezentálja:
Például:  >

	:command -nargs=+ Say :echo "<args>"

Próbáld ki a parancsot: >

	:Say Hello World

A vim kiírja "Hello World". Bár, ha idézőjelek között adjuk át az
argumentumot, akkor nem működik. Például: >

	:Say he said "hello"

Ellenben, ha az argumentumot <q-args> kulcsszóval hívjuk meg, akkor a
speciális karakterek megfelelően escapelve lesznek: >

	:command -nargs=+ Say :echo <q-args>

A fenti ":Say" parancs az alábbi kimenetet adja a <q-args> hívásával: >

	:echo "he said \"hello\""

Ha az argumentumokat függvénynek szeretnénk továbbadni, akkor használjuk a
<f-args> kulcsszót, mely hasonló az <args> kulcsszóhoz. Például: >
>
	:command -nargs=* DoIt :call AFunction(<f-args>)
	:DoIt a b c

Meghívja a következő függvényt:

	:call AFunction("a", "b", "c")


SOR TARTOMÁNYOK

Egyes parancsok argumentumként tartományt dolgozhatnak fel, melyet a -range
opcióval határozhatunk meg. Az értékei a következők lehetnek: 

	-range		Tartomány engedélyezett; alapértelmezés: aktív sor
	-range=%	Tartomány engedélyezett; alapértelmezés: teljes fájl
	-range={count}	Tartomány engedélyezett; egy érték esetén {count}-ként
			működik

Ha a -range opciót megadjuk, akkor a <line1> és <line2> kulcsszavak elérhetővé
válnak, melyek a tartomány első és utolsó sorát jelentik. Például, az alábbi
parancs definiálja a ":SaveIt" parancsot, mely a fájl meghatározott
tartományát menti el a "save_file" fájlba: >

	:command -range=% SaveIt :<line1>,<line2>write! save_file


EGYÉB OPCIÓK

További opciók és kulcsszavak az alábbiak lehetnek:

	-count={number}		Ismétlések száma -  <count>
	-bang			"!" használata - <bang>
	-register		Regiszterazonosító (alapértelmezés a névtelen
				regiszter). <reg> vagy <register>.
	-complete={type}	Command-line kiegészítés módja. A teljes lista:
				|:command-completion| 
	-bar			A parancsot "|" karakter és/vagy komment 
				követheti.
	-buffer			A parancs csak aktív bufferben futhat

Végül, a <lt> kulcsszó, mely a < karakter helyettesíti. A <> karakterek
escapelésére használható.
Finally, you have the <lt> keyword.  It stands for the character <.  Use this
to escape the special meaning of the <> items mentioned.


ÚJRADEFINIÁLÁS ÉS TÖRLÉS

A "!" argumentummal tudjuk a parancsot újradefiniálni:

	:command -nargs=+ Say :echo "<args>"
	:command! -nargs=+ Say :echo <q-args>

Felhasználó parancsot a ":delcommand"-at törölhetünk. Egy argumentumot vár,
ami a parancs neve. Például: >

	:delcommand SaveIt

Az összes felhasználói parancs törlése: >

	:comclear

Óvatosan. Egyben törli az összes beépülő által létrehozott parancsot.
(Újraindítás után a parancsok ismét elérhetőek).

Egyéb részletek és teljes referencia: |user-commands|.

==============================================================================
*40.3*	Autocommandok

Az autocommandok automatikusan futtatják a meghatározott pancsokat bizonyos
események bekövetkeztekor, például fájl olvasása vagy írása esetén.
Használatukkal megtaníthatod a Vimet, hogy hogyan szerkessze a tömörített
állományokat, ami a |gzip| beépülőt használja.
   Az autocommandok nagyon hasznosak. Helyes használatukkal rengeteg parancs
gépelése megspórolható, azonban gondtalanul használjuk őket, akkor sok
bonyodalmat okozhatnak.

Tegyük fel, hogy le szeretnéd cserélni a fájl végén található időbélyeget
minden mentés alkalmával. Hozd létre a függvényt: >

	:function DateInsert()
	:  $delete
	:  read !date
	:endfunction

A függvényt meg szeretnénk hívni minden alkalommal, mielőtt a fájlt
elmentenénk. Ez így fog megtörténni: >

	:autocmd BufWritePre *  call DateInsert()

A "BufWritePre" egy esemény, mely akkor következik be, ha az aktív bufferben
kiadjuk a mentés parancsot ":write", de még mielőtt  a konkrét mentés
megtörténne (pre). A "*" a mint, melyre a fájlnévnek illeszkednie kell. Ebben
az esetben "*" az összes fájlra illeszkedik.
   Ha az autocommand engedélyezve van, akkor minden mentés ":write" előtt a
Vim ellenőrzi a BufWritePre eseményhez tartozó bejegyzéseket és futtatja őket,
majd kiírja a fájlt.
   Az :autocmd parancs szintaxisa: >

	:autocmd [group] {events} {file-pattern} [++nested] {command}

A [group] (csoport) név opcionális. A parancsok szervezésére szolgál, de erről
később még szó lesz. Az {events} definiálja az eseményeket, melyek
bekövetkeztekor a parancs lefut. Több esemény esetén vesszővel kell
elválasztanunk őket.
   A {file-pattern} a fájlnév, általában metakarakterekkel. Például, a "*.txt"
minta esetén a parancs az összes ".txt"-re végződő fájlnál lefut. Az
opcionális [++nested] (egymásba ágyazott) flagek az autocommandok egymásba
ágyazását teszi lehetővé (lásd lejjebb), a {command} pedig maga a parancs.


ESEMÉNYEK

Az egyik legfontosabb esemény a BufReadPost. Azután következik be, miután a
Vim a fájlt beolvasta, és a buffer tartalmát megjelenítette (gyakorlatilag ha
a fájlt megnyitjuk szerkesztésre). Gyakran használjuk opciók beállítására.
Például, tudod, hogy a "*.gsm" fájlok a GNU assembly nyelvhez tartoznak. A
szintaxis helyes megjelenítéséről automatikusan gondoskodhatunk: >

	:autocmd BufReadPost *.gsm  set filetype=asm

Ha a Vim felismeri a fájlt, akkor beállítja a 'filetype' opciót, mely kiváltja
a Filetype eseményt. Így fájltípus-specifikus beállításokat hozhatunk létre.
Például, betöltheted kedvenc rövidítéseidet, mely a leggyakrabban elgépeld
szavaidat tartalmazza: >

	:autocmd Filetype text  source ~/.vim/abbrevs.vim

Új fájl szerkesztésekor egy állandó mintát (skeleton, template) tölthetünk be:
>
	:autocmd BufNewFile *.[ch]  0read ~/skeletons/skel.c

A teljes eseménylista: |autocmd-events|.


MINTÁK

A {file-pattern} argumentum lehet egy vesszővel elválasztott lista, így egy
beállítást több fájltípusra is alkalmazhatunk. Például, "*.c,*.h" illeszkedik
az összes C header ".h" és forrásfájlra ".c".
   Metakarakterek természetes használhatóak. A leggyakoribbak:

	*		Bármilyen karakter bármennyiszer
	?		Bármilyen karakter  egyszer
	[abc]		Karakterek illesztése a, b vagy c
	.		Illeszkedik a pont karakterre
	a{b,c}		Illeszkedik "ab" vagy "ac"-re

Ha a minta / karaktert tartalmaz, akkor a Vim összehasonlítja az elérési
utakat is. / karakter nélkül csak maga a fájlnév lesz az ellenőrzés tárgya.
Például, "*.txt" illeszkedik "/home/biep/readme.txt"-re. A "/home/biep/*"
szintén illeszkedik rá. A "home/foo/*.txt" viszont nem fog illeszkedni.
   Tovább, / karakterrel a minta illesztve lesz a fájl teljes elérési útjára
("/home/biep/readme.txt") és a relatív útvonalára (e.g., "biep/readme.txt").

	Megjegyzés:
	Olyan rendszerek esetén, melyeknél a fájl-elválasztó karakter más,
	például \ (MS-Windows), az autocommandokban ettől függetlenül
	használhatjuk / karaktert. Ez platformfüggetlenné és hordozhatóbbá
	teszi az autocommandokat.


TÖRLÉS

Azt autocommand törléséhez használjuk ugyanazokat a paramétereket, melyekkel
létrehoztuk, hagyjuk le magát a {command}-ot és tegyünk az "autocmd" parancs
végére egy "!" jelet. Például: >

	:autocmd! FileWritePre *

A parancs törli az összes "*" mintához tartozó, "FileWritePre" eseménykor
lefutó autocommandot.


LISTÁZÁS

Az összes érvényben lévő autocommand listázása:  >

	:autocmd

Vigyázat! A lista elég impresszív (ha a fájltípus felismerés be van kapcsolva). 
A listát úgy tudjuk szűkíteni, ha átadjuk a parancs részét, a csoportot, az
eventet vagy mintát. Például, listázzuk  az összes BufNewFile-hoz tartozó
autocommandot. >

	:autocmd BufNewFile

Az összes "*.c" fájlhoz  tartozó autocommand listázása: >

	:autocmd * *.c

Ha a "*" karaktert az esemény helyén használjuk, akkor az összes esemény
listázódik. A cprograms csoport listázása: >

	:autocmd cprograms


CSOPORTOK

A {group} csoport elemet az autocommandok csoportosítására használjuk. Például
a csoportazonosítóval törölhetjük a csoportba tartozó összes autocommandot.
   Ha logikailag a parancsaink összetartoznak, akkor érdemes őket csoportba
foglalni. Például, autocommandok csoportosítása C programokhoz: >

	:augroup cprograms
	:  autocmd BufReadPost *.c,*.h :set sw=4 sts=4
	:  autocmd BufReadPost *.cpp   :set sw=3 sts=3
	:augroup END

Mely egyenértékű ezzel: >

	:autocmd cprograms BufReadPost *.c,*.h :set sw=4 sts=4
	:autocmd cprograms BufReadPost *.cpp   :set sw=3 sts=3

Viszont a csoportazonosítóval egyszerre tudjuk őket törölni: >

	:autocmd! cprograms


BEÁGYAZÁS

Általában az autocommandok által futtatott parancsok nem generálnak újabb
eseményeket. Ha egy fájlt olvastunk be a FileChangedShell eseményre válaszul,
akkor ez nem hívja meg azokat az autocommandokat, melyek például beállítják a
megfelelő szintaxist. A további események kiváltásához adjuk hozzá a "nested"
argumentumot: >

	:autocmd FileChangedShell * ++nested  edit


AUTOCOMMANDOK FUTTATÁSA

Lehetséges az autocommandok futtatása oly módon, hogy csak egyszerűen úgy
teszünk, mintha egy esemény bekövetkezett volna. Ezzel az egyik commandból
tudjuk hívni a másikat Például: >

    :autocmd BufReadPost *.new  execute "doautocmd BufReadPost " . expand("<afile>:r")

Az autocommand akkor fut le, ha ".new" fájlt szerkesztünk. Az ":execute"
parancs kiértékeli az utána következő kifejezést az új parancs létrehozáshoz
és futtatja azt. Ha szerkesztjük a "tryout.c.new" fájlt, akkor az ":execute"
így értékeli ki az autocommand jobb oldalát: >

	:doautocmd BufReadPost tryout.c

Az expand() függvény egy "<afile>" nevű argumentumot vesz át, mely tartalmazza
fájlnevet (:r, a fájlnév root része, tryout.c), melyre az autocommand hatással
lesz.

A ":doautocmd" az aktív bufferen futtatja a parancsot, a ":doautoall" pedig az
összes bufferen futtatja a parancsot.


NORMÁL MÓDÚ PARANCSOK HASZNÁLATA

A technikával az autocommandok képesek a command-line parancsok futtatására.
Ezt fel tudjuk arra használni, hogy Normal módú parancsokat futtassunk
":normal". Például:   >

	:autocmd BufReadPost *.log normal G

A fájl megnyitásakor a kurzor az utolsó sorra ugrik az összes *.log fájlban.
   A ":normal" parancs használata egy kicsit trükkös. Először is, meg kell
győződnünk arról, hogy az argumentumban szereplő parancs teljes értékű. Ha "i"
paranccsal Insert módra váltunk, akkor valamilyen módon el kell hagynunk azt
(<Esc>), ha keresünk, akkor futtatnunk kell a keresést <CR>.
   A ":normal" parancsok a teljes sor hátralévő részét használják (tehát nem
adhatunk ki újabb parancsot |). Ennek megoldása, ha a ":normal" parancsot az
":execute" parancsba foglaljuk. A problémás karaktereket ráadásul
kényelmesebben kezelhetjük. Például:  >

	:autocmd BufReadPost *.chg execute "normal ONew entry:\<Esc>" |
		\ 1read !date

A példa mutatja a második sor elején lévő \ karaktert, melyet akkor kell
használnunk, ha a parancsunk túl hosszú, így több sorba törhetjük. (Csak Vim
Szkriptekben használható, a Command-line nem képes a parancsokat kezelni ilyen
módon.

Komplex feladatok esetén, melyek sok ugrást tartalmaznak, az alábbi fejezet
elolvasásával könnyen visszatérhetsz a kezdőpontra: |restore-position|.


ESEMÉNYEK MELLŐZÉSE

Az 'eventignore' opcióban beállíthatjuk azokat az eseményeket, melyeket
figyelmen kívül szeretnénk hagyni (teljes mértékben). Például, az ablakba való
ki- és belépésének mellőzése: >

	:set eventignore=WinEnter,WinLeave

Az összes esemény mellőzése: >

	:set eventignore=all

A visszaállításhoz állítsuk vissza az 'eventignore' opció értékét: >

	:set eventignore=

==============================================================================

Következő fejezet: |usr_41.txt|  Vim szkriptek

Jogi információk: lásd |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:

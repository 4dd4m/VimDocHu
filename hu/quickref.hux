*quickref.txt*  Vim verzió 8.2.  Frissítve: 2021 Mar 29


		  Bram Moolenaar: VIM REFERENCIA

			    Referencia Áttekintés

							 *quickref* *Contents*
 tag	  tárgy				tag	tárgy	~
|Q_ct|	helpfájlok listája		|Q_re|	Parancsok ismétlése
|Q_lr|	mozgás: Balra-jobbra		|Q_km|	Billentyűmappek
|Q_ud|	mozgás: Fel-le			|Q_ab|	Rövidítések
|Q_tm|	mozgás: Szöveges objektumok	|Q_op|	Beállíltások
|Q_pa|	mozgás: Keresési minták		|Q_ur|	Visszavonás / újra
|Q_ma|	mozgás: Jelölők			|Q_et|	Külső parancsok
|Q_vm|	mozgás: Egyebek			|Q_qf|	Quickfix parancsok
|Q_ta|	mozgás: Tagek használata	|Q_vc|	Egyéb parancsok
|Q_sc|	Görgetés			|Q_ce|	Ex: Command-line szerkesztés
|Q_in|	beszúrás: Szöveg beszúrása	|Q_ra|	Ex: Tartományok
|Q_ai|	beszúrás: Billentyűk		|Q_ex|	Ex: Speciális Karakterek
|Q_ss|	beszúrás: Speciális billentyűk	|Q_st|	A Vim indítása
|Q_di|	beszúrás: Digraphs		|Q_ed|	Fájl szerkesztése
|Q_si|	beszúrás: Speciális beszúrások	|Q_fl|	Argumentumlista használata
|Q_de|	változtatás: Törlés		|Q_wq|	Mentés és kilépés
|Q_cm|	változtatás: Másolás, mozgatás	|Q_ac|	Automatikus parancsok
|Q_ch|	változtatás: Szöveg mozgatása	|Q_wi|	Több ablakos parancsok
|Q_co|	változtatás: Komplex		|Q_bu|	Buffer lista parancsok
|Q_vi|	Vizuális mód			|Q_sy|	Szintakszis kiemelésk
|Q_to|	Szöveges Objektumok		|Q_gu|	GUI parancsok
					|Q_fo|	Folding

------------------------------------------------------------------------------
Az N a parancs ismétlésszámát jelöli az alábbi példákban. A parancs elé kerül.
------------------------------------------------------------------------------
*Q_lr*		Balra-jobbra mozgások

|h|	N  h		balra (valamint: CTRL-H, <BS>, vagy <Left> billentyű)
|l|	N  l		jobbra (valamint: <Space> or <Right> billentyű)
|0|	   0		ugrás a sor legelső karakterére (valamint: <Home>
			billentyű)
|^|	   ^		ugrás a sor legelső nem üres karakterére
|$|	N  $		ugrás a sor legutolsó karakterére (N-1 sorral lejjebb)
			(valamint: <End> billentyű)
|g0|	   g0		ugrás a képernyő sorának első karakterére (különbözik
			a "0"-tól ha a sor tördelt)
|g^|	   g^		ugrás a képernyő sorának első nem üres karakterére
			(különbözik a "^"-tól, ha a sor tördelt)
|g$|	N  g$		ugrás a képernyő sorának a legutolsó karakterére
			(különbözik a "$"-tól, ha a sor tördelt)
|gm|	   gm		ugrás a képernyő sorának közepére
|gM|	   gM		ugrás a sor közepére
|bar|	N  |		ugrás az N. sorra (alapértelmezett: 1)
|f|	N  f{char}	ugrás {char} N. előfordulására - jobbra
|F|	N  F{char}      ugrás {char} N. előfordulására - balra
|t|	N  t{char}	ugrás {char} N. előfordulása elé - jobbra
|T|	N  T{char}	ugrás {char} N. előfordulása elé - balra
|;|	N  ;		az utolsó "f", "F", "t" vagy "T" parancs ismétlése
			N-szer
|,|	N  ,		az utolsó "f", "F", "t" vagy "T" parancs ismétlése
			N-szer ellenkező irányban
			   opposite direction
------------------------------------------------------------------------------
*Q_ud*		Fel-Le mozgások

|k|	N  k		fel N sort (valamint: CTRL-P és <Up>)
|j|	N  j		le N sort (valamint: CTRL-J, CTRL-N, <NL>, és <Down>)
|-|	N  -		fel N sort, ugrás a sor első nem üres karakterére
|+|	N  +		le N sort, ugrás a sor első nem üres karakterére
			(valamint: CTRL-M és <CR>)
|_|	N  _		le N-1 sort, a legelső nem üres karakterre
|G|	N  G		ugrás az N. sorra (alapértelmezett: utolsó sor), az
			első nem üres karakterre
|gg|	N  gg		ugrás az N. sorra (alapértelmezett: legelső sor), az
			első nem üres karakterre
|N%|	N  %		ugrás N |%|-nyit le. az N számot kötelező megadni,
			különben a |%| parancsként értékelődik ki.
|gk|	N  gk		fel N sort (különbözik "k"-tól sortörés esetén)
|gj|	N  gj		le N sort (különbözik "j"-től sortörés esetén)
------------------------------------------------------------------------------
*Q_tm*		Szövegobjektum szintű mozgások

|w|	N  w		N szót előre
|W|	N  W		N SZÓT előre (|WORD|)
|e|	N  e		ugrás az N. szó utolsó karakterére
|E|	N  E		ugrás az N. SZÓ utolsó karakterére (|WORD|)
|b|	N  b		N szót hátra
|B|	N  B		N SZÓT hátra (|WORD|)
|ge|	N  ge		ugrás hátra, az N. szó végére
|gE|	N  gE		ugrás hátra, az N. SZÓ végére (|WORD|)
|)|	N  )		N mondatot előre
|(|	N  (		N mondatot hátra
|}|	N  }		N bekezdést előre
|{|	N  {		N bekezdést hátra
|]]|	N  ]]		N fejezetet előre, a fejezet kezdetéhez
|[[|	N  [[		N fejezetet hátra, a fejezet kezdetéhez
|][|	N  ][		N fejezetet előre, a fejezet végéhez
|[]|	N  []		N fejezetet hátra, a fejezet végéhez
|[(|	N  [(		N-szer vissza, páratlan '('-hez
|[{|	N  [{		N-szer vissza, páratlan '{'-hez
|[m|	N  [m		N-szer vissza a metódus kezdetéhez (Java)
|[M|	N  [M		N-szer vissza a metódus végéhez (Java)
|])|	N  ])		N-szer előre, páratlan ')'-hez
|]}|	N  ]}		N-szer előre, páratlan '}'-hez
|]m|	N  ]m		N-szer előre, a metódus kezdetéhez  (Java)
|]M|	N  ]M		N-szer előre, a metódus végéhez (Java)
|[#|	N  [#		N-szer vissza, páratlan "#if" vagy "#else"-hez
|]#|	N  ]#		N-szer előre, páratlan "#else" or "#endif"-hez
|[star|	N  [*		N-szer hátra, komment kezdetéhez "/*"
|]star|	N  ]*		N-szer előre, komment végéhez "*/"
------------------------------------------------------------------------------
*Q_pa*		Keresési minták

|/|	N  /{pattern}[/[offset]]<CR>
			keresés előre, a {pattern} N. előfordulása
|?|	N  ?{pattern}[?[offset]]<CR>
			keresés hátra, a {pattern} N. előfordulása
|/<CR>|	N  /<CR>	az utolsó keresés megismétlése előre irányban
|?<CR>|	N  ?<CR>	az utolsó keresés megismétlése hátra irányban
|n|	N  n		keresés ismétlése (azaz következő előfordulás)
|N|	N  N		keresés ismétlése (azaz előző előforfulás)
|star|	N  *		keresés előre (kurzor alatti szóra)
|#|	N  #		keresés hátra (kurzor alatti szóra)
|gstar|	N  g*		mint a  "*", a részleges illeszkedéseket is
|g#|	N  g#		mint a  "#", a részleges illeszkedéseket is
|gd|	   gd		ugrás a kurzor alatti szó definíciójára (lokális)
|gD|	   gD		ugrás a kurzor alatti szó definíciójára (globális)

|pattern|		Speciális karakterek jelentései a keresési mintákban

??? missing a couple of things, not clear yet ???
			jelentés	      magic   nomagic	~
		illeszkedik bármely karakterre	.	\.
		   illeszkedik a sorkezdetre	^	^
			   illeszkedik <EOL>	$	$
		   illeszkedik a szó elejére	\<	\<
		    illeszkedik a szó végére	\>	\>
     illeszkedik a tartomány egy karakterére	[a-z]	\[a-z]
  illeszkedik ha a tartomány nem tartalmazza	[^a-z]	\[^a-z]
	 egy azonosítókarakterre illeszkedik	\i	\i
			 ugyanaz de nem szám	\I	\I
		 matches a keyword character	\k	\k
		         ugyanaz de nem szám	\K	\K
	       matches a file name character	\f	\f
			 ugyanaz de nem szám	\F	\F
	       matches a printable character	\p	\p
		ugyanaz but excluding digits	\P	\P
		        white-space karakter	\s	\s
	           nem white-space karakter	\S	\S
			   illeszkedik <Esc>	\e	\e
			   illeszkedik <Tab>	\t	\t
			    illeszkedik <CR>	\r	\r
			    illeszkedik <BS>	\b	\b
    az előző minta 0 vagy töbször fordul elő	*	\*
  az előző minta legalább egy- vagy többször	\+	\+
	       az előző minta 0 vagy egyszer	\=	\=
    az alőző minta min 2-szer de max. 5-ször    \{2,5}  \{2,5}
          két (vagy több) alternatíva (VAGY) 	\|	\|
			       csoportosítás	\(\)	\(\)

|search-offset|		A keresés offsetelhető

    [num]	[num] sort lefelé, az első oszlopban
    +[num]	[num] sort lefelé, az első oszlopban
    -[num]	[num] sort felfelé, az első oszlopban
    e[+num]	[num] karakter jobbra a minta végétől
    e[-num]	[num] karakter balra a minta végétől
    s[+num]	[num] karakter jobbra a mint elejétől
    s[-num]	[num] karakter balra a minta elejétől
    b[+num]	[num] azonos ezzel: s[+num] (begin)
    b[+num]	[num] azonos ezzel: s[+num] (begin)
    b[-num]	[num] azonos ezzel: s[-num] (begin)
    ;{search-command} {search-command} futtatása  (következő)
------------------------------------------------------------------------------
*Q_ma*		Jelölések (mark) és navigációs parancsaik

|m|        m{a-zA-Z}	pozíció megjelölése {a-zA-Z}
|`a|       `{a-z}	menj jelöléshez {a-z} a fájlban
|`A|       `{A-Z}	menj jelöléshez {A-Z} bármely fájlban
|`0|       `{0-9}	menj ahhoz a pozícióhoz, ahol a Vim előzőleg bezárult
|``|       ``		menj az utolsó ugrás előtti pozícióhoz
|`quote|   `"		menj az előzőleg bezárt buffer kurzor-pozíciójához
			(buffer újra-nyitásnál, alapértelmezetten a legelső sor.
			Lásd: |marks|).
|`[|       `[		menj a legutolsó szerkesztett (vagy másolt) szöveg
			elejére
|`]|       `]		menj a legutolsó szerkesztett (vagy másolt) szöveg
			végére
|`<|       `<		menj az utóljára kijelölt szöveg elejéhez
|`>|       `>		menj az utóljára kijelölt szöveg végéhez
|`.|       `.		menj a legutolsó szerkesztés pozíciójához
|'|        '{a-zA-Z0-9[]'"<>.}
			ugyan az, mint `, de a sor legelső nem üres karakterére
|:marks|  :marks	jelölők megjelenítése
|CTRL-O|  N  CTRL-O	N. régebbi pozíció a jump-listben
|CTRL-I|  N  CTRL-I	N. újabb pozíció a jump-listben
|:ju|     :ju[mps]	jump-list megtekintése
------------------------------------------------------------------------------
*Q_vm*		Egyéb navigációs parnacsok

|%|	   %	        "(", "[", "#else", "#endif" vagy komment párjához ugrás
|H|	N  H		ugorj az N. sorhoz az ablakban (legelső nem üres
	    krakter)
|M|	   M		ugorj az ablak középső sorára (nem üres)
|L|	N  L		ugorj az ablak N. alsó sorára (nem üres)

|go|	N  go		menj a buffer N. bájtjához
|:go|	:[range]go[to] [off]	haladj [off] bájtnyit a bufferben
------------------------------------------------------------------------------
*Q_ta*		Tagek (címkék)  használata
??? maybe later ???
|:ta|      :ta[g][!] {tag}	ugroj taghez {tag}
|:ta|      :[count]ta[g][!]	jump to [count]'th newer tag in tag list
|CTRL-]|      CTRL-]		jump to the tag under cursor, unless changes
				   have been made
|:ts|      :ts[elect][!] [tag]	list matching tags and select one to jump to
|:tjump|   :tj[ump][!] [tag]	jump to tag [tag] or select from list when
				   there are multiple matches
|:ltag|    :lt[ag][!] [tag]	jump to tag [tag] and add matching tags to the
				   location list

|:tags|    :tags		tagek listázása
|CTRL-T|   N  CTRL-T		jump back from Nth older tag in tag list
|:po|      :[count]po[p][!]	jump back from [count]'th older tag in tag list
|:tnext|   :[count]tn[ext][!]	jump to [count]'th next matching tag
|:tp|      :[count]tp[revious][!] jump to [count]'th previous matching tag
|:tr|      :[count]tr[ewind][!]	jump to [count]'th matching tag
|:tl|      :tl[ast][!]		jump to last matching tag

|:ptag|    :pt[ag] {tag}	{tag} megtekintése előnézeti ablakban
|CTRL-W_}|    CTRL-W }		mint CTRL-], tag előnézeti ablakban
|:pts|     :pts[elect]		like ":tselect" but show tag in preview window
|:ptjump|  :ptj[ump]		like ":tjump" but show tag in preview window
|:pclose|  :pc[lose]		tag-előnézet bezárása
|CTRL-W_z|    CTRL-W z		tag-előnézet bezárása
------------------------------------------------------------------------------
*Q_sc*		Görgetés

|CTRL-E|	N  CTRL-E	N sort lefelé (1 sor)
|CTRL-D|	N  CTRL-D	N sort lefelé (1/2 ablak)
|CTRL-F|	N  CTRL-F	N sort előre (képernyő)
|CTRL-Y|	N  CTRL-Y	N sort felfelé (1 sor)
|CTRL-U|	N  CTRL-U	N sort felfelé (1/2 ablak)
|CTRL-B|	N  CTRL-B	N sort hátra (képernyő)
|z<CR>|		   z<CR> or zt	jelenlegi sor az ablak tetejére
|z.|		   z.	 or zz	jelenlegi sor az ablak közepére
|z-|		   z-	 or zb	jelenlegi sor az ablak aljára

Ezek a parancsok csak akkor működnek, ha 'wrap' nincs bekapcsolva:
|zh|		N  zh		képernyő görgetése N karakterrel jobbra
|zl|		N  zl		képernyő görgetése N karakterrel balra
|zH|		N  zH		görgetés fél képernyőnyit jobbra
|zL|		N  zL		görgetés fél képernyőnyit balra
------------------------------------------------------------------------------
*Q_in*		Szöveg beszúrása

|a|	N  a	kurzor pozíciója után (N-szer)
|A|	N  A	sor végére (N-szer)
|i|	N  i	a kurzor elé (N-szer) (azaz: <Insert>)
|I|	N  I	a sor első nem üres karaktere elé (N-szer)
|gI|	N  gI	az első oszlopba (N-szer)
|o|	N  o	új sor a kurzor alá, majd Insert mód (N-szer)
|O|	N  O	új sor a kurzor fölé, majd Insert mód (N-szer)
|:startinsert|  :star[tinsert][!]  Insert mód, hozzáfűzés [!] esetén
|:startreplace| :startr[eplace][!] Csere (Replace) mód, [!] esetén a sor végén

Visual block módban:
|v_b_I|	   I	ugyanazon szöveg beszúrása minden kijelölt sor elé
|v_b_A|	   A	ugyanazon szöveg beszúrása minden kijelölt sor után
------------------------------------------------------------------------------
*Q_ai*		Insert mód billentyűparancsok

|insert-index|	Insert mód parancsok, betűrendben

kilépés Insert módból:
|i_<Esc>|	<Esc>		  Insert mód vége, vissza Normal módba
|i_CTRL-C|	CTRL-C		  mint <Esc>, de nem használ rövidítést
|i_CTRL-O|	CTRL-O {command}  futtatja a {command} parancsot,  majd
				  visszatér Insert módba

mozgások:
|i_<Up>|	cursor keys	  kurzor mozgatása le/fel/balra/jobbra
|i_<S-Left>|	shift-left/right  egy szót balra/jobbra
|i_<S-Up>|	shift-up/down	  egy képernyőnyit előre/hátra
|i_<End>|	<End>		  kurzort a sor végére
|i_<Home>|	<Home>		  kurort a sor első karakterére
------------------------------------------------------------------------------
*Q_ss*		Speciális billentyűk Insert módban

|i_CTRL-V|	CTRL-V {char}..	  karakterek beszúrása decimális érték alapján
				  (oktális, hexadecimális értékek alapján is)
|i_<NL>|	<NL> or <CR> or CTRL-M or CTRL-J  új sor
|i_CTRL-E|	CTRL-E		  kurzor alatti karakter beszúrása
|i_CTRL-Y|	CTRL-Y		  kurzor feletti karakter beszúrása

|i_CTRL-A|	CTRL-A		  a megelőző Insert módban beszúrt szöveg
				  beszúrása
|i_CTRL-@|	CTRL-@		  mint CTRL-A és kilépés Insert módból
|i_CTRL-R|	CTRL-R {register} regiszter tartalmának beszúrása

|i_CTRL-N|	CTRL-N		  kurzor előtti szó kiegészítése, következő
				  találat beillesztése a kurzor elé
|i_CTRL-P|	CTRL-P		  kurzor előtti szó kiegészítése, az előző
		         	  találat beszúrása
|i_CTRL-X|	CTRL-X ...	  szavak kiegészítése számos módszerrel

|i_<BS>|	<BS> or CTRL-H	  kurzor előtti karakter törlése
|i_<Del>|	<Del>		  kurzor alatt lévő karakter törlése
|i_CTRL-W|	CTRL-W		  kurzor előtti szó törlése
|i_CTRL-U|	CTRL-U		  kurzor előtt álló összes karakter törlése a
				  sorban
|i_CTRL-T|	CTRL-T		  behúzás növelés
|i_CTRL-D|	CTRL-D		  behúzás csökkentése
|i_0_CTRL-D|	0 CTRL-D	  behúzás eltávolítása
|i_^_CTRL-D|	^ CTRL-D	  behúzás eltávolítása, a következő sor
       				  behúzásának visszaállítása
------------------------------------------------------------------------------
*Q_di*		Digrammák (Digraphs)

|:dig|	   :dig[raphs]		digrammák listájának mutatása
|:dig|	   :dig[raphs] {char1}{char2} {number} ...
				digrammák hozzaádása a listához

Insert vagy Command-line módban:
|i_CTRL-K|	CTRL-K {char1} {char2}
				  digramma bevitele
|i_digraph|	{char1} <BS> {char2}
				  digramma bevitele ha 'digraph' opció be van
				  állítva
------------------------------------------------------------------------------
*Q_si*		Speciális beszúrások

|:r|	   :r [file]	   [file] tartalmának beszúrása a kurzor alá
|:r!|	   :r! {command}   {command} parancs szabványos kimenetének a
			   beillesztése
------------------------------------------------------------------------------
*Q_de*		Szöveg Törlése

|x|	N  x		N karakter törlése a kurzortól jobbra
|<Del>|	N  <Del>	N karakter törlése kurzortól jobbra, a kurzor alól is
|X|	N  X		N karakter törlése a kurzortól balra
|d|	N  d{motion}	{motion}  tartomány törlése
|v_d|	   {visual}d	kijelölt szöveg törlése
|dd|	N  dd		N sor törlése
|D|	N  D		törlés a kurzortól a sor végégig
|J|	N  J		N sor egyesítése (<EOL> törlése)
|v_J|	   {visual}J	kijelölt sorok egyesítése
|gJ|	N  gJ		mint "J", de szóközök beszúrása nélkül
|v_gJ|	   {visual}gJ	mint "{visual}J", szóközök beszúrása nélkül
|:d|	:[range]d [x]	[range] or törlése [regiszter "x"-be]
------------------------------------------------------------------------------
*Q_cm*		Szöveg másolása és mozgatása

|quote|	  "{char}	{char} azonosítójú regiszter használata a következő
			művelethez (törlés, másolás, beillesztés)
|:reg|	  :reg		megjeleníti az összes regiszter tartalmát
|:reg|	  :reg {arg}	megjelíti {arg} regiszter tartalmát
|y|	  N  y{motion}	szöveg másolása {motion} tartománnyal
|v_y|	     {visual}y	kijelölt szöveg másolása
|yy|	  N  yy		N sor másolása
|Y|	  N  Y		N sor másolása
|p|	  N  p		a regiszter tartalmának másolása (azaz, beillesztése)
			a kurzor után (N-szer)
|P|	  N  P		a regiszter tartalmának másolása (azaz, beillesztése)
			a kurzor elé (N-szer)
|]p|	  N  ]p		mint p, de megtartja a sor behúzását
|[p|	  N  [p		mint P, de megtartja a sor behúzását
|gp|	  N  gp		mint p, de a kurzort a másolt szöveg végére helyezi
|gP|	  N  gP		mint P, de a kurzort a másolt szöveg végére helyezi
------------------------------------------------------------------------------
*Q_ch*		Csere

|r|	  N  r{char}	cserél N karaktert {char} karakterre
|gr|	  N  gr{char}	replace N characters without affecting layout
|R|	  N  R		Replace mód (begépelt szöveg ismétlése N-szer)
|gR|	  N  gR		mint R, viszont a csere nem a buffer alapján történik
			(ebben a módban a <Tab> nem egy karakternek számít)
|v_b_r|	     {visual}r{char}
			Visual block mód: A kijelölt szöveg összes
			karakterének csere {char}-al

	(csere = szöveg törlése, Insert módba lépés)
|c|	  N  c{motion}	{motion} tartomány cseréje
|v_c|	     {visual}c	kijelölt tartomány cseréje
|cc|	  N  cc		N sor cseréje
|S|	  N  S		N sor cseréje
|C|	  N  C		csere a sor végéig
|s|	  N  s		N karakter cseréje
|v_b_c|	     {visual}c	Visual block módban: Az összes kijelölt sor cseréje
|v_b_C|	     {visual}C	Visual block módban: Az összes kijelölt sor cseréje a
			sor végéig

|~|	  N  ~		kis-nagybetűk megfordítása N karakteren kersztül
			(a soron belüli, kurzort N-hez helyezi)
|v_~|	     {visual}~	kijelölt szövegrész kis- nagybetűinek megfordítása
|v_u|	     {visual}u	kijelölt tartomány kisbetűssé alakítása
|v_U|	     {visual}U	kijelölt tartomány nagybetűssé alakítása
|g~|	     g~{motion} kijelölt {motion} tartomány (akár több sor) kis- és
			nagybetűinek konvertálása
|gu|	     gu{motion} kijelölt {motion} tartomány (akár több sor) kisbetűssé
			alakítása
|gU|	     gU{motion} kijelölt {motion} tartomány (akár több sor) nagybetűssé
			alakítása
|v_g?|	     {visual}g? kijelölt szöveg rot13 titkosítása
|g?|	     g?{motion} kijelölt {motion} tartomány rot13 titkosítása

|CTRL-A|  N  CTRL-A	kurzor alatt lévő, vagy a kurzorhoz legközelebb eső
			szám növelése N-el
|CTRL-X|  N  CTRL-X	kurzor alatt lévő, vagy a kurzorhoz legközelebb eső
			szám csökkentése N-el

|<|	  N  <{motion}	sorok behúzásának csökkentése {motion} tartományban
			('shiftwidth' értékkel)
|<<|	  N  <<		N sor mozgatása egy 'shiftwidth'-el balra
|>|	  N  >{motion}	sorok behúzásának növelése {motion} tartományban
			('shiftwidth' értékkel)
|>>|	  N  >>		N sor mozgatása egy 'shiftwidth'-el jobbra
|gq|	  N  gq{motion}	sorok hosszának tördelése {motion} tartományban
		        'textwidth' érték szerint
|:ce|	  :[range]ce[nter] [width]
			sorok középre húzása [range] tartományban [width]
			szélesség szerint
|:le|	  :[range]le[ft] [indent]
			sorok balra igazítása [range] tartományban ( [indent]
			behúzással)
|:ri|	  :[range]ri[ght] [width]
			sorok jobbra igazítása [range] tartományban [width]
			szélesség szerint
------------------------------------------------------------------------------
*Q_co*		Komplex cserék

|!|	   N  !{motion}{command}<CR>
			kijelölt tartomány átadása külső (például shell)
			{command} programnak
|!!|	   N  !!{command}<CR>
			N sor átadása külső {command} programnak
|v_!|	      {visual}!{command}<CR>
			kijelölt sorok átadása külső {command} programnak
|:range!|  :[range]! {command}<CR>
			[range] tartomány átadása  külső {command} programnak
|=|	   N  ={motion}
			{motion} tartomány átadása az 'equalprg' által
			beállított külső programnak. Ha nincs beállítva más
			érték, akkor automatikus behúzás.
|==|	   N  ==	N sor átadása az 'equalprg' áltlal beállított külső
			programnak. Ha nincs beállítva érték, akkor
			automatikus behúzás.
|v_=|	   {visual}=	kijelölt sorok átadása 'equalprg'-nek

|:s|	   :[range]s[ubstitute]/{pattern}/{string}/[g][c]
			csere {pattern} (ezt) {string} (erre) ebben a [range]
			   tartományban (sor alapú);
			   [g] (globális), kicseréli az összes előfordulást
				{pattern};
			   [c] (confirm), megerősítés kérése a csere előtt

|:s|	   :[range]s[ubstitute] [g][c]
			az előző ":s" futtatása új tartománnyal és opciókkal

|&|	      &		az előző ":s" futtatása az aktív soron, opciók nélkül

|:ret|	   :[range]ret[ab][!] [tabstop]
			új 'tabstop' érték beállítása és érvényesítése a
			fájlon belül
------------------------------------------------------------------------------
*Q_vi*		Visual mód

|visual-index|	Visual mód parancsok listája

|v|        v		karakterenkénti kijelölés
|V|        V		soronkénti kijelölés
|CTRL-V|   CTRL-V	blokk kijelölés
|v_o|      o		ugrás a kijelölés elejéhez/végéhez
|gv|       gv		előzőleg kijelölt terület újra kijelölése
|v_v|      v		karakterenkénti kijelölés (vagy kilépés ebből a módból)
|v_V|      V		soronkénti kijelölés (vagy kilépés ebből a módból
|v_CTRL-V| CTRL-V	blokk kijelölés (vagy kilépés ebből a módból)
------------------------------------------------------------------------------
*Q_to*		Szöveges objektumok (csak Visual módban vagy parancs után)
??? check what inner is???
|v_aw|	   N  aw	"szó" kijelölése
|v_iw|	   N  iw	"inner szó" kijelölése
|v_aW|	   N  aW	"SZÓ" kijelölése (lásd |WORD|)
|v_iW|	   N  iW	"SZÓ" kijelölése (lásd |WORD|)
|v_as|	   N  as	"mondat" kijelölése
|v_is|	   N  is	"inner mondat" kijelölése
|v_ap|	   N  ap	"bekezdés" kijelölése
|v_ip|	   N  ip	"inner bekezdés" kijelölése
|v_ab|	   N  ab	"blokk" kijelölése ("[("-tól "])"-ig)
|v_ib|	   N  ib	"inner blokk" kijelölése ("[("-tól "])"-ig)
|v_aB|	   N  aB	"Block" kijelölése ("[{"-tól "]}"-ig)
|v_iB|	   N  iB	"inner Blokk" kijelölése ("[{"-tól "]}"-ig)
|v_a>|	   N  a>	" <> blokk" kijelölése
|v_i>|	   N  i>	"inner <> blokk" kijelölése
|v_at|	   N  at	"tag" kijelölése (<aaa>-tól </aaa>-ig)
|v_it|	   N  it	"inner tag" (<aaa>-tól </aaa>-ig)
|v_a'|	   N  a'	aposztrófok közötti tartalom kijelölése (az
			aposztrófot "'" tartalmazza a kijelölés)
|v_i'|	   N  i'	aposztrófok közötti tartalom kijelölése (az
			aposztrófot "'" nem tartalmazza a kijelölés)
|v_aquote| N  a"	idézőjelek közötti tartalom kijelölése (az '"'-et
			tartalmazza a kijelölés)
|v_iquote| N  i"	idézőjelek közötti tartalom kijelölése (az '"'-et
			nem tartalmazza a kijelölés)
|v_a`|	   N  a`	backtick közötti tartalom kiválasztása (beleértve "`")
|v_i`|	   N  i`	backtick közötti tartalom kiválasztása (kivéve "`")

------------------------------------------------------------------------------
*Q_re*		Ismétlő parancsok

|.|	   N  .		utolsó szerkesztés ismétlése N-szer
|q|	      q{a-z}	begépelt karakterek rögzítése regiszterbe (felülír){a-z}
|q|	      q{A-Z}	begépelt karakterek rögzítése regiszterbe (hozzáfűz)
			{a-z}
|q|	      q		rögzítés lállítása
|@|	   N  @{a-z}	regiszter tartalmának futtatása {a-z} (N-szer)
|@@|	   N  @@	az utolsó futtatott regiszter ismételt futtatás @{a-z}
			(N-szer)
|:@|	   :@{a-z}	regiszter tartalmának futtatása {a-z} Ex prancsként
|:@@|	   :@@		előző :@{a-z} ismétlése

|:g|	   :[range]g[lobal]/{pattern}/[cmd]
			futtasd a [cmd] parancsot Ex módban (alapértelmezett:
			    ":p") a sorokon [range] tartományban, ahol a minta
			    {pattern} egyezik

|:g|	   :[range]g[lobal]!/{pattern}/[cmd]
			futtasd a [cmd] parancsot Ex módban (alapértelmezett:
			   futtasd a [cmd] parancsot Ex módban
			   ":p") a sorokon [range] tartományban, ahol a minta
			   {pattern} NEM egyezik

|:so|	   :so[urce] {file}
			Ex parancsok beolvasása fájlból {file}
|:so|	   :so[urce]! {file}
			Vim parancsok beolvasása fájlból {file}
|:sl|	   :sl[eep] [sec]
			alvó mód [sec] másodpercig
|gs|	   N  gs	alvó mód N másodpercig
------------------------------------------------------------------------------
*Q_km*		Key mapping

|:map|       :ma[p] {lhs} {rhs}	a baloldal {lhs} hozzárendelése (map) a jobb-
				oldalhoz {rhs} Normal és Visual módban
|:map!|      :ma[p]! {lhs} {rhs}  a baloldal {lhs} hozzárendelése (map) a jobb-
				oldalhoz {lhs} Insert és Command-line módban

|:noremap|   :no[remap][!] {lhs} {rhs}  mint a  ":map", nem remappelődik a {rhs}

|:unmap|     :unm[ap] {lhs}	{lhs} mapjének eltávolítása Normal és Visual
				módban
|:unmap!|    :unm[ap]! {lhs}	{lhs} mapjének eltávolítása Insert és Command-
				line módban
|:map_l|     :ma[p] [lhs]	mappek listázása [lhs] szerint rendezve
				Normal és Visual módban
|:map_l!|    :ma[p]! [lhs]	mappek listázása [lhs] szerint rendezve Insert
				és Command-line módban
|:cmap|      :cmap/:cunmap/:cnoremap
				  mint a ":map!"/":unmap!"/":noremap!" de csak
				     Command-line módban
|:imap|      :imap/:iunmap/:inoremap
				  mint a ":map!"/":unmap!"/":noremap!" de csak
				     Insert módban
|:nmap|      :nmap/:nunmap/:nnoremap
				  mint a  ":map"/":unmap"/":noremap" de csak
				     Normal módban
|:vmap|      :vmap/:vunmap/:vnoremap
				  mint a  ":map"/":unmap"/":noremap" de csak
				     Visual mode only
|:omap|      :omap/:ounmap/:onoremap
				  mint a  ":map"/":unmap"/":noremap" de csak
				     ha az operátor hiányzik
|:mapc|      :mapc[lear]	Normal és Visual mód mappek eltávolítása
|:mapc|      :mapc[lear]!	Insert és Cmdline mappek eltávolítása
|:imapc|     :imapc[lear]	Insert mód mappek eltávolítása
|:vmapc|     :vmapc[lear]	Visual mód mappek eltávolítása
|:omapc|     :omapc[lear]	Operator-pending mód mappek eltávolítása
|:nmapc|     :nmapc[lear]	Normal mód mappek eltávolítása
|:cmapc|     :cmapc[lear]	Cmdline mód mappek eltávolítása

|:mkexrc|    :mk[exrc][!] [file]  az érvényben lévő mappek, rövidítések és
				beállítások kiírása [file]-ba,
				(alapélrtelmezett: ".exrc"; felülíráshoz
				használj !-t)

|:mkvimrc|   :mkv[imrc][!] [file] mint az ":mkexrc", alapértelmezett fájl:
				".vimrc"

|:mksession| :mks[ession][!] [file] mint az ":mkvimrc", tárolja a megnyitott
				  fájlokat, ablakokat stb, hogy később tudjuk
				  folytatni a munkamenetet
------------------------------------------------------------------------------
*Q_ab*		Rövidítések

|:abbreviate|	:ab[breviate] {lhs} {rhs}  {lhs} rövidítése {rhs}-el
|:abbreviate|	:ab[breviate] {lhs}	   {lhs} kezdődő rövidítések mutatása
|:abbreviate|	:ab[breviate]		   összes rövidítés mutatása
|:unabbreviate|	:una[bbreviate] {lhs}	   {lhs} rövidítésének eltávolítása
|:noreabbrev|	:norea[bbrev] [lhs] [rhs]  mint ":ab", de nem remappolja [rhs]-t
|:iabbrev|	:iab/:iunab/:inoreab	   mint ":ab", de csak Insert módban
|:cabbrev|	:cab/:cunab/:cnoreab	   mint ":ab", de csak Comman-line
					   módban
|:abclear|	:abc[lear]		   az összes rövidítés eltávolítása
|:cabclear|	:cabc[lear]		   az összes Command-line rövidítés
					   eltávolítása
|:iabclear|	:iabc[lear]		   az összes Insert mód rövidítés
					   eltávolítása
------------------------------------------------------------------------------
*Q_op*		Beállítások

??? termcap? ???

|:set|		:se[t]			  az összes módosított beálltás
				          listázása
|:set|		:se[t] all		  show all non-termcap options
|:set|		:se[t] termcap		  show all termcap options
|:set|		:se[t] {option}		  boolean változót állít be (true, on),
|:set|		:se[t] no{option}	  boolean változót állít be (false,
	   				  off)
|:set|		:se[t] inv{option}	  boolean változót invertál
|:set|		:se[t] {option}={value}	  string/szám értékadás = {value}
|:set|		:se[t] {option}+={value}  String esetében hozzáfűz  {value}
					  értékkel, szám esetén növeli a számot
					  {value} értékével
|:set|		:se[t] {option}-={value}  String esetén {value} értéket
					  eltávolítja, szám esetén {value}
					  értékével csökkenti a változót
|:set|		:se[t] {option}?	  {option} értékének kiíratása
|:set|		:se[t] {option}&	  {option} alapértelmezettre állít

|:setlocal|	:setl[ocal]		  mint ":set" de a változók lokális
					  példányának ad értéket (ha ez
					  létezik)
|:setglobal|	:setg[lobal]		  mint ":set" de a változók globális
					  példányának ad értéket (ha ez létezik)

|:fix|		:fix[del]		  't_kD' értékét 't_kb' értékére
   				          állítja
|:options|	:opt[ions]		  új ablakot nyit, listázva az összes
				          beállítást kategóriánként
					  csoportosítva, illetve egy rövid egy
					  soros összefoglalóval

??? "whatis" ballon ???
Az összes opció rövid magyarázata:		*option-list*
'aleph'		  'al'	    ASCII code of the letter Aleph (Hebrew)
'allowrevins'	  'ari'     engedélyezi CTRL-_ használatát Insert és Command
			    line módban
'altkeymap'	  'akm'	    Farsi elavult opciója
'ambiwidth'	  'ambw'    what to do with Unicode chars of ambiguous width
'antialias'	  'anti'    Mac OS X: karakterek élsimítása
'autochdir'	  'acd'     az aktív ablak munkakönyvtára a megnyitott fájl
			    könyvtárát
'autoshelldir'	  'asd'     a Vim munkakönyvtárát a shell munkakönyvtárára
			    állítja
'arabic'	  'arab'    Arab nyelv alapértelmezett második nyelvként
'arabicshape'	  'arshape' Arab karakterek formázása
'autoindent'	  'ai'	    az új sor behúzása követi az előző sorét
'autoread'	  'ar'	    fájl auto. beolvasása ha Vimen kívülről változott
'autowrite'	  'aw'	    fájl automatikus mentése változás esetén
'autowriteall'	  'awa'     mint 'autowrite', több paranccsal kompatibilis
'background'	  'bg'	    "dark" vagy "light", kiemeléshez használatos
'backspace'	  'bs'	    <Bs> viselkedésének módja (1. oszlopban)
'backup'	  'bk'	    biztonsági másolatok
'backupcopy'	  'bkc'     biztonsági másolat esetén ne nevezze át a fájlt
'backupdir'	  'bdir'    a biztonsági másolatok könyvtára
'backupext'	  'bex'     biztonsági másolatnál használt kiegészítők
'backupskip'	  'bsk'     biztonsági másolat kihagyása illeszkedő minta
			    esetén
'balloondelay'	  'bdlay'   értesítési időköz (mS)
'ballooneval'	  'beval'     switch on balloon evaluation in the GUI
'balloonevalterm' 'bevalterm' switch on balloon evaluation in the terminal
'balloonexpr'	  'bexpr'   expression to show in balloon
'belloff'	  'bo'	    csengő kikapcsolása események alapján
'binary'	  'bin'     fájl szerkesztés, olvasás, írás bináris módban
'bioskey'	  'biosk'   MS-DOS: use bios calls for input characters
'bomb'			    BOM hozzáfűzése a dokumentumhoz
'breakat'	  'brk'     sortörést okozó karakterek
'breakindent'	  'bri'     tördelt sor örökli a behúzást
'breakindentopt'  'briopt'  'breakindent' beállítása
'browsedir'	  'bsdir'   böngészési alap. könyvtár
'bufhidden'	  'bh'	    teendők ha a buffer már nincs az ablakban
'buflisted'	  'bl'	    teendők ha a buffer a bufferlistára kerül
'buftype'	  'bt'	    speciális buffer
'casemap'	  'cmp'     specifies how case of letters is changed
'cdpath'	  'cd'	    list of directories searched with ":cd"
'cedit'			    key used to open the command-line window
'charconvert'	  'ccv'     expression for character encoding conversion
'cindent'	  'cin'     do C program indenting
'cinkeys'	  'cink'    keys that trigger indent when 'cindent' is set
'cinoptions'	  'cino'    how to do indenting when 'cindent' is set
'cinwords'	  'cinw'    words where 'si' and 'cin' add an indent
'clipboard'	  'cb'	    use the clipboard as the unnamed register
'cmdheight'	  'ch'	    number of lines to use for the command-line
'cmdwinheight'	  'cwh'     height of the command-line window
'colorcolumn'	  'cc'	    columns to highlight
'columns'	  'co'	    number of columns in the display
'comments'	  'com'     patterns that can start a comment line
'commentstring'   'cms'     template for comments; used for fold marker
'compatible'	  'cp'	    behave Vi-compatible as much as possible
'complete'	  'cpt'     specify how Insert mode completion works
'completefunc'	  'cfu'     function to be used for Insert mode completion
'completeopt'	  'cot'     options for Insert mode completion
'completepopup'	  'cpp'     options for the Insert mode completion info popup
'completeslash'	  'csl'	    like 'shellslash' for completion
'concealcursor'	  'cocu'    whether concealable text is hidden in cursor line
'conceallevel'	  'cole'    whether concealable text is shown or hidden
'confirm'	  'cf'	    ask what to do about unsaved/read-only files
'conskey'	  'consk'   get keys directly from console (MS-DOS only)
'copyindent'	  'ci'	    make 'autoindent' use existing indent structure
'cpoptions'	  'cpo'     flags for Vi-compatible behavior
'cryptmethod'	  'cm'	    type of encryption to use for file writing
'cscopepathcomp'  'cspc'    how many components of the path to show
'cscopeprg'       'csprg'   command to execute cscope
'cscopequickfix'  'csqf'    use quickfix window for cscope results
'cscoperelative'  'csre'    Use cscope.out path basename as prefix
'cscopetag'       'cst'     use cscope for tag commands
'cscopetagorder'  'csto'    determines ":cstag" search order
'cscopeverbose'   'csverb'  give messages when adding a cscope database
'cursorbind'	  'crb'     move cursor in window as it moves in other windows
'cursorcolumn'	  'cuc'	    highlight the screen column of the cursor
'cursorline'	  'cul'	    highlight the screen line of the cursor
'cursorlineopt'	  'culopt'  settings for 'cursorline'
'debug'			    set to "msg" to see all error messages
'define'	  'def'     pattern to be used to find a macro definition
'delcombine'	  'deco'    delete combining characters on their own
'dictionary'	  'dict'    list of file names used for keyword completion
'diff'			    use diff mode for the current window
'diffexpr'	  'dex'     expression used to obtain a diff file
'diffopt'	  'dip'     options for using diff mode
'digraph'	  'dg'	    enable the entering of digraphs in Insert mode
'directory'	  'dir'     list of directory names for the swap file
'display'	  'dy'	    list of flags for how to display text
'eadirection'	  'ead'     in which direction 'equalalways' works
'edcompatible'	  'ed'	    toggle flags of ":substitute" command
'emoji'		  'emo'	    emoji characters are considered full width
'encoding'	  'enc'     encoding used internally
'endofline'	  'eol'     write <EOL> for last line in file
'equalalways'	  'ea'	    windows are automatically made the same size
'equalprg'	  'ep'	    external program to use for "=" command
'errorbells'	  'eb'	    ring the bell for error messages
'errorfile'	  'ef'	    name of the errorfile for the QuickFix mode
'errorformat'	  'efm'     description of the lines in the error file
'esckeys'	  'ek'	    recognize function keys in Insert mode
'eventignore'	  'ei'	    autocommand events that are ignored
'expandtab'	  'et'	    use spaces when <Tab> is inserted
'exrc'		  'ex'	    read .vimrc and .exrc in the current directory
'fileencoding'	  'fenc'    file encoding for multibyte text
'fileencodings'   'fencs'   automatically detected character encodings
'fileformat'	  'ff'	    file format used for file I/O
'fileformats'	  'ffs'     automatically detected values for 'fileformat'
'fileignorecase'  'fic'     ignore case when using file names
'filetype'	  'ft'	    type of file, used for autocommands
'fillchars'	  'fcs'     characters to use for displaying special items
'fixendofline'	  'fixeol'  make sure last line in file has <EOL>
'fkmap'		  'fk'	    obsolete option for Farsi
'foldclose'	  'fcl'     close a fold when the cursor leaves it
'foldcolumn'	  'fdc'     width of the column used to indicate folds
'foldenable'	  'fen'     set to display all folds open
'foldexpr'	  'fde'     expression used when 'foldmethod' is "expr"
'foldignore'	  'fdi'     ignore lines when 'foldmethod' is "indent"
'foldlevel'	  'fdl'     close folds with a level higher than this
'foldlevelstart'  'fdls'    'foldlevel' when starting to edit a file
'foldmarker'	  'fmr'     markers used when 'foldmethod' is "marker"
'foldmethod'	  'fdm'     folding type
'foldminlines'	  'fml'     minimum number of lines for a fold to be closed
'foldnestmax'	  'fdn'     maximum fold depth
'foldopen'	  'fdo'     for which commands a fold will be opened
'foldtext'	  'fdt'     expression used to display for a closed fold
'formatexpr'	  'fex'     expression used with "gq" command
'formatlistpat'   'flp'     pattern used to recognize a list header
'formatoptions'   'fo'	    how automatic formatting is to be done
'formatprg'	  'fp'	    name of external program used with "gq" command
'fsync'		  'fs'	    whether to invoke fsync() after file write
'gdefault'	  'gd'	    the ":substitute" flag 'g' is default on
'grepformat'	  'gfm'     format of 'grepprg' output
'grepprg'	  'gp'	    program to use for ":grep"
'guicursor'	  'gcr'     GUI: settings for cursor shape and blinking
'guifont'	  'gfn'     GUI: Name(s) of font(s) to be used
'guifontset'	  'gfs'     GUI: Names of multibyte fonts to be used
'guifontwide'	  'gfw'     list of font names for double-wide characters
'guiheadroom'	  'ghr'     GUI: pixels room for window decorations
'guioptions'	  'go'	    GUI: Which components and options are used
'guipty'		    GUI: try to use a pseudo-tty for ":!" commands
'guitablabel'	  'gtl'     GUI: custom label for a tab page
'guitabtooltip'   'gtt'     GUI: custom tooltip for a tab page
'helpfile'	  'hf'	    full path name of the main help file
'helpheight'	  'hh'	    minimum height of a new help window
'helplang'	  'hlg'     preferred help languages
'hidden'	  'hid'     don't unload buffer when it is |abandon|ed
'highlight'	  'hl'	    sets highlighting mode for various occasions
'history'	  'hi'	    number of command-lines that are remembered
'hkmap'		  'hk'	    Hebrew keyboard mapping
'hkmapp'	  'hkp'     phonetic Hebrew keyboard mapping
'hlsearch'	  'hls'     highlight matches with last search pattern
'icon'			    let Vim set the text of the window icon
'iconstring'		    string to use for the Vim icon text
'ignorecase'	  'ic'	    ignore case in search patterns
'imactivatefunc'  'imaf'    function to enable/disable the X input method
'imactivatekey'   'imak'    key that activates the X input method
'imcmdline'	  'imc'     use IM when starting to edit a command line
'imdisable'	  'imd'     do not use the IM in any mode
'iminsert'	  'imi'     use :lmap or IM in Insert mode
'imsearch'	  'ims'     use :lmap or IM when typing a search pattern
'imstatusfunc'    'imsf'    function to obtain X input method status
'imstyle'	  'imst'    specifies the input style of the input method
'include'	  'inc'     pattern to be used to find an include file
'includeexpr'	  'inex'    expression used to process an include line
'incsearch'	  'is'	    highlight match while typing search pattern
'indentexpr'	  'inde'    expression used to obtain the indent of a line
'indentkeys'	  'indk'    keys that trigger indenting with 'indentexpr'
'infercase'	  'inf'     adjust case of match for keyword completion
'insertmode'	  'im'	    start the edit of a file in Insert mode
'isfname'	  'isf'     characters included in file names and pathnames
'isident'	  'isi'     characters included in identifiers
'iskeyword'	  'isk'     characters included in keywords
'isprint'	  'isp'     printable characters
'joinspaces'	  'js'	    two spaces after a period with a join command
'key'			    encryption key
'keymap'	  'kmp'     name of a keyboard mapping
'keymodel'	  'km'	    enable starting/stopping selection with keys
'keywordprg'	  'kp'	    program to use for the "K" command
'langmap'	  'lmap'    alphabetic characters for other language mode
'langmenu'	  'lm'	    language to be used for the menus
'langnoremap'	  'lnr'	    do not apply 'langmap' to mapped characters
'langremap'	  'lrm'	    do apply 'langmap' to mapped characters
'laststatus'	  'ls'	    tells when last window has status lines
'lazyredraw'	  'lz'	    don't redraw while executing macros
'linebreak'	  'lbr'     wrap long lines at a blank
'lines'			    number of lines in the display
'linespace'	  'lsp'     number of pixel lines to use between characters
'lisp'			    automatic indenting for Lisp
'lispwords'	  'lw'	    words that change how lisp indenting works
'list'			    show <Tab> and <EOL>
'listchars'	  'lcs'     characters for displaying in list mode
'loadplugins'	  'lpl'     load plugin scripts when starting up
'luadll'		    name of the Lua dynamic library
'macatsui'		    Mac GUI: use ATSUI text drawing
'magic'			    changes special characters in search patterns
'makeef'	  'mef'     name of the errorfile for ":make"
'makeencoding'	  'menc'    encoding of external make/grep commands
'makeprg'	  'mp'	    program to use for the ":make" command
'matchpairs'	  'mps'     pairs of characters that "%" can match
'matchtime'	  'mat'     tenths of a second to show matching paren
'maxcombine'	  'mco'     maximum nr of combining characters displayed
'maxfuncdepth'	  'mfd'     maximum recursive depth for user functions
'maxmapdepth'	  'mmd'     maximum recursive depth for mapping
'maxmem'	  'mm'	    maximum memory (in Kbyte) used for one buffer
'maxmempattern'   'mmp'     maximum memory (in Kbyte) used for pattern search
'maxmemtot'	  'mmt'     maximum memory (in Kbyte) used for all buffers
'menuitems'	  'mis'     maximum number of items in a menu
'mkspellmem'	  'msm'     memory used before |:mkspell| compresses the tree
'modeline'	  'ml'	    recognize modelines at start or end of file
'modelineexpr'	  'mle'	    allow setting expression options from a modeline
'modelines'	  'mls'     number of lines checked for modelines
'modifiable'	  'ma'	    changes to the text are not possible
'modified'	  'mod'     buffer has been modified
'more'			    pause listings when the whole screen is filled
'mouse'			    enable the use of mouse clicks
'mousefocus'	  'mousef'  keyboard focus follows the mouse
'mousehide'	  'mh'	    hide mouse pointer while typing
'mousemodel'	  'mousem'  changes meaning of mouse buttons
'mouseshape'	  'mouses'  shape of the mouse pointer in different modes
'mousetime'	  'mouset'  max time between mouse double-click
'mzquantum'	  'mzq'     the interval between polls for MzScheme threads
'mzschemedll'		    name of the MzScheme dynamic library
'mzschemegcdll'		    name of the MzScheme dynamic library for GC
'nrformats'	  'nf'	    number formats recognized for CTRL-A command
'number'	  'nu'	    print the line number in front of each line
'numberwidth'	  'nuw'     number of columns used for the line number
'omnifunc'	  'ofu'     function for filetype-specific completion
'opendevice'	  'odev'    allow reading/writing devices on MS-Windows
'operatorfunc'	  'opfunc'  function to be called for |g@| operator
'osfiletype'	  'oft'     no longer supported
'packpath'	  'pp'      list of directories used for packages
'paragraphs'	  'para'    nroff macros that separate paragraphs
'paste'			    allow pasting text
'pastetoggle'	  'pt'	    key code that causes 'paste' to toggle
'patchexpr'	  'pex'     expression used to patch a file
'patchmode'	  'pm'	    keep the oldest version of a file
'path'		  'pa'	    list of directories searched with "gf" et.al.
'perldll'		    name of the Perl dynamic library
'preserveindent'  'pi'	    preserve the indent structure when reindenting
'previewheight'   'pvh'     height of the preview window
'previewpopup'    'pvp'     use popup window for preview
'previewwindow'   'pvw'     identifies the preview window
'printdevice'	  'pdev'    name of the printer to be used for :hardcopy
'printencoding'   'penc'    encoding to be used for printing
'printexpr'	  'pexpr'   expression used to print PostScript for :hardcopy
'printfont'	  'pfn'     name of the font to be used for :hardcopy
'printheader'	  'pheader' format of the header used for :hardcopy
'printmbcharset'  'pmbcs'   CJK character set to be used for :hardcopy
'printmbfont'	  'pmbfn'   font names to be used for CJK output of :hardcopy
'printoptions'	  'popt'    controls the format of :hardcopy output
'prompt'	  'prompt'  enable prompt in Ex mode
'pumheight'	  'ph'	    maximum height of the popup menu
'pumwidth'	  'pw'	    minimum width of the popup menu
'pythondll'		    name of the Python 2 dynamic library
'pythonhome'		    name of the Python 2 home directory
'pythonthreedll'	    name of the Python 3 dynamic library
'pythonthreehome'	    name of the Python 3 home directory
'pyxversion'	  'pyx'	    Python version used for pyx* commands
'quickfixtextfunc' 'qftf'   function for the text in the quickfix window
'quoteescape'	  'qe'	    escape characters used in a string
'readonly'	  'ro'	    disallow writing the buffer
'redrawtime'	  'rdt'     timeout for 'hlsearch' and |:match| highlighting
'regexpengine'	  're'	    default regexp engine to use
'relativenumber'  'rnu'	    show relative line number in front of each line
'remap'			    allow mappings to work recursively
'renderoptions'	  'rop'	    options for text rendering on Windows
'report'		    threshold for reporting nr. of lines changed
'restorescreen'   'rs'	    Win32: restore screen when exiting
'revins'	  'ri'	    inserting characters will work backwards
'rightleft'	  'rl'	    window is right-to-left oriented
'rightleftcmd'	  'rlc'     commands for which editing works right-to-left
'rubydll'		    name of the Ruby dynamic library
'ruler'		  'ru'	    show cursor line and column in the status line
'rulerformat'	  'ruf'     custom format for the ruler
'runtimepath'	  'rtp'     list of directories used for runtime files
'scroll'	  'scr'     lines to scroll with CTRL-U and CTRL-D
'scrollbind'	  'scb'     scroll in window as other windows scroll
'scrollfocus'	  'scf'     scroll wheel applies to window under pointer
'scrolljump'	  'sj'	    minimum number of lines to scroll
'scrolloff'	  'so'	    minimum nr. of lines above and below cursor
'scrollopt'	  'sbo'     how 'scrollbind' should behave
'sections'	  'sect'    nroff macros that separate sections
'secure'		    secure mode for reading .vimrc in current dir
'selection'	  'sel'     what type of selection to use
'selectmode'	  'slm'     when to use Select mode instead of Visual mode
'sessionoptions'  'ssop'    options for |:mksession|
'shell'		  'sh'	    name of shell to use for external commands
'shellcmdflag'	  'shcf'    flag to shell to execute one command
'shellpipe'	  'sp'	    string to put output of ":make" in error file
'shellquote'	  'shq'     quote character(s) for around shell command
'shellredir'	  'srr'     string to put output of filter in a temp file
'shellslash'	  'ssl'     use forward slash for shell file names
'shelltemp'	  'stmp'    whether to use a temp file for shell commands
'shelltype'	  'st'	    Amiga: influences how to use a shell
'shellxescape'	  'sxe'     characters to escape when 'shellxquote' is (
'shellxquote'	  'sxq'     like 'shellquote', but include redirection
'shiftround'	  'sr'	    round indent to multiple of shiftwidth
'shiftwidth'	  'sw'	    number of spaces to use for (auto)indent step
'shortmess'	  'shm'     list of flags, reduce length of messages
'shortname'	  'sn'	    Filenames assumed to be 8.3 chars
'showbreak'	  'sbr'     string to use at the start of wrapped lines
'showcmd'	  'sc'	    show (partial) command in status line
'showfulltag'	  'sft'     show full tag pattern when completing tag
'showmatch'	  'sm'	    briefly jump to matching bracket if insert one
'showmode'	  'smd'     message on status line to show current mode
'showtabline'	  'stal'    tells when the tab pages line is displayed
'sidescroll'	  'ss'	    minimum number of columns to scroll horizontal
'sidescrolloff'   'siso'    min. nr. of columns to left and right of cursor
'signcolumn'	  'scl'	    when to display the sign column
'smartcase'	  'scs'     no ignore case when pattern has uppercase
'smartindent'	  'si'	    smart autoindenting for C programs
'smarttab'	  'sta'     use 'shiftwidth' when inserting <Tab>
'softtabstop'	  'sts'     number of spaces that <Tab> uses while editing
'spell'			    enable spell checking
'spellcapcheck'   'spc'     pattern to locate end of a sentence
'spellfile'	  'spf'     files where |zg| and |zw| store words
'spelllang'	  'spl'     language(s) to do spell checking for
'spelloptions'	  'spo'     options for spell checking
'spellsuggest'	  'sps'     method(s) used to suggest spelling corrections
'splitbelow'	  'sb'	    new window from split is below the current one
'splitright'	  'spr'     new window is put right of the current one
'startofline'	  'sol'     commands move cursor to first non-blank in line
'statusline'	  'stl'     custom format for the status line
'suffixes'	  'su'	    suffixes that are ignored with multiple match
'suffixesadd'	  'sua'     suffixes added when searching for a file
'swapfile'	  'swf'     whether to use a swapfile for a buffer
'swapsync'	  'sws'     how to sync the swap file
'switchbuf'	  'swb'     sets behavior when switching to another buffer
'synmaxcol'	  'smc'     maximum column to find syntax items
'syntax'	  'syn'     syntax to be loaded for current buffer
'tabline'	  'tal'     custom format for the console tab pages line
'tabpagemax'	  'tpm'     maximum number of tab pages for |-p| and "tab all"
'tabstop'	  'ts'	    number of spaces that <Tab> in file uses
'tagbsearch'	  'tbs'     use binary searching in tags files
'tagcase'	  'tc'      how to handle case when searching in tags files
'tagfunc'	  'tfu'	    function to get list of tag matches
'taglength'	  'tl'	    number of significant characters for a tag
'tagrelative'	  'tr'	    file names in tag file are relative
'tags'		  'tag'     list of file names used by the tag command
'tagstack'	  'tgst'    push tags onto the tag stack
'tcldll'		    name of the Tcl dynamic library
'term'			    name of the terminal
'termbidi'	  'tbidi'   terminal takes care of bi-directionality
'termencoding'	  'tenc'    character encoding used by the terminal
'termguicolors'	  'tgc'     use GUI colors for the terminal
'termwinkey'	  'twk'	    key that precedes a Vim command in a terminal
'termwinscroll'   'twsl'    max number of scrollback lines in a terminal window
'termwinsize'	  'tws'	    size of a terminal window
'termwintype'	  'twt'	    MS-Windows: type of pty to use for terminal window
'terse'			    shorten some messages
'textauto'	  'ta'	    obsolete, use 'fileformats'
'textmode'	  'tx'	    obsolete, use 'fileformat'
'textwidth'	  'tw'	    maximum width of text that is being inserted
'thesaurus'	  'tsr'     list of thesaurus files for keyword completion
'tildeop'	  'top'     tilde command "~" behaves like an operator
'timeout'	  'to'	    time out on mappings and key codes
'timeoutlen'	  'tm'	    time out time in milliseconds
'title'			    let Vim set the title of the window
'titlelen'		    percentage of 'columns' used for window title
'titleold'		    old title, restored when exiting
'titlestring'		    string to use for the Vim window title
'toolbar'	  'tb'	    GUI: which items to show in the toolbar
'toolbariconsize' 'tbis'    size of the toolbar icons (for GTK 2 only)
'ttimeout'		    time out on mappings
'ttimeoutlen'	  'ttm'     time out time for key codes in milliseconds
'ttybuiltin'	  'tbi'     use built-in termcap before external termcap
'ttyfast'	  'tf'	    indicates a fast terminal connection
'ttymouse'	  'ttym'    type of mouse codes generated
'ttyscroll'	  'tsl'     maximum number of lines for a scroll
'ttytype'	  'tty'     alias for 'term'
'undodir'	  'udir'    where to store undo files
'undofile'	  'udf'	    save undo information in a file
'undolevels'	  'ul'	    maximum number of changes that can be undone
'undoreload'	  'ur'	    max nr of lines to save for undo on a buffer reload
'updatecount'	  'uc'	    after this many characters flush swap file
'updatetime'	  'ut'	    after this many milliseconds flush swap file
'varsofttabstop'  'vsts'    a list of number of spaces when typing <Tab>
'vartabstop'	  'vts'	    a list of number of spaces for <Tab>s
'verbose'	  'vbs'     give informative messages
'verbosefile'	  'vfile'   file to write messages in
'viewdir'	  'vdir'    directory where to store files with :mkview
'viewoptions'	  'vop'     specifies what to save for :mkview
'viminfo'	  'vi'	    use .viminfo file upon startup and exiting
'viminfofile'	  'vif'	    file name used for the viminfo file
'virtualedit'	  've'	    when to use virtual editing
'visualbell'	  'vb'	    use visual bell instead of beeping
'warn'			    warn for shell command when buffer was changed
'weirdinvert'	  'wiv'	    for terminals that have weird inversion method
'whichwrap'	  'ww'	    allow specified keys to cross line boundaries
'wildchar'	  'wc'	    command-line character for wildcard expansion
'wildcharm'	  'wcm'     like 'wildchar' but also works when mapped
'wildignore'	  'wig'     files matching these patterns are not completed
'wildignorecase'  'wic'     ignore case when completing file names
'wildmenu'	  'wmnu'    use menu for command line completion
'wildmode'	  'wim'     mode for 'wildchar' command-line expansion
'wildoptions'	  'wop'     specifies how command line completion is done
'winaltkeys'	  'wak'     when the windows system handles ALT keys
'wincolor'	  'wcr'	    window-local highlighting
'window'	  'wi'	    nr of lines to scroll for CTRL-F and CTRL-B
'winheight'	  'wh'	    minimum number of lines for the current window
'winfixheight'	  'wfh'     keep window height when opening/closing windows
'winfixwidth'	  'wfw'     keep window width when opening/closing windows
'winminheight'	  'wmh'     minimum number of lines for any window
'winminwidth'	  'wmw'     minimal number of columns for any window
'winptydll'		    name of the winpty dynamic library
'winwidth'	  'wiw'     minimal number of columns for current window
'wrap'			    long lines wrap and continue on the next line
'wrapmargin'	  'wm'	    chars from the right where wrapping starts
'wrapscan'	  'ws'	    searches wrap around the end of the file
'write'			    writing to a file is allowed
'writeany'	  'wa'	    write to file with no need for "!" override
'writebackup'	  'wb'	    make a backup before overwriting a file
'writedelay'	  'wd'	    delay this many msec for each char (for debug)
------------------------------------------------------------------------------
*Q_ur*		Undo/Redo commands

|u|       N  u		undo last N changes
|CTRL-R|  N  CTRL-R	redo last N undone changes
|U|          U		restore last changed line
------------------------------------------------------------------------------
*Q_et*		External commands

|:shell|	:sh[ell]	start a shell
|:!|		:!{command}	execute {command} with a shell
|K|		   K		lookup keyword under the cursor with
				   'keywordprg' program (default: "man")
------------------------------------------------------------------------------
*Q_qf*		Quickfix commands

|:cc|		:cc [nr]	display error [nr] (default is the same again)
|:cnext|	:cn		display the next error
|:cprevious|	:cp		display the previous error
|:clist|	:cl		list all errors
|:cfile|	:cf		read errors from the file 'errorfile'
|:cgetbuffer|	:cgetb		like :cbuffer but don't jump to the first error
|:cgetfile|	:cg		like :cfile but don't jump to the first error
|:cgetexpr|	:cgete		like :cexpr but don't jump to the first error
|:caddfile|	:caddf		add errors from the error file to the current
				   quickfix list
|:caddexpr|	:cad		add errors from an expression to the current
				   quickfix list
|:cbuffer|	:cb		read errors from text in a buffer
|:cexpr|	:cex		read errors from an expression
|:cquit|	:cq		quit without writing and return error code (to
				   the compiler)
|:make|		:make [args]	start make, read errors, and jump to first
				   error
|:grep|		:gr[ep] [args]	execute 'grepprg' to find matches and jump to
				   the first one
------------------------------------------------------------------------------
*Q_vc*		Various commands

|CTRL-L|	   CTRL-L	clear and redraw the screen
|CTRL-G|	   CTRL-G	show current file name (with path) and cursor
				   position
|ga|		   ga		show ascii value of character under cursor in
				   decimal, hex, and octal
|g8|		   g8		for utf-8 encoding: show byte sequence for
				   character under cursor in hex
|g_CTRL-G|	   g CTRL-G	show cursor column, line, and character
				   position
|CTRL-C|	   CTRL-C	during searches: Interrupt the search
|dos-CTRL-Break|   CTRL-Break	MS-Windows: during searches: Interrupt the
				   search
|<Del>|		   <Del>	while entering a count: delete last character
|:version|	:ve[rsion]	show version information
|:mode|		:mode N		set screen mode to N (obsolete)
|:normal|	:norm[al][!] {commands}
				execute Normal mode commands
|Q|		   Q		switch to "Ex" mode

|:redir|	:redir >{file}		redirect messages to {file}
|:silent|	:silent[!] {command}	execute {command} silently
|:confirm|	:confirm {command}	quit, write, etc., asking about
					unsaved changes or read-only files
|:browse|	:browse {command}	open/read/write file, using a
					file selection dialog
------------------------------------------------------------------------------
*Q_ce*		Command-line editing

|c_<Esc>|	<Esc>		   abandon command-line (if 'wildchar' is
				      <Esc>, type it twice)

|c_CTRL-V|	CTRL-V {char}	   insert {char} literally
|c_CTRL-V|	CTRL-V {number}    enter decimal value of character (up to
				      three digits)
|c_CTRL-K|	CTRL-K {char1} {char2}
				   enter digraph (See |Q_di|)
|c_CTRL-R|	CTRL-R {register}  insert the contents of a register

|c_<Left>|	<Left>/<Right>	   cursor left/right
|c_<S-Left>|	<S-Left>/<S-Right> cursor one word left/right
|c_CTRL-B|	CTRL-B/CTRL-E	   cursor to beginning/end of command-line

|c_<BS>|	<BS>		   delete the character in front of the cursor
|c_<Del>|	<Del>		   delete the character under the cursor
|c_CTRL-W|	CTRL-W		   delete the word in front of the cursor
|c_CTRL-U|	CTRL-U		   remove all characters

|c_<Up>|	<Up>/<Down>	   recall older/newer command-line that starts
				      with current command
|c_<S-Up>|	<S-Up>/<S-Down>	   recall older/newer command-line from history
|c_CTRL-G|	CTRL-G		   next match when 'incsearch' is active
|c_CTRL-T|	CTRL-T		   previous match when 'incsearch' is active
|:history|	:his[tory]	   show older command-lines

Context-sensitive completion on the command-line:

|c_wildchar|	'wildchar'  (default: <Tab>)
				do completion on the pattern in front of the
				   cursor; if there are multiple matches,
				   beep and show the first one; further
				   'wildchar' will show the next ones
|c_CTRL-D|	CTRL-D		list all names that match the pattern in
				   front of the cursor
|c_CTRL-A|	CTRL-A		insert all names that match pattern in front
				   of cursor
|c_CTRL-L|	CTRL-L		insert longest common part of names that
				   match pattern
|c_CTRL-N|	CTRL-N		after 'wildchar' with multiple matches: go
				   to next match
|c_CTRL-P|	CTRL-P		after 'wildchar' with multiple matches: go
				   to previous match
------------------------------------------------------------------------------
*Q_ra*		Ex ranges

|:range|	,		separates two line numbers
|:range|	;		idem, set cursor to the first line number
				before interpreting the second one

|:range|	{number}	an absolute line number
|:range|	.		the current line
|:range|	$		the last line in the file
|:range|	%		equal to 1,$ (the entire file)
|:range|	*		equal to '<,'> (visual area)
|:range|	't		position of mark t
|:range|	/{pattern}[/]	the next line where {pattern} matches
|:range|	?{pattern}[?]	the previous line where {pattern} matches

|:range|	+[num]		add [num] to the preceding line number
				   (default: 1)
|:range|	-[num]		subtract [num] from the preceding line
				   number (default: 1)
------------------------------------------------------------------------------
*Q_ex*		Special Ex characters

|:bar|      |		separates two commands (not for ":global" and ":!")
|:quote|    "		begins comment

|:_%|       %		current file name (only where a file name is expected)
|:_#|       #[num]	alternate file name [num] (only where a file name is
			   expected)
	Note: The next seven are typed literally; these are not special keys!
|:<abuf>|   <abuf>	buffer number, for use in an autocommand (only where a
			   file name is expected)
|:<afile>|  <afile>	file name, for use in an autocommand (only where a
			   file name is expected)
|:<amatch>| <amatch>	what matched with the pattern, for use in an
			   autocommand (only where a file name is expected)
|:<cword>|  <cword>	word under the cursor (only where a file name is
			   expected)
|:<cWORD>|  <cWORD>	WORD under the cursor (only where a file name is
			   expected) (see |WORD|)
|:<cfile>|  <cfile>	file name under the cursor (only where a file name is
			   expected)
|:<sfile>|  <sfile>	file name of a ":source"d file, within that file (only
			   where a file name is expected)

		After "%", "#", "<cfile>", "<sfile>" or "<afile>"
		|::p|	    :p		full path
		|::h|	    :h		head (file name removed)
		|::t|	    :t		tail (file name only)
		|::r|	    :r		root (extension removed)
		|::e|	    :e		extension
		|::s|	    :s/{pat}/{repl}/	substitute {pat} with {repl}
------------------------------------------------------------------------------
*Q_st*		Starting Vim

|-vim|	   vim [options]		start editing with an empty buffer
|-file|	   vim [options] {file} ..	start editing one or more files
|--|	   vim [options] -		read file from stdin
|-tag|	   vim [options] -t {tag}	edit the file associated with {tag}
|-qf|	   vim [options] -q [fname]	start editing in QuickFix mode,
					   display the first error

	Most useful Vim arguments (for full list see |startup-options|)

|-gui|	-g		    start GUI (also allows other options)

|-+|	+[num]		    put the cursor at line [num] (default: last line)
|-+c|	+{command}	    execute {command} after loading the file
|-+/|	+/{pat} {file} ..   put the cursor at the first occurrence of {pat}
|-v|	-v		    Vi mode, start ex in Normal mode
|-e|	-e		    Ex mode, start vim in Ex mode
|-R|	-R		    Read-only mode, implies -n
|-m|	-m		    modifications not allowed (resets 'write' option)
|-d|	-d		    diff mode |diff|
|-b|	-b		    binary mode
|-l|	-l		    lisp mode
|-A|	-A		    Arabic mode ('arabic' is set)
|-F|	-F		    Farsi mode ('fkmap' and 'rightleft' are set)
|-H|	-H		    Hebrew mode ('hkmap' and 'rightleft' are set)
|-V|	-V		    Verbose, give informative messages
|-C|	-C		    Compatible, set the 'compatible' option
|-N|	-N		    Nocompatible, reset the 'compatible' option
|-r|	-r		    give list of swap files
|-r|	-r {file} ..	    recover aborted edit session
|-n|	-n		    do not create a swap file
|-o|	-o [num]	    open [num] windows (default: one for each file)
|-f|	-f		    GUI: foreground process, don't fork
			    Amiga: do not restart Vim to open a window (for
				e.g., mail)
|-s|	-s {scriptin}	    first read commands from the file {scriptin}
|-w|	-w {scriptout}	    write typed chars to file {scriptout} (append)
|-W|	-W {scriptout}	    write typed chars to file {scriptout} (overwrite)
|-T|	-T {terminal}	    set terminal name
|-d|	-d {device}	    Amiga: open {device} to be used as a console
|-u|	-u {vimrc}	    read inits from {vimrc} instead of other inits
|-U|	-U {gvimrc}	    idem, for when starting the GUI
|-i|	-i {viminfo}	    read info from {viminfo} instead of other files
|---|	--		    end of options, other arguments are file names
|--help|    --help	    show list of arguments and exit
|--version| --version	    show version info and exit
|--|	-		    read file from stdin
------------------------------------------------------------------------------
*Q_ed*		Editing a file

	   Without !: Fail if changes have been made to the current buffer.
	      With !: Discard any changes to the current buffer.
|:edit_f|  :e[dit][!] {file}	edit {file}
|:edit|    :e[dit][!]		reload the current file
|:enew|    :ene[w][!]		edit a new, unnamed buffer
|:find|    :fin[d][!] {file}	find {file} in 'path' and edit it

|CTRL-^|   N  CTRL-^		edit alternate file N (equivalent to ":e #N")
|gf|          gf  or ]f		edit the file whose name is under the cursor
|:pwd|     :pwd			print the current directory name
|:cd|      :cd [path]		change the current directory to [path]
|:cd-|     :cd -		back to previous current directory
|:file|    :f[ile]		print the current file name and the cursor
				   position
|:file|    :f[ile] {name}	set the current file name to {name}
|:files|   :files		show alternate file names
------------------------------------------------------------------------------
*Q_fl*		Using the argument list			|argument-list|

|:args|	   :ar[gs]		print the argument list, with the current file
				   in "[]"
|:all|	   :all  or :sall	open a window for every file in the arg list
|:wn|	   :wn[ext][!]		write file and edit next file
|:wn|	   :wn[ext][!] {file}	write to {file} and edit next file, unless
				   {file} exists; With !, overwrite existing
				   file
|:wN|	   :wN[ext][!] [file]	write file and edit previous file

	     in current window    in new window	~
|:argument|  :argu[ment] N	  :sar[gument] N	edit file N
|:next|      :n[ext]		  :sn[ext]		edit next file
|:next_f|    :n[ext] {arglist}	  :sn[ext] {arglist}	define new arg list
							   and edit first file
|:Next|      :N[ext]		  :sN[ext]		edit previous file
|:first|     :fir[st]		  :sfir[st]		edit first file
|:last|      :la[st]		  :sla[st]		edit last file
------------------------------------------------------------------------------
*Q_wq*		Writing and quitting

|:w|	  :[range]w[rite][!]		write to the current file
|:w_f|	  :[range]w[rite] {file}	write to {file}, unless it already
					   exists
|:w_f|	  :[range]w[rite]! {file}	write to {file}.  Overwrite an existing
					   file
|:w_a|	  :[range]w[rite][!] >>		append to the current file
|:w_a|	  :[range]w[rite][!] >> {file}	append to {file}
|:w_c|	  :[range]w[rite] !{cmd}	execute {cmd} with [range] lines as
					   standard input
|:up|	  :[range]up[date][!]		write to current file if modified
|:wall|	  :wa[ll][!]			write all changed buffers

|:q|	  :q[uit]		quit current buffer, unless changes have been
				   made; Exit Vim when there are no other
				   non-help buffers
|:q|	  :q[uit]!		quit current buffer always, discard any
				   changes.  Exit Vim when there are no other
				   non-help buffers
|:qa|	  :qa[ll]		exit Vim, unless changes have been made
|:qa|	  :qa[ll]!		exit Vim always, discard any changes
|:cq|	  :cq			quit without writing and return error code

|:wq|	  :wq[!]		write the current file and exit
|:wq|	  :wq[!] {file}		write to {file} and exit
|:xit|	  :x[it][!] [file]	like ":wq" but write only when changes have
				   been made
|ZZ|	     ZZ			same as ":x"
|ZQ|	     ZQ			same as ":q!"
|:xall|	  :xa[ll][!]  or :wqall[!]
				write all changed buffers and exit

|:stop|	  :st[op][!]		suspend Vim or start new shell; if 'aw' option
				   is set and [!] not given write the buffer
|CTRL-Z|     CTRL-Z		same as ":stop"
------------------------------------------------------------------------------
*Q_ac*		Automatic Commands

|viminfo-file|	read registers, marks, history at startup, save when exiting.

|:rviminfo|	:rv[iminfo] [file]	read info from viminfo file [file]
|:rviminfo|	:rv[iminfo]! [file]	idem, overwrite existing info
|:wviminfo|	:wv[iminfo] [file]	add info to viminfo file [file]
|:wviminfo|	:wv[iminfo]! [file]	write info to viminfo file [file]

|modeline|	Automatic option setting when editing a file

|modeline|	vim:{set-arg}: ..	In the first and last lines of the
					file (see 'ml' option), {set-arg} is
					given as an argument to ":set"

|autocommand|	Automatic execution of commands on certain events.

|:autocmd|	:au			  list all autocommands
|:autocmd|	:au {event}		  list all autocommands for {event}
|:autocmd|	:au {event} {pat}	  list all autocommands for {event}
					  with {pat}
|:autocmd|	:au {event} {pat} {cmd}	  enter new autocommands for {event}
					  with {pat}
|:autocmd|	:au!			  remove all autocommands
|:autocmd|	:au! {event}		  remove all autocommands for {event}
|:autocmd|	:au! * {pat}		  remove all autocommands for {pat}
|:autocmd|	:au! {event} {pat}	  remove all autocommands for {event}
					  with {pat}
|:autocmd|	:au! {event} {pat} {cmd}  remove all autocommands for {event}
					  with {pat} and enter new one
------------------------------------------------------------------------------
*Q_wi*		Multi-window commands

|CTRL-W_s|	CTRL-W s  or  :split	split window into two parts
|:split_f|	:split {file}		split window and edit {file} in one of
					   them
|:vsplit|	:vsplit {file}		same, but split vertically
|:vertical|	:vertical {cmd}		make {cmd} split vertically

|:sfind|	:sf[ind] {file}		split window, find {file} in 'path'
					   and edit it
|:terminal|	:terminal {cmd}		open a terminal window
|CTRL-W_]|	CTRL-W ]		split window and jump to tag under
					   cursor
|CTRL-W_f|	CTRL-W f		split window and edit file name under
					   the cursor
|CTRL-W_^|	CTRL-W ^		split window and edit alternate file
|CTRL-W_n|	CTRL-W n  or  :new	create new empty window
|CTRL-W_q|	CTRL-W q  or  :q[uit]	quit editing and close window
|CTRL-W_c|	CTRL-W c  or  :cl[ose]	make buffer hidden and close window
|CTRL-W_o|	CTRL-W o  or  :on[ly]	make current window only one on the
					   screen

|CTRL-W_j|	CTRL-W j		move cursor to window below
|CTRL-W_k|	CTRL-W k		move cursor to window above
|CTRL-W_CTRL-W|	CTRL-W CTRL-W		move cursor to window below (wrap)
|CTRL-W_W|	CTRL-W W		move cursor to window above (wrap)
|CTRL-W_t|	CTRL-W t		move cursor to top window
|CTRL-W_b|	CTRL-W b		move cursor to bottom window
|CTRL-W_p|	CTRL-W p		move cursor to previous active window

|CTRL-W_r|	CTRL-W r		rotate windows downwards
|CTRL-W_R|	CTRL-W R		rotate windows upwards
|CTRL-W_x|	CTRL-W x		exchange current window with next one

|CTRL-W_=|	CTRL-W =		make all windows equal height & width
|CTRL-W_-|	CTRL-W -		decrease current window height
|CTRL-W_+|	CTRL-W +		increase current window height
|CTRL-W__|	CTRL-W _		set current window height (default:
					   very high)

|CTRL-W_<|	CTRL-W <		decrease current window width
|CTRL-W_>|	CTRL-W >		increase current window width
|CTRL-W_bar|	CTRL-W |		set current window width (default:
					   widest possible)
------------------------------------------------------------------------------
*Q_bu*		Buffer list commands

|:buffers|	:buffers  or  :files	list all known buffer and file names

|:ball|		:ball	  or  :sball	edit all args/buffers
|:unhide|	:unhide   or  :sunhide	edit all loaded buffers

|:badd|		:badd {fname}		add file name {fname} to the list
|:bunload|	:bunload[!] [N]		unload buffer [N] from memory
|:bdelete|	:bdelete[!] [N]		unload buffer [N] and delete it from
					   the buffer list

		in current window  in new window       ~
|:buffer|	:[N]buffer [N]     :[N]sbuffer [N]     to arg/buf N
|:bnext|	:[N]bnext [N]      :[N]sbnext [N]      to Nth next arg/buf
|:bNext|	:[N]bNext [N]      :[N]sbNext [N]      to Nth previous arg/buf
|:bprevious|	:[N]bprevious [N]  :[N]sbprevious [N]  to Nth previous arg/buf
|:bfirst|	:bfirst	           :sbfirst            to first arg/buf
|:blast|	:blast	           :sblast             to last arg/buf
|:bmodified|	:[N]bmod [N]       :[N]sbmod [N]       to Nth modified buf
------------------------------------------------------------------------------
*Q_sy*		Syntax Highlighting

|:syn-on|	:syntax on		start using syntax highlighting
|:syn-off|	:syntax off		stop using syntax highlighting

|:syn-keyword|	:syntax keyword {group-name} {keyword} ..
					add a syntax keyword item
|:syn-match|	:syntax match {group-name} {pattern} ...
					add syntax match item
|:syn-region|	:syntax region {group-name} {pattern} ...
					add syntax region item
|:syn-sync|	:syntax sync [ccomment | lines {N} | ...]
					tell syntax how to sync
|:syntax|	:syntax [list]		list current syntax items
|:syn-clear|	:syntax clear		clear all syntax info

|:highlight|	:highlight clear	clear all highlight info
|:highlight|	:highlight {group-name} {key}={arg} ..
					set highlighting for {group-name}

|:filetype|	:filetype on		switch on file type detection, without
					syntax highlighting
|:filetype|	:filetype plugin indent on
					switch on file type detection, with
					automatic indenting and settings
------------------------------------------------------------------------------
*Q_gu*		GUI commands

|:gui|		:gui			UNIX: start the GUI
|:gui|		:gui {fname} ..		idem, and edit {fname} ..

|:menu|		:menu			list all menus
|:menu|		:menu {mpath}		list menus starting with {mpath}
|:menu|		:menu {mpath} {rhs}	add menu {mpath}, giving {rhs}
|:menu|		:menu {pri} {mpath} {rhs}
					idem, with priorities {pri}
|:menu|		:menu ToolBar.{name} {rhs}
					add toolbar item, giving {rhs}
|:tmenu|	:tmenu {mpath} {text}	add tooltip to menu {mpath}
|:unmenu|	:unmenu {mpath}		remove menu {mpath}
------------------------------------------------------------------------------
*Q_fo*		Folding

|'foldmethod'|	set foldmethod=manual	manual folding
		set foldmethod=indent	folding by indent
		set foldmethod=expr	folding by 'foldexpr'
		set foldmethod=syntax	folding by syntax regions
		set foldmethod=marker	folding by 'foldmarker'

|zf|		zf{motion}		operator: Define a fold manually
|:fold|		:{range}fold		define a fold for {range} lines
|zd|		zd			delete one fold under the cursor
|zD|		zD			delete all folds under the cursor

|zo|		zo			open one fold under the cursor
|zO|		zO			open all folds under the cursor
|zc|		zc			close one fold under the cursor
|zC|		zC			close all folds under the cursor

|zm|		zm			fold more: decrease 'foldlevel'
|zM|		zM			close all folds: make 'foldlevel' zero
|zr|		zr			reduce folding: increase 'foldlevel'
|zR|		zR			open all folds: make 'foldlevel' max.

|zn|		zn			fold none: reset 'foldenable'
|zN|		zN			fold normal set 'foldenable'
|zi|		zi			invert 'foldenable'

 vim:tw=78:ts=8:noet:ft=help:norl:

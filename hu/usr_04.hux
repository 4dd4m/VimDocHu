*usr_04.txt*	Vim verzió 8.2.  Frissítve: 2021 Feb 22

		  Bram Moolenaar: Vim felhasználói Kézikönyv

			     Kisebb változtatások


Az alábbi fejezet bemutatja, hogy hogyan korrigálj és hogyan mozgasd a
szöveget. Háromféleképpen tanítja meg a művelet elvégzését:
operátor-tartomány, Visual mód, és szöveges objektumokkal.

|04.1|	Operátorok és tartományok
|04.2|	Szöveg cseréje
|04.3|	Szerkesztés ismétlése
|04.4|	Visual mód
|04.5|	Szövegek mozgatása
|04.6|	Szövegek másolása 
|04.7|	Vágólap használata
|04.8|	Szöveges Objektumok
|04.9|	Replace mód
|04.10|	Összefoglalás

     Következő fejezet: |usr_05.txt|  A beállításaid
 Előző fejezet |usr_03.txt|  Navigáció
Tartalomjegyzék: |usr_toc.txt|

==============================================================================
*04.1*	Operátorok és tartományok

A második fejezetben megismerkedhettél az "x" paranccsal (karakter törlése),
valamind a "4x" (négy karakter törlése parancsokkal).
   A "dw" paracs kitörli az adott szót. Talán felismerted már, hogy a "w"
parancs tartományt jelöl (a következő szóig). A "d" parancsot követheti
bármely olyan parancs, amely tartományt jelöl (legyen az sor vége, sor
kezdete, fájl eleje, fájl vége), minden esetben addig fog törölni, ahol a
kurzor landol.
   A "4w" parancs például előre lép 4 szót. A "d4w" parancs töröl négy szót.

	To err is human. To really foul up you need a computer. ~
			 ------------------>
				 d4w

	To err is human. you need a computer. ~

A Vim csak addig töröl, ameddig a kurzor mozdul. A Vim tudja, ha egy törlő
parancshoz "e" tartományt használsz, akkor valószínűleg nem szeretnéd törölni
a szó első részét, illetve, nem szeretnéd megtartani a szó utolsó karakterét
sem:

	To err is human. you need a computer. ~
			-------->
			   d2e

	To err is human. a computer. ~

A kurzor alatt lévő karakter sorsát az dönti el, hogy milyen tartománnyal
mozdítod el a kurzort. A dokumentáció "exkluzív" parancsnak tekinti azon
parancsokat, ahol a tartomány végén (vagy kezdetén) lévő karakterek nem érintettek a művelet során  (nyilvánvalóan "inluzívnak", ha igen).

A "$" parancs a sor végére helyezi a kurzort. A "d$" parancs a kurzor kezdeti
pozíciójától a sor végéig töröl. Ez egy inkluzív művelet, azaz a sor végén
lévő karakter is törlődik a parancs végrehajtásakor:

	To err is human. a computer. ~
		       ------------>
			    d$

	To err is human ~

A minta: operátor-tartomány. Először egy operátor parancsot kell begépelned,
például a "d" törlő operátort, ezután következhet az operátor hatásköre, azaz
a tartomány (például "4l" vagy "w"). Röviden, azokon a szövegrészleteken
végezhetsz műveleteket, melyeken a kurzor képzeletben áthalad.

==============================================================================
*04.2*	Szöveg cseréje

Ehhez a művelethez a "c" csere parancs tartozik. Ugyanúgy viselkedik, mint a
"d" parancs azzal a különbséggel, hogy a Insert módra állítja a szerkesztőt.
Például "cw" egy szót cserél. Illetve még pontosabban, kitörli a szót is a
szerkesztőt Insert módra állítja. 

	To err is human ~
	   ------->
	     c2wbe<Esc>

	To be human ~

A "c2wbe<Esc>" parancs részekre bontva:

	c	a csere operátor
	2w	két szót előre (ezek ki lesznek törölve, majd Insert módra
		váltás)
	be	"be" bevitele
	<Esc>	vissza Normál módba

Felfedezhettünk valami különlegeset: A szóköz a "human" szó elől nem lett
törölve. A c operátor a "d" operátorhoz hasonlóan műküdik, kivéve a "cw"
parancsot. Valójában "cw" parancs a "ce" paranccsal egyenértékű, mely a szó
végéig töröl, azért a szó utáni szóköz nem képzi a tartomány részét. A Vi
körszakból maradt vissza a mechanizmus, melyet annyi ember használt már, hogy
a Vim is így lett implementálva.


NAGYOBB TERJEDELMŰ CSERÉK

A "dd" parancs egy egész sort töröl, a "cc" egy egész sort cserél és megtartja
a sor behúzását.

Mint a "d$", mely a sor végéig töröl, "c$" a sor végéig cserél. Olyan, mintha
"d$" törölnénk a sor végéig, majd "a" paranccsal hozzáfűzést kezdeményeznénk.


RÖVIDÍTÉSEK

A gyakori operátor-tartomány parancsok egy karakteres parancsot kaptak:

	x  azaz  dl  (kurzor alatt lévő karakter törlése)
	X  azaz  dh  (kurzortól balra lévő karakter törlése)
	D  azaz  d$  (törlés a sor végéig)
	C  azaz  c$  (csere a sor végéig)
	s  azaz  cl  (karakter cseréje)
	S  azaz  cc  (teljes sor cseréje)


HOVÁ TEGYÜK A MENNYISÉGET

A "3dw" parancs és a "d3w" parancs három szót töröl. Ha nagyon pontosak
akarunk lenni, akkor az első parancs "3dw" egy szót töröl háromszor; a "d3w"
parancs egyszerre töröl három szót. Ha úgy kívánod, a mennyiséget
elhelyezheted mindkét helyre. Például "3d2w" két szót töröl, háromszor, azaz
összesen hat szót.


EGYETLEN EGY KARAKTER CSERÉJE

Az "r" parancs nem operátor. Arra vár, hogy begépeljünk egy karaktert, hogy a
kurzor alatt lévőt felülírhassa. Ugyanezt megteheted a "cl" vagy az "s"
parancsokkal, de az "r" parancs után nem kell <Esc> billentyűt ütni, hogy
visszalépjünk Normál módba. 

	there is somerhing grong here ~
	rT	     rt    rw

	There is something wrong here ~

Mennyiséggel használva az "r" az összesg karaktert ugyanarra ga karakterre
cseréli le. Például:

	There is something wrong here ~
			   5rx

	There is something xxxxx here ~

Karakter lecserélése sortörésre "r<Enter>". A mennyiség itt csak a törölt
karakterek számát határozza meg. "4r<Enter>" négy karaktert cserél, de csak
egy sortörést szúr be.

==============================================================================
*04.3*	Szerkesztés ismétlése

Az "." parancs a legegyszerűbb, de leghasznosabb Vim parancsok közé tartozik.
Megismétli a legutolsó szerkesztést. Például tegyük fel, hogy HTML fájlt
szerkesztesz és ki szeretnéd törölni a <B> taget. Az első < jelre
pozícionálod a kurzort, majd "df>" paranccsal megsemmisíted a taget, majd a
következő < jelre állsz, melyen a "." parancsot kiadva megismétlődik az utolsó
szerkesztésed "df>" és a tag eltűnik. 

			      To <B>generate</B> a table of <B>contents ~
	f<   ugrás <     --->
	df>  törlés eddig >     -->
	f<   következő <	   --------->
	.    df>ismétlése		    --->
	f<   következő <		       ------------->
	.    df> ismétlése				    -->

Az összes parancs megismételhető kivéve a visszavonást ("u"), CTRL-R (mégis)
és minden command-line parancsot (":").

Másik példa: Le szeretnéd cserlélni a "four" szót "five"-ra, mely többször is
előfordul a szövegben. Ezekkel a prancsokkal gyorsan teljesítheted a
feladatot:

	/four<Enter>	"four" keresése
	cwfive<Esc>	csere "five"-ra
	n		következő "four" 
	.		csere "five"-ra (ismétlés)
	n		következő "four" 
	.		csere "five"-ra (ismétlés)
			stb.

==============================================================================
*04.4*	Visual mód

Egyszerű elemeket az operátor-tartomány kombinációval törölhetünk. Gyakran 
viszont nem könnyű eldönteni, hogy az a adott parancs áthalad-e a kívánt 
szövegrészleten. Ekkor a legegyszerűbb megoldás a Visual mód használata.

A Visual módba "v" betű megnyomásával léphetünk be. Ha ebben a módban
elmozdítjuk a a kurzort, akkor aktív szöveget kiemeli a szerkesztő és
láthatóvá válik vizuálisan az a tartomány, amire operátor hatással lesz. 
   Például törlés a szó közepétől egy másik szó közepéig:

		This is an examination sample of visual mode ~
			       ---------->
				 velllld

		This is an example of visual mode ~

Ezzel a módszerrel nincs szükség észben tartanunk, hogy hányszor kell "l"
betűt gépelni, hiszen látjuk, hogy mi lesz kitörölve ha "d"-t ütünk.

Bármikor visszatérhetsz Normál módba <Esc> megnyomásával, ekkor a kijelölés
megszűnik és a szerkesztő Normál módba vált át.

SOROK KIJELÖLÉSE

Ha teljes sorokon szeretnél műveletet végrehajtani, akkor válts át Visual
módra "V". Az aktuális sor azonnal ki lesz jelölve anélkül, hogy a kurzort
megmozdítanánk. Balra és jobbra mozdulva semmi sem történik. Felfelés és
lefelé mozdulva viszont a kijelölés ki lesz terjesztve egész soronként.
   Például, jelölj ki három sort "Vjj":

			      +------------------------+
			      | text more text 	       |
		           >> | more text more text    | |
	kiválasztott sorok >> | text text text	       | | Vjj
		           >> | text more              | V
			      | more text more	       |
			      +------------------------+


BLOKKOK KIJELÖLÉSE

Ha négyzet alapú karakterblokkokon szeretnél műveleteket végrehajtani, akkor a
kijelölést a CTRL-V billentyűvel kezdheted el (Visual mód). Táblázatszerű
adatstruktúrák esetében a leghasznosabb:

		name		Q1	Q2	Q3
		pierre		123	455	234
		john		0	90	39
		steve		392	63	334

To delete the middle "Q2" column, move the cursor to the "Q" of "Q2".  Press
CTRL-V to start blockwise Visual mode.  Now move the cursor three lines down
with "3j" and to the next word with "w".  You can see the first character of
the last column is included.  To exclude it, use "h".  Now press "d" and the
middle column is gone.


GOING TO THE OTHER SIDE

If you have selected some text in Visual mode, and discover that you need to
change the other end of the selection, use the "o" command (Hint: o for other
end).  The cursor will go to the other end, and you can move the cursor to
change where the selection starts.  Pressing "o" again brings you back to the
other end.

When using blockwise selection, you have four corners.  "o" only takes you to
one of the other corners, diagonally.  Use "O" to move to the other corner in
the same line.

Note that "o" and "O" in Visual mode work very differently from Normal mode,
where they open a new line below or above the cursor.

==============================================================================
*04.5*	Moving text

When you delete something with "d", "x", or another command, the text is
saved.  You can paste it back by using the "p" command.  (The Vim name for
this is put).
   Take a look at how this works.  First you will delete an entire line, by
putting the cursor on the line you want to delete and typing "dd".  Now you
move the cursor to where you want to put the line and use the "p" (put)
command.  The line is inserted on the line below the cursor.

	a line		a line	      a line
	line 2	  dd	line 3	  p   line 3
	line 3			      line 2

Because you deleted an entire line, the "p" command placed the text line below
the cursor.  If you delete part of a line (a word, for instance), the "p"
command puts it just after the cursor.

	Some more boring try text to out commands. ~
			 ---->
			  dw

	Some more boring text to out commands. ~
			 ------->
			    welp

	Some more boring text to try out commands. ~


MORE ON PUTTING

The "P" command puts text like "p", but before the cursor.  When you deleted a
whole line with "dd", "P" will put it back above the cursor.  When you deleted
a word with "dw", "P" will put it back just before the cursor.

You can repeat putting as many times as you like.  The same text will be used.

You can use a count with "p" and "P".  The text will be repeated as many times
as specified with the count.  Thus "dd" and then "3p" puts three copies of the
same deleted line.


SWAPPING TWO CHARACTERS

Frequently when you are typing, your fingers get ahead of your brain (or the
other way around?).  The result is a typo such as "teh" for "the".  Vim
makes it easy to correct such problems.  Just put the cursor on the e of "teh"
and execute the command "xp".  This works as follows: "x" deletes the
character e and places it in a register.  "p" puts the text after the cursor,
which is after the h.

	teh     th     the ~
	 x       p

==============================================================================
*04.6*	Copying text

To copy text from one place to another, you could delete it, use "u" to undo
the deletion and then "p" to put it somewhere else.  There is an easier way:
yanking.  The "y" operator copies text into a register.  Then a "p" command
can be used to put it.
   Yanking is just a Vim name for copying.  The "c" letter was already used
for the change operator, and "y" was still available.  Calling this
operator "yank" made it easier to remember to use the "y" key.

Since "y" is an operator, you use "yw" to yank a word.  A count is possible as
usual.  To yank two words use "y2w".  Example:

	let sqr = LongVariable * ~
		 -------------->
		       y2w

	let sqr = LongVariable * ~
			       p

	let sqr = LongVariable * LongVariable ~

Notice that "yw" includes the white space after a word.  If you don't want
this, use "ye".

The "yy" command yanks a whole line, just like "dd" deletes a whole line.
Unexpectedly, while "D" deletes from the cursor to the end of the line, "Y"
works like "yy", it yanks the whole line.  Watch out for this inconsistency!
Use "y$" to yank to the end of the line.

	a text line   yy	a text line	       a text line
	line 2			line 2		p      line 2
	last line		last line	       a text line
						       last line

==============================================================================
*04.7*	Using the clipboard

If you are using the GUI version of Vim (gvim), you can find the "Copy" item
in the "Edit" menu.  First select some text with Visual mode, then use the
Edit/Copy menu item.  The selected text is now copied to the clipboard.  You
can paste the text in other programs.  In Vim itself too.

If you have copied text to the clipboard in another application, you can paste
it in Vim with the Edit/Paste menu item.  This works in Normal mode and Insert
mode.  In Visual mode the selected text is replaced with the pasted text.

The "Cut" menu item deletes the text before it's put on the clipboard.  The
"Copy", "Cut" and "Paste" items are also available in the popup menu (only
when there is a popup menu, of course).  If your Vim has a toolbar, you can
also find these items there.

If you are not using the GUI, or if you don't like using a menu, you have to
use another way.  You use the normal "y" (yank) and "p" (put) commands, but
prepend "* (double-quote star) before it.  To copy a line to the clipboard: >

	"*yy

To put text from the clipboard back into the text: >

	"*p

This only works on versions of Vim that include clipboard support.  More about
the clipboard can be found in section |09.3| and here: |clipboard|.

==============================================================================
*04.8*	Text objects

If the cursor is in the middle of a word and you want to delete that word, you
need to move back to its start before you can do "dw".  There is a simpler way
to do this: "daw".

	this is some example text. ~
		       daw

	this is some text. ~

The "d" of "daw" is the delete operator.  "aw" is a text object.  Hint: "aw"
stands for "A Word".  Thus "daw" is "Delete A Word".  To be precise, the white
space after the word is also deleted (or the white space before the word if at
the end of the line).

Using text objects is the third way to make changes in Vim.  We already had
operator-motion and Visual mode.  Now we add operator-text object.
   It is very similar to operator-motion, but instead of operating on the text
between the cursor position before and after a movement command, the text
object is used as a whole.  It doesn't matter where in the object the cursor
was.

To change a whole sentence use "cis".  Take this text:

	Hello there.  This ~
	is an example.  Just ~
	some text. ~

Move to the start of the second line, on "is an".  Now use "cis":

	Hello there.    Just ~
	some text. ~

The cursor is in between the blanks in the first line.  Now you type the new
sentence "Another line.":

	Hello there.  Another line.  Just ~
	some text. ~

"cis" consists of the "c" (change) operator and the "is" text object.  This
stands for "Inner Sentence".  There is also the "as" ("A Sentence") object.
The difference is that "as" includes the white space after the sentence and
"is" doesn't.  If you would delete a sentence, you want to delete the white
space at the same time, thus use "das".  If you want to type new text the
white space can remain, thus you use "cis".

You can also use text objects in Visual mode.  It will include the text object
in the Visual selection.  Visual mode continues, thus you can do this several
times.  For example, start Visual mode with "v" and select a sentence with
"as".  Now you can repeat "as" to include more sentences.  Finally you use an
operator to do something with the selected sentences.

You can find a long list of text objects here: |text-objects|.

==============================================================================
*04.9*	Replace mode

The "R" command causes Vim to enter replace mode.  In this mode, each
character you type replaces the one under the cursor.  This continues until
you type <Esc>.
   In this example you start Replace mode on the first "t" of "text":

	This is text. ~
		Rinteresting.<Esc>

	This is interesting. ~

You may have noticed that this command replaced 5 characters in the line with
twelve others.  The "R" command automatically extends the line if it runs out
of characters to replace.  It will not continue on the next line.

You can switch between Insert mode and Replace mode with the <Insert> key.

When you use <BS> (backspace) to make a correction, you will notice that the
old text is put back.  Thus it works like an undo command for the previously
typed character.

==============================================================================
*04.10*	Conclusion

The operators, movement commands and text objects give you the possibility to
make lots of combinations.  Now that you know how they work, you can use N
operators with M movement commands to make N * M commands!

You can find a list of operators here: |operator|.

For example, there are many other ways to delete pieces of text.  Here are a
few common ones:

x	delete character under the cursor (short for "dl")
X	delete character before the cursor (short for "dh")
D	delete from cursor to end of line (short for "d$")
dw	delete from cursor to next start of word
db	delete from cursor to previous start of word
diw	delete word under the cursor (excluding white space)
daw	delete word under the cursor (including white space)
dG	delete until the end of the file
dgg	delete until the start of the file

If you use "c" instead of "d" they become change commands.  And with "y" you
yank the text.  And so forth.


There are a few common commands to make changes that didn't fit somewhere
else:

	~	Change case of the character under the cursor, and move the
		cursor to the next character.  This is not an operator (unless
		'tildeop' is set), thus you can't use it with a motion
		command.  It does work in Visual mode, where it changes case
		for all the selected text.

	I	Start Insert mode after moving the cursor to the first
		non-blank in the line.

	A	Start Insert mode after moving the cursor to the end of the
		line.

==============================================================================

Next chapter: |usr_05.txt|  Set your settings

Copyright: see |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:

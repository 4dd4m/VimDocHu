*usr_11.txt*	For Vim version 8.2.  Last change: 2020 Oct 25

		  Bram Moolenaar: Vim felhasználói kézikönyv

				Helyreállítás


Összeomlott a rendszered? Becsapott a villám? És mindezt órákon át tartó
szerkesztés közben? Csak semmi pánik! A Vim elég információt tárol, hogy a
munka nagy része meg legyen mentve. A fejezet azt tárgyalja, hogy hogyan
szerezheted vissza a lehető legtöbbet az elvesztett munkádból, valamint, hogy
hol találod a swapfájlt.

|11.1|	Alapvető helyreállítás
|11.2|	Hol val a swapfájl?
|11.3|	Összeomlott vagy sem?
|11.4|	További irodalom

Következő fejezet: |usr_12.txt|  Tippek, trükkök
    Előző fejezet: |usr_10.txt|  Nagy változtatások
  Tartalomjegyzék: |usr_toc.txt|

==============================================================================
*11.1*	Alapvető helyreállítás

A legtöbb esetben a helyreállítás egyszerű, hiszen nyilvánvalóan tudod, hogy
melyik fájlt szerkesztetted a hiba beálltakor. Ha nem a merevlemezed
hibásodott meg, akkor  szerencsés vagy. Indítsd el a Vimet az "-" argumentum
hozzáadásával: >

	vim -r help.txt

A Vim beolvassa a swapfájlt (ezt használja a munkád ideiglenes tárolására), ha
lehetséges, akkor még részleteket is az elveszett fájlból. Ha a folyamat
sikeres, erről egy üzenetet kapsz (különböző fájlnevekkel természetesen):

	Using swap file ".help.txt.swp" ~
	Original file "~/vim/runtime/doc/help.txt" ~
	Recovery completed. You should check if everything is OK. ~
	(You might want to write out this file under another name ~
	and run diff with the original file to check for changes) ~
	You may want to delete the .swp file now. ~

A fájlt mentsd el más fájlnévvel: >

	:write help.txt.recovered

A fájlt végül hasonlítsd össze az eredeti fájllal, hogy kiderüljön, azt
kaptad-e, amit vártál. A Vimdiff nagyon hatékony módszer erre |08.7|. Például: >

	:write help.txt.recovered
	:edit #
	:diffsp help.txt

Vigyázz, mert az eredeti fájl tartalmazhatja a legfrissebb változásokat (ez az
a fájl, amit az összeomlás előtt éppen elmentettél). Ellenőrizd, hogy  minden
sor megvan-e (vannak helyzetek, amit a Vim sem tud kijavítani).
   Ha figyelmeztető üzenetet kapsz, akkor  olvasd el őket figyelmesen. Ez
ritka egyébként.

Ha a visszaállítás teljesen sikerült, a swap ls az eredeti fájl ugyanaz, ezt a
figyelmeztető üzenetet kapod:

	Using swap file ".help.txt.swp" ~
	Original file "~/vim/runtime/doc/help.txt" ~
	Recovery completed. Buffer contents equals file contents. ~
	You may want to delete the .swp file now. ~

Ez általában akkor fordul elő, ha már helyreállítottad egyszer a fájlt, vagy
ha legutolsó mentés után már nem változtattál a fájlon. Nyugodt szívvel
törölheted a swapfájlt.

Normális jelenség, ha a fájl nagy része helyreállítódott, kivéve egy két apró
változást. A Vim rögzíti a munkát (flush) a merevlemezre (nem magára a
szerkesztett fájlra ír) körülbelül négy másodpercenként, ha nem írsz semmit,
vagy körülbelül 200 leütés után. A két említett beállításért egyébként az
'updatetime' és a 'updatecount' felel. Így, ha a Vimnek nem volt esélye a
flushel menteni a munkánkat, akkor csak a legutolsó flush és az összeomlás
között szerkesztésink vesznek el.

Abban az esetben sincs probléma, ha egy olyan bufferrel dolgoztál, ami még nem
volt elmentve. Adj át egy üres stringet argumentumként: >

	vim -r ""

Arra figyelned kell hogy a megfelelő könyvtárban tartózkodj, ellenkező esetben
a Vim nem fogja megtalálni a swapfájl.

==============================================================================
*11.2*	Hol van a swapfájl?

Számos helyen. Normál esetben a fájllal megegyező könyvtárban. Megtalálásához
látogass el a fájl könyvtárába, és indítsd el a Vimet szimplán csak az -r
argumentummal: >

	vim -r

Az elérhető swapfájlokat lista formájában böngészheted. Ezen kívül még
megvizsgálja a szokásos futásidejű könyvtárakat, személyes beállításokat, stb.
A nem releváns könyvtárakat nem vizsgálja, nem képes rekurzívan bejárni az
almappákat.
   A kimenet kinézhet például így:

	Swap files found: ~
	   In current directory: ~
	1.    .main.c.swp ~
		  owned by: mool   dated: Tue May 29 21:00:25 2001 ~
		 file name: ~mool/vim/vim6/src/main.c ~
		  modified: YES ~
		 user name: mool   host name: masaka.moolenaar.net ~
		process ID: 12525 ~
	   In directory ~/tmp: ~
	      -- none -- ~
	   In directory /var/tmp: ~
	      -- none -- ~
	   In directory /tmp: ~
	      -- none -- ~

Abban az esetben, ha egy fájlhoz több swapfájl is tartozik, akkor ki kell
választanod, hogy melyiket szeretnéd. Érdemes a dátumra fokozott figyelmet
fordítani.
   Ha nincs ötleted hogy melyik a legmegfelelőbb, akkor próbáld ki az összeset
egyesével és válaszd a legmegfelelőbbet.


SPECIFIKUS SWAPFÁJL HASZNÁLATA

Ha pontosan tudod, hogy melyik swapfájlból szeretnél dolgozni, akkor add át az
-r argumentum után. A Vim megpróbálja kiolvasni az eredeti fájl nevét.

Példa: >
	vim -r .help.txt.swo

Nagyon jól jöhet, ha a swapfájlod egy eltérő könyvtárban van. A Vim felismeri
a *.s[uvw][a-z] mintát swapfájlként.

Ha ez sem működik, akkor nézd meg, hogy milyen fájlokat jelentett a Vim és
nevezd át őket értelemszerűen. Pillants bele a 'directory' változóba, mert
lehet teljesen más helyre val elmentve, mint ahogy azt gondoltad.

	Megjegyzés:
	Nézd végig a 'dir' opcióban leírt elérési utakat. Keress valami
	hasonlót: "filename.sw?". Bár a Vim ezeket a könyvtárakat végigjárja
	és minden tűvé tesz, hogy megtalálja a filename.swp fájlt, olyan
	problémákat nem tud megoldani, ha például a 'shell' érvénytelen (és
	emiatt nem működik a metakarakterek értelmezése). 

==============================================================================
*11.3*	Összeomlott vagy sem?					*ATTENTION* *E325*

A szerkesztő próbál megmenteni a butaságoktól. Tegyük fel, hogy ártalmatlanul
megnyitsz egy fájl megkezdve a szerkesztést és a fájl tartalmát várod amit
helyett egy elég hosszú hibaüzenetet kapsz:

		E325: ATTENTION ~
	Found a swap file by the name ".main.c.swp" ~
		  owned by: mool   dated: Tue May 29 21:09:28 2001 ~
		 file name: ~mool/vim/vim6/src/main.c ~
		  modified: no ~
		 user name: mool   host name: masaka.moolenaar.net ~
		process ID: 12559 (still running) ~
	While opening file "main.c" ~
		     dated: Tue May 29 19:46:12 2001 ~
 ~
	(1) Another program may be editing the same file. ~
	    If this is the case, be careful not to end up with two ~
	    different instances of the same file when making changes. ~
	    Quit, or continue with caution. ~
 ~
	(2) An edit session for this file crashed. ~
	    If this is the case, use ":recover" or "vim -r main.c" ~
	    to recover the changes (see ":help recovery"). ~
	    If you did this already, delete the swap file ".main.c.swp" ~
	    to avoid this message. ~

Az üzenetet azért kaptad, mert az általad szerkeszteni kívánt fájlról már
létezik biztonsági másolat. Feltételezvén, hogy valami balul sült el és az
eredmény nem biztos, hogy a megszokott lesz. Két dolog történhetett.

1. Egy másik szerkesztési folyamat már aktív ezen a fájlon (meg van nyitva egy
   másik szerkesztőben, ami nem csak Vim lehet. Ha az üzenet tartalmazza a
   "process ID"-t, akkor ez történt. A hibaüzenet egyébként így néz ki:

		process ID: 12559 (still running) ~

   A "still running" arra utal, hogy a másik szerkesztési folyamat a saját
   gépünkön fut. Unix rendszereken ez luxusnak számít, más rendszerek nem
   ennyire pontosak. Ha a fájlt hálózaton keresztül szerkeszted, akkor az
   üzenet nem jelenik meg, hiszen a másik szerkesztési folyamat nem a saját
   gépen fut. Ezért saját magadnak kell kideríteni a hiba okát. 
      Ha a fájlt két Vimben van megnyitva (és folytatod a szerkesztést), akkor 
   a fájlról két verzió készül. Így az utoljára kiírt fájl felül fogja írni a
   másikat (potenciális adatvesztés). Ezért a legjobb, ha kilépsz mindkettőből
   és manuális javítasz.

2. A swapfájl egy előző összeomlott Vim- vagy rendszer mellékterméke.
   Ellenőrizd az üzenetekben szereplő dátumot. Ha a swapfájlon szereplő dátum
   frissebb, mint az eredeti fájlon, akkor következő üzenetet látod:

		modified: YES ~

   Így nagy valószínűséggel a szerkesztési folyamat összeomlott, ezért megéri
   helyreállítani. 
      Ha a dátum az eredeti fájlon frissebb, akkor ez összeomlás előtt már nem
   változott (ebben az esetben szerencsés vagy és nincs szükséged a
   swapfájlra. He ezek ellenére a régebbi swapfájlt választanád, akkor
   figyelmeztető üzenetet fogsz kapni:

      NEWER than swap file! ~


MEGJEGYZÉS: A Vim az alábbi szituációkban tudja, hogy nincs szükséged a
swapfájlra (amit automatikusan töröl):
- A fájl érvényes swapfájl (Magic number korrekt).
- Ha a modified flag nincs beállítva
- Ha a folyamat nem fut

Az eseményeket szisztematikusan kezelheted a |FileChangedShell| autocommand
eseménykezelővel.


OLVASHATATLAN SWAPFÁJL~

Néha ez...

	[cannot be read] ~


a sor jelenik meg a swapfájl helyén. Ez jelenthet jót és rosszat is, a
körülményektől függ.

Jót jelent, ha az előző szerkesztési folyamat úgy omlott össze, hogy a fájl
már nem tartalmazott módosítást. Könyvtárnézetben (shell) láthatjuk, hogy a
tartalma  0 byte. Törölheted.

Kevésbé jó, ha nem rendelkezel a swapfájlhoz megfelelő írási- és olvasási
jogosultságokkal. Megtekintheted csak olvasható módban, vagy kiléphetsz.
Többfelhasználós rendszeren, ha mi írtuk a fájlt utoljára különböző
felhasználónévvel, megpróbálhatunk bejelentkezni egy olyan felhasználóval,
akinek van írási jogosultsága. Végső esetben ki kell deríteni, hogy ki
szerkesztette (vagy szerkeszti) a fájlt és tárgyalni velük.

Nagyon rossz abban az esetben, ha a swapfájl fizikailag olvashatatlanná válik.
Szerencsére, ennek az esélye igen csekély. Megtekintheted a fájlt csak
olvasható módban (ha szeretnéd) ezáltal információt szerezve az "elfeledett"
szerkesztésekről. Ha tiéd a fájl, akkor légy kész a visszavonásokra.


MIA TEENDŐ?					*swap-exists-choices*

Ha a párbeszédablakok támogatják, akkor hat lehetőség közül lehet választani:

  Swap file ".main.c.swp" already exists! ~
  [O]pen Read-Only, (E)dit anyway, (R)ecover, (Q)uit, (A)bort, (D)elete it: ~

O  Fájl megnyitása csak olvasható módban. Általában csak betekintéshez
   használjuk és nem akarjuk a fájlt visszaállítani.

E  Szerkesztés mindenképp. Ezzel csak óvatosan! Ha egy másik Vimben is meg van
   nyitva a fájl, akkor két verzióval lesz dolgod. A szerkesztő megpróbál
   figyelmeztetni, de tudod: jobb félni, mint megijedni.

R  Helyreállítás a swapfájlból. 

Q  Kilpés. A szerkesztés megszakítása. Ha a fájl már nyitva van egy másik
   Vimben, akkor ezt kell választanod. 
      Ha csak éppen elindítottad a szerkesztőt, akkor  kilép. Több fájl
   megnyitása esetén, a Vim csak akkor lép ki, ha swapfájlt talál az első fájlhoz.
   Az "edit" parancs használata esetén a fájl nem kerül betöltésre és
   visszakerülsz az előző fájlra.

A  Mégse.  Mint a kilpés, de megszakít egyéb dolgokat is. Akkor hasznos, ha
   olyan szkriptet töltünk be, ami több fájlon végez módosítást egyszerre
   (például session).

D  Swapfájl törlése. Ha már nincs többé szükséged a swapfájlra. Például, ha
nem tartalmaz újabb változást, vagy ha a fájl maga újabb, mint a swapfájl.
      Unix rendszereket csak akkor lehet ezt az opciót választani, ha a
      folyamat, mely létrehozta a swapfájlt, nem fut.

Ha nem kaptál párbeszédablakot (egyes Vim verziók ezt nem támogatják), akkor
ezt manuálisan kel elvégezned. A helyreállításhoz használd ezt a parancsot: >

	:recover

A Vim nem képes a swapfájlok detektálására 100%-os biztonsággal. Ezek azok az
esetek, amikor egy másik szerkesztési folyamat a swapfájlt áthelyezi, mert úgy
van konfigurálva vagy path eltérő (platformok és rendszerek között). Ezért ne
támaszkodj arra, hogy a Vim megment.

Az üzenet elrejtéséhez add az 'A' flaget a 'shortmess' opcióhoz, bár nem
biztos, hogy bölcs döntés.

Swapfájl és titkosítása, lásd: |:recover-crypt|. 
A swapfájl különböző elérési módjai, lásd: |swapinfo()|.

==============================================================================
*11.4*	További irodalom

|swap-file|	Információk a swapfájl helyéről és nevéről
|:preserve|	Szerkesztésink manuális flushelése a swapfájlba
|:swapname|	swapfájl neve
'updatecount'	Leütésszám (swap - flush)
'updatetime'	Időköz (swap - flush)
'swapsync'	Lemez szinkronizáció  (swap - flush)
'directory'	Swapfájlokat fogadó elérési utak
'maxmem'	Maximális memória swap flush előtt
'maxmemtot'	Szintén, de az összes fájlhoz

==============================================================================

Következő fejezet: |usr_12.txt|  Tippek, Trükkök

Jogi információk: lásd |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:

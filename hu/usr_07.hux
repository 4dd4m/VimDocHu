*usr_07.txt*	Vim verzió 8.2.  Frissítve: 2020 Mar 23

		  Bram Moolenaar: Vim Felhasználói kézikönyv

			    Több fájl szerkesztése


Nem számít, hogy mennyi fájllal kell dolgozz, az összeset szerkesztheted
anélkül, hogy kilépnél a Vimből.Legyen szó akár fájlok közötti váltásról, akár
szöveg másolásáról egy másik fájlba.

|07.1|	Egy másik fájl szerkesztése
|07.2|	Fájlok listája
|07.3|	Fájlról fájlra ugrás
|07.4|	Biztonsági mentések
|07.5|	Szövegek másolása fájlok között
|07.6|	Betekintés fájlokba
|07.7|	Fájl átnevezése

Következő fejezet: |usr_08.txt|  Splitek
    Előző fejezet: |usr_06.txt|  Szintaxiskiemelés használata
  Tartalomjegyzék: |usr_toc.txt|

==============================================================================
*07.1*	Egy másik fájl szerkesztése

Eddig minden egyes fáj szerkesztéséhez új Vimet kellett nyitnod. Egyszerűbb
módszer: kezdd a szerkesztés a következő paranccsal: >

	:edit foo.txt

A "foo.txt" fájlnév helyett használhatsz mást is. Az aktuális fájlt a Vim
bezárja és az argumentumban szereplő fájlt megnyitja (ha létezik). Amennyiben
az aktuális buffernek nem mentettük a módosításait, hibaüzenetet kapunk és az
új fájl nem nyílik meg:

	E37: No write since last change (use ! to override) ~

	Megjegyzés:
	A Vim minden egyes hibaüzenet mellé egy hibakódot mellékel. Ha nem
	érted, hogy mi váltotta ki a hibát, akkor a dokumentációból
	megtudhatod: >

		:help E37

Jelen pillanban számos opció közül választhatsz. Kiírhatod a fájlt: >

	:write

Eldobhatod az aktív fájl beállításait az (! karakterrel), így az új fájl
megnyílik: >

	:edit! foo.txt

Ha meg szeretnél nyitni egy másik fájlt, akkor elrejtheted az aktív buffert (a
régi fájl tartalma nem lesz elmentve ezen a ponton): >

	:hide edit foo.txt

Az előző fájl még mindig elérhető a változtatásaival együtt. Ez részletesen el
lesz magyarázva a |22.4| fejezetben (Bufferek listája).

==============================================================================
*07.2*	Fájlok listája

Ahány fájlnevet adsz át a Vimnek, annyi fájlt nyit meg szerkesztésre. Páldául:
>
	vim one.c two.c three.c

A parancs elindítja a Vimet és meghatározza a három szerkesztésre váró fájlt.
Vizuálisan csak egy fájl jelenik meg. Ha elvégezted a szükséges
szerkesztéseket, akkor a következőre léphetsz: >

	:next

Ha a változtatásokat nem mentetted el az aktív bufferben, akkor a ":next"
parancsot nem tudod használni, mivel hibaüzenetet fog dobni (akár fentebb az
":edit" példa során). Következő fájlra lépés a változások eldobásával: >

	:next!

Legtöbb esetben el szeretnéd menteni a munkádat és továbblépni, a két lépés
egyszerre is elvégezhető: >

	:wnext

Ugyan az, mintha két lépésben az alábbiakat futtatnád: >

	:write
	:next


HOL VAGYOK?

Az ablak címe elárulja, hogy az argumentumlistából melyik fájlt szerkeszted. A
képernyő alján az állapotsoron valami olyasmit olvashatsz, hogy "(2 of 3)". Ez
azt jelenti, hogy második fájlt szerkeszted a három közül.
   Ha a fájlok listájára vagy kíváncsi: >

	:args

Mely az "arguments" szó rövidítése. Kiemente pedig:

	one.c [two.c] three.c ~

A vim induláskor ezeket a fájlokat töltötte be. Jelenleg a "two.c" fájlt
láthatjuk az aktív bufferben.


VÁLTÁS A TÖBBI ARGUMENTUMRA

Előző fájl: >

	:previous

A ":next" parancs ellentéte, visszafelé lép a fájllistában. Írás és
visszalépés: >

	:wprevious

A fájllista legvégére ugrás: >

	:last

A fájllista legelejére ugrás: >

	:first

Azonban ":wlast" és ":wfirst" parancs nem létezik!

":next" és ":previous" parancsok prefixálhatóak. Két fájlt előre: >

	:2next


AUTOMATIKUS MENTÉS

A fájlok szerkesztése és a navigációs elemek között észben kell tartani a
mentést is ":write", különben hibaüzenettel találkozunk. Ha biztos vagy benne,
hogy mindig menteni szeretnél, a folyamat automatizálható: >

	:set autowrite

Ha olyan fájlt szerkesztesz, amot nem szeretnél menteni, akkor előbb ki kell
kapcsolnod: >

	:set noautowrite


MÁSIK FÁJJLISTA SZERKSZTÉSE

Kilépés nélkül újradefiniálhatjuk a fájllistát, három másik fájl szerkesztése:
>
	:args five.c six.c seven.h


Helyettesítőkaraktereket ugyanúgy használhatsz, mintha shellben dolgoznál: >

	:args *.txt

Az első fájl kerül megnyitásra. A változtatásokat vagy mentjük, vagy eldobjuk
(":args!"), mielőtt új fájlra lépünk.


A LEGUTOLSÓ FÁJLT SZERKESZTETTED?
							*arglist-quit*
Ha fájlok listájával dolgozol, akkor a Vim azt feltételezi, hogy szerkeszteni
szeretnéd az összeset, így  ha idő előtt (az utolsó fájl szerkesztése előtt) be
szeretnéd zárni a szerkesztőt, akkor az alábbi hibaüzenet fogad:

	E173: 46 more files to edit ~

Ha tényleg ki szeretnél lépni, akkor kíséreld meg újra.

==============================================================================
*07.3*	Fájlról fájlra ugrás

Két fájl között a CTRL-^ billentyűkombinációval válthatunk. Például: >

	:args one.c two.c three.c

Most one.c az aktív fájl.

	:next

Most two.c. Most nyomhatsz CTRL-^-t, hogy visszatérj one.c-re. Újabb CTRL-^
visszaléptet two.c-re. Majd CTRL-^ ismét one.c. Ha most lépsz a következő
fájlra: >

	:next

Akkor az aktív fájl a three.c lesz. CTRL-^ nem változtatja meg az ":args"
lista fájlra mutató pointerét, ehhez csak a prancsok férnek hozzá
(next,previous stb.).

Példaképpen vegyük az előző args listát. once.c fájlon meghívod a ":next"
parancsot. Ezen a ponton már aktív a CTRL-^ billentyűkombináció, melyet
alkalmazva visszalépsz az előző fájlra (one.c). Az ":arg" lista pointere még
mindig two.c, tehát ha most meghívod a ":next" parancsot, akkor three.c fájlra
váltasz (és nem two.c-re).

Az előzőleg szerkesztett fájl "alternate" (előző) fájlnak nevezzük. Az indítás
követően CTRL-^ nem működik, hiszen nincs előzőleg szerkesztett fájl.


AUTOMATIKUS JELÖLŐK

Ha egy olyan fájlt nyitsz meg, melyet már előzőleg szerkesztettél, akkor
használhatod az alábbi automatikus jelölőket: >

	`"

A jelölő arra a pontra hivatkozik, ahol a kurzor állt a fájl utolsó
bezárásakor.
Az alábbi jelölő pedig az utolsó szerkesztés pontjára: >

	`.

Tételezzük fel, hogy a "one.txt" fájlt szerkeszted. Valahol a fájl közepe felé
törölsz egy karaktert az "x" paranccsal, majd az utolsó sorra ugrasz "G"-vel
és mented a fájlt. Szerkesztesz még pár fájlt, de vissza kell térned: ":edit
one.txt". Most, ha a `" jelölőre ugrasz, akkor az az utolsó sorra fog vinni
(hiszen ott állt a kurzor, amikor bezártad a fájlt). A `. jelölő pedig oda fog
vinni, ahol a fájl közepében kitörölted a karaktert. A fájl megnyitását
követően a kurzor szabadon mozgatható, a jelölők mindig ugyanarra a pontra
fognak vinni (ha nem szerkesztesz bele a fájlba, vagy ki nem lépsz belőle).


FÁJL JELÖLŐK

A |03.10| fejezetben megtanulhattuk, hogy hogyan alkalmazzuk a jelöléseket,
"mx" jelölő elhelyezése, majd a pozíció hívása "`x". Az ilyen típusú jelölők
csak fájlon belül működnek, tehát lokálisak. Minden fájlnak megvan a maga
jelölőkészlete.
   Eddig csak kisbetűs jelölőket alkalmaztunk. Azonban nagybetűkkel is
léteznek jelölők. A nagybetűs jelölők globálisak, tehát működnek fájlok
között is. Például "foo.txt" fájlban elhelyezel egy "F" jelölőt a fájl
felénél. >

	50%mF

Most átváltasz "bar.txt" fájlra, ahol elhelyezel egy "B" jelölőt az utolsó
sorban:
>
	GmB

Most meghívhatjuk az "F" globális jelölőt "'F", hogy visszatérjünk foo.txt
feléhez. Innen pedig átugorhatunk "bar.txt" utolsó sorára, a "B" jelölővel
"'B".

A jelölők addig maradnak érvényben, amíg máshová nem rakjuk őket. Így akár
több órányi szerkesztés után is visszatérhetünk ugyanazon pontokra.
   Egyszerűbb kezelnünk a jelölőket, ha logikusan használjuk őket. Páldául H
jelölőt a header filehoz, M jelölőt a makefilehoz, C jelölőt pedig egyéb
kódokhoz használjuk.

Ha kíváncsi vagy, hogy egy jelölő definíciója hová szól, add át argumentumként
a ":marks" parancsnak: >

	:marks M

Akár egynél többet is: >

	:marks MCP

Ne feledd, hogy a jump-listben bármikor szabadon mozoghatsz  jelölők
használata nélkül, CTRL-O (régebbi) és CTRL-I (újabb) pozíciók között.

==============================================================================
*07.4*	Biztonsági mentések

A Vim nem készít automatikusan biztonsági mentést a fájlokról. Ha szeretnél
egyet, hívd meg az alábbi parancsot: >

	:set backup

A biztonsági mentés fájlneve megegyezik az eredetiével, egyetlen egy extra
~ karakter lesz a fájlnvé végén. Például, ha a fájlnév data.txt, akkor a
biztonsági mentés data.txt~ lesz.
   Ha nem tetszik a jelölés, akkor akármire átírhatod, például .bak-ra: >

	:set backupext=.bak

így a biztonsági mentés neve data.txt.bak lesz.
   Fontos megemlítenünk a 'bakcupdir' nevű változót. A biztonsági mentések
elérési útját határozza meg. Ha a változónak nem adunk értéket, akkor
biztonsági mentéseinket a fájlok könyvtárába kerülnek.

	Megjegyzés:
	Ha a 'backup' változó nincs beállítva, de a 'writebackup' viszont be
	van, akkor a Vim készít biztonsági mentést, melyet a sikeres írási
	folyamat végeztével azonnal töröl. A módszer olyan kellemetlenségek
	ellen véd, ha például az írási folyamat valami miatt nem megy végbe
	(megtelt merevlemez a laggyakoribb; villámcsapás lenne a másik, de ez
	ritkább).


AZ EREDETI FÁJL MEGTARTÁSA

Ha forrásfájlokat szerkesztesz, adódhatnak olyan esetek, amikor az eredeti
fájlt meg szeretnéd tartani, mielőtt változtatnál a fájlon. Ha biztonsági
mentést használsz, az minden alkalommal felül fog írodni, ha mentesz. Ebből a
szempontból pedig mindig csak az előző verziót tartod meg (és nem a legelsőt).
   Az eredeti fájl megtartásához állítsd be a 'patchmode' változót. A legelső
mentésnél a fájlhoz hozzáadódik a 'patchmode' beállításban meghatározott
kiterjesztés: >

	:set patchmode=.orig

A data.txt először nyitod meg szerkesztésre, változtatsz rajta, majd kiírod. A
fájl eredeti verzióját a Vim megtartja "data.txt.orig" néven.
   További változtatások alkalmazása esetén a Vim látja, hogy létezik az adott
fájlról eredeti verzió, így nem fog hozzányúlni. A további biztonsági mentések
"data.txt~" néven fognak szerepelni (vagy amit meghatároztál a 'backuptext'
változóban).
   Ha a 'patchmode' változót üresen hagyod (ez az alapértelmezett), akkor az
   eredeti fájl nem lesz megtartva.

==============================================================================
*07.5*	Szöveg másolása fájlok között

Ebből a fejezetből megtudhatod, hogy hogyan másolj szöveget két fájl között.
Kezdjük egy egyszerű példával. Szerkeszd azt a fájlt, melyből szöveget
szeretnél másolni. Vidd a kurzort a sor elejére, majd nyomj "v" billentyűt.
Ezzel átváltottunk Visual módra. Jelöld ki a másolandó szöveget, majd nyomj
"y" billentyűt. Ez másolja (yank) a kiválasztott szöveget.
   Példa a másolásra: >

	:edit thisfile
	/This
	vjjjj$y

Most pedig nyisd meg azt a fájlt, ahová szeretnél másolni. Vidd arra a pontra
a kurzort ahová be szeretnéd illeszteni. "p" billentyűvel végezd el a
beillesztés ("p" a kurzor után illeszt be). >

	:edit otherfile
	/There
	p

Természetesen számos más parancs áll rendelkezésre mind kiválasztásra, mind
másolásra. Például a teljes sorokat "V" Visual line módban tudunk kijelölni.
Vagy használhatjuk a blokk kijelölést CTRL-V. Használhattunk volna "Y"
egyetlen egy teljes sor másolásához, "yaw"-ot csak egy szó másolásához, stb.
   A "p" parancs a kurzor után illeszti be a szöveget, "P" a kuzor elé. A Vim
tudja, hogy milyen formátumban másoltad a szöveget (szó, blokk, teljes sor) és
ennek megfelelően fogja beilleszteni.


REGISZTEREK HASZNÁLARA

Ha több szövegrészletet szeretnél átmásolni egyik fájlból a másikba az sok
időt vehet igénybe. Minden egyes kimásolt szöveg saját regiszterrel
rendelkezik.
   A regiszter csak egy "hely", ahová a Vim szövegeket tud eltárolni. Itt most
az a-z jelölésű regisztereket fogjuk használni (később újakat is látni fogunk).
másoljuk ki a mondatot az f jelü regiszterbe (f, mint first, azaz első): >

	"fyas

<A parancs "f része definiálja a regisztert (") és azonosítóját (f). A "yas"
parancs bemásol (y) egy (a) mondatot (s) az f jelű regiszterbe. A paracs
sorrendje fontos, a regiszterdeklaráció kerül előlre.
   Most pedig másoljuk három sort a l jelű regiszterbe (l, azaz line): >

	"l3Y

A mennyiség "l elé helyezése is teljesen szabályos. Egy szövegblokk másolása b
jelű regiszterbe (b, azaz block): >

	CTRL-Vjjww"by

Vedd észre, hogy regiszterspecifikáció mindig a parancs előtt helyezkedik el,
másképpen nem működik.
   Mind a három regisztert f, l és b regiszterek megtöltöttük tartalommal.
Szerkessz egy másik fájlt, állj arra a pozícióra, ahová be szeretnéd őket
illeszteni: >

	"fp

Again, the register specification "f comes before the "p" command.
   You can put the registers in any order.  And the text stays in the register
until you yank something else into it.  Thus you can put it as many times as
you like.

When you delete text, you can also specify a register.  Use this to move
several pieces of text around.  For example, to delete-a-word and write it in
the w register: >

	"wdaw

Again, the register specification comes before the delete command "d".


APPENDING TO A FILE

When collecting lines of text into one file, you can use this command: >

	:write >> logfile

This will write the text of the current file to the end of "logfile".  Thus it
is appended.  This avoids that you have to copy the lines, edit the log file
and put them there.  Thus you save two steps.  But you can only append to the
end of a file.
   To append only a few lines, select them in Visual mode before typing
":write".  In chapter 10 you will learn other ways to select a range of lines.

==============================================================================
*07.6*	Viewing a file

Sometimes you only want to see what a file contains, without the intention to
ever write it back.  There is the risk that you type ":w" without thinking and
overwrite the original file anyway.  To avoid this, edit the file read-only.
   To start Vim in readonly mode, use this command: >

	vim -R file

On Unix this command should do the same thing: >

	view file

You are now editing "file" in read-only mode.  When you try using ":w" you
will get an error message and the file won't be written.
   When you try to make a change to the file Vim will give you a warning:

	W10: Warning: Changing a readonly file ~

The change will be done though.  This allows for formatting the file, for
example, to be able to read it easily.
   If you make changes to a file and forgot that it was read-only, you can
still write it.  Add the ! to the write command to force writing.

If you really want to forbid making changes in a file, do this: >

	vim -M file

Now every attempt to change the text will fail.  The help files are like this,
for example.  If you try to make a change you get this error message:

	E21: Cannot make changes, 'modifiable' is off ~

You could use the -M argument to setup Vim to work in a viewer mode.  This is
only voluntary though, since these commands will remove the protection: >

	:set modifiable
	:set write

==============================================================================
*07.7*	Changing the file name

A clever way to start editing a new file is by using an existing file that
contains most of what you need.  For example, you start writing a new program
to move a file.  You know that you already have a program that copies a file,
thus you start with: >

	:edit copy.c

You can delete the stuff you don't need.  Now you need to save the file under
a new name.  The ":saveas" command can be used for this: >

	:saveas move.c

Vim will write the file under the given name, and edit that file.  Thus the
next time you do ":write", it will write "move.c".  "copy.c" remains
unmodified.
   When you want to change the name of the file you are editing, but don't
want to write the file, you can use this command: >

	:file move.c

Vim will mark the file as "not edited".  This means that Vim knows this is not
the file you started editing.  When you try to write the file, you might get
this message:

	E13: File exists (use ! to override) ~

This protects you from accidentally overwriting another file.

==============================================================================

Next chapter: |usr_08.txt|  Splitting windows

Copyright: see |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:

*usr_02.txt*	Vim verzió 8.2.  Frissítve: 2021 Apr 24

		  Bram Moolenaar: VIM felhasználió kézikönyv

			    Első lépések a Vimben


A fejezet biztosítja azt a minimális információt, mellyel  a Vimben fájlokat
szerkeszthetünk. Abszolút nem optimálisan, de képesek leszünk alapvető
szerkesztésekre. Fektess be egy kis időt és próbáld meg elsajátítani a
parancsokat, hiszen a további fejezetek alpját képezik.

|02.1|	Vim indítása a legelső alkalommal
|02.2|	Szöveg beszúrása
|02.3|	Navigáció
|02.4|	Karakterek törlése
|02.5|	Vissza és mégis
|02.6|	Egyéb szerkesztési parancsok
|02.7|	Kilépés
|02.8|	Segítség

     Következő fejezet: |usr_03.txt|  Navigáció
 Előző fejezet: |usr_01.txt|  A kézikönyvről
Tartalomjegyzék: |usr_toc.txt|

==============================================================================
*02.1*	Vim indítása a legelső alkalommal

A Vim indításához add ki az alábbi parancsot: >

	gvim file.txt

Unix rendszereken ez lehet bármilyen parancsértelmező. Ha MS-Windowst
használsz, akkor nyisd meg a Paranccsort.
    Mindegyik esetben a Vim elindul a fájl: file.txt szerkesztésével. Egy üres
ablakon kívül mást nem fogunk látni (hiszen a fájlnak nincs tartalma):

	+---------------------------------------+
	|#					|
	|~					|
	|~					|
	|~					|
	|~					|
	|"file.txt" [Új fájl]			|
	+---------------------------------------+
		('#' a kurzor pozícióját jelöli.)

A tilde (~) azokat a sorokat jelöli, amelyek a fájlnak nem képezik részét. Más
szavakkal, ha a Vim megjelenítette a teljes fájlt, ilyen szimbólummal tölti ki
az üres sorokat, ha a fájl tartalma véget ért.  A képernyő legalsó sora az
állapotsor, ebben a sorban található a fájlnév, illetve információ arról, ha új
fájlt mi hoztuk létre. Az állapotsor üzenetei csak ideiglenes, a frissebb
információk felülírják a régi üzeneteket.


A VIM parancs

A vim parancs használatával egy új fájlt hozunk létre:
>
	vim file.txt
>
>
a szerkesztés a kiadott parancsablakban történik (ami lehet terminál, vagy
MS-Windows esetén Paranccsor). A gvim egy új ablakot hoz létre a szerkesztéshez,
a fájl ugyanúgy néz ki mindkét esetben, de a gvim további extra funkciókkal van
felvértezve (mint például a menüsor). Későbbi fejezetekben erről bővebben.

==============================================================================
*02.2*	Szöveg beszúrása

A VIm modális szerkesztő. Ez azt jelenti, hogy a program másképpen viselkedik
attól függően, hogy milyen módban vagyunk. Az alapvető két módot Normál és
Insert módnak hívjuk. Normál módban a begépelt karakterek parancsként
értelmeződnek. Insert módban a begépelt karakterek a képernyőre kerülnek.
    A Vim indulásakor a szerkesztő Normál módban van (alapértelmezetten).
Insert módba az "i" (i, azaz "i"nsert) megnyomásával kerülhetünk, ezután
elkezdhetük a szövegbevitelt. Ne aggódj, ha hibát vétesz, ezeket később ki
fogjuk javítani. Írd be az alábbi szöveget:
>
	iA very intelligent turtle
	Found programming UNIX a hurdle

A "turtle" szó után üss <Enter>-t az új sor létrehozásához. Ha készen vagy, üss
<Esc> billentyűt, így az Insert módból visszakerülhetsz Normál módba. A
szerkesztő ablakában ezt láthatod:

	+---------------------------------------+
	|A very intelligent turtle		|
	|Found programming UNIX a hurdle	|
	|~					|
	|~					|
	|					|
	+---------------------------------------+


MILYEN MÓDBAN VAGYOK?

Ezt bármikor leellenőrizheted ezzel a paranaccsal:
>
	:set showmode

A ":"-t beírásával a kurzor a legalsó sorba ugrik. Ide írhatod az úgynevezett
"kettőspontos" parancsokat. A futtatáshoz üss <Enter>-t (minden ilyen típusú
parancsot az <Enter> megnyomásával kell futtatni).
    Ha most "i" billentyűt nyomsz, akkor a Vim az ablak alján --INSERT--
felirattal jelzi az érvényben lévő módot.

	+---------------------------------------+
	|A very intelligent turtle		|
	|Found programming UNIX a hurdle	|
	|~					|
	|~					|
	|-- INSERT --				|
	+---------------------------------------+

If you press <Esc> to go back to Normal mode the last line will be made blank.


A BAJOK MEGELŐZÉSE

A kezdő Vim felhasználók gyakorta összezavarodnak, mert elfelejtik, hogy milyen
módban vannak, vagy esetlegesen olyan billentyűt ütnek le, mellyel módot
váltanak. Normál módba a legegyszerűbben (függetlenül attól, hogy milyen
módban vagyunk) az <Esc> megnyomásával kerülhetünk vissza (ezt akár néha egynél
többször is meg kell ismételjük). A Vim hangjelzést ad, ha már Normál módban
vagy.

==============================================================================
*02.3*	Navigáció

Miután visszatértünk Normál módba, az alábbi billentyűk segítségével tudjuk
léptetni a akurzort:

	h   balra						*hjkl*
	j   le
	k   fel
	l   jobbra

Első ránézésre olyan érzésünk lehet, mintha ezeket a billentyűket teljesen
véletlenszerű módon osztották volna ki. Végülis, hogy néz az ki, hogy az l
billentyű mozdul jobbra? Viszont erre nyomós érveink vannak: A kurzor mozgatása
az egyik leggyakoribb művelet szövegszerkesztési munkálataink során, ezek
pedig a kezdősoron helyezkednek el a jobb kezednél. Azaz már eleve adott, hogy
ezeket a navigációs műveleteket tudjuk leggyorsabban kiadni (feltéve persze,
ha gépírás alkalmazásával mind a tíz ujjunkat igénybevesszük a gépelés során).

	Megjegyzés:
	A kurzort a nyilak segítségével is léptethetjük. Ha ezzel a lehetőséggel
	élsz, akkor a szerkesztési sebességedet nagyban csökkented, hiszen a
	jobb kezednek el kell hagynia a kezdősort, majd pedig vissza kell
	térnie. Ez akár óránként több százszor is megtörténhet, ami
	szignifikáns időmennyiséget tehet ki.
	    Abban az esetben, ha a billentyűzetről hiányoznak a nyilak, a hjkl
	módszer kiválóan alkalmazható keresgélés nélkül.

A memorizálásnak egy módja lehet: a h bal oldalon van, az l a jobbon, a j
lefelé mutat. Vizuálisan:
>
		      k
		   h     l
		      j

Megtanulásuknak a legegyszerűbb módja, ha egyszerűen használjuk őket. Az "i"
billentyűvel szöveget szúrunk be, normál módban a hjkl billentyűkkel
navigálunk a fájl egy másik pontjára, ahol ismét szöveget szúrunk be. Ne
felejts el <Esc> billentyűt nyomni a Normál módba visszalépéshez. A
|vimtutor|-ban ezt a mechanizmust interaktívan nagyon szépen begyakorolhatjuk.

Japán felhasználók részére Hiroshi Iwatani az alábbit javasolta:

			Komsomolsk
			    ^
			    |
	   Huan Ho	<--- --->  Los Angeles
	(Sárga folyó)	    |
			    v
			  Java (a sziget, nem a programnyelv)

==============================================================================
*02.4*	Karakterek törlése

Karakterek törléséhez vidd a kurzortó a törölni kívánt karakterre, majd üss
"x" bilentyűt. (A régi írógép módszer megtesetesítője, amikor törlendő
karakterre egész egyszerűen csak egy x-et ütöttek, vagy xxxxx). Vidd a kurzort
a sor elejére és üss hét "x" karaktert (xxxxxxx), ennek hatására "A very "
szavak törlődnek. Az eredménynek az alábbi lesz:

	+---------------------------------------+
	|intelligent turtle			|
	|Found programming UNIX a hurdle	|
	|~					|
	|~					|
	|					|
	+---------------------------------------+

Most már beszúrhatsz egy új szöveget, például gépeld ezt:
>
	iA young <Esc>

Ezzel belépsz Insert módba ("i"), és begépeled "A young" szövegrészletet, az
<Esc> bilentyű pedig kilép az Insert módból. A végeredmény:

	+---------------------------------------+
	|A young intelligent turtle		|
	|Found programming UNIX a hurdle	|
	|~					|
	|~					|
	|					|
	+---------------------------------------+


SOR TÖRLÉSE

A teljes sor törléséhez használd a "dd" parancsort. A törölt sor utáni sorok
eggyel feljebb mozdulnak, hogy kitöltsék a keletkezett űrt:

	+---------------------------------------+
	|Found programming UNIX a hurdle	|
	|~					|
	|~					|
	|~					|
	|					|
	+---------------------------------------+


SORTÖRÉS TÖRLÉSE

A Vimben sorokat egyesíthetsz ("J" azaz: join, ami nem tesz mást, mint törli a két sor
között elhelyezkedő újsor karaktert.
   Tételezzük fel, hogy az alábbi két sor van a szerkeztőnkben:

	A young intelligent ~
	turtle ~

Vigyük az első sorra a kurzort és üssünk "J" billentyűt:

	A young intelligent turtle ~

==============================================================================
*02.5*	Vissza és mégis

Tételezzük fel, hogy túl sok karaktert töröltünk. Nos, beírhatjuk őket újra, de
ennél létezik egy lényegesen egyszerűbb módszer. Az "u" parancs (Undo)
visszavonja a legutolsó szerkesztést. Vizsgáljuk meg közelebbről: "dd"
alkalmazásával töröltünk egy sort, az "u" parancs visszahozza.
    Másik példa: vidd a kurzort a sor elején lévő A karakterre:

	A young intelligent turtle ~

Üsd le az alábbi billentyűket xxxxxxx "A young" szövegrészlet törléséhez:

	 intelligent turtle ~

Üss "u" billentyűt és vond vissza a legutolsó szerkesztést. Mivel a törlés
("x") parancs egyetlenegy karaktert törölt, így egy "u" parancs hatására
visszakapjuk a legutolsó törölt g karaktert.

	g intelligent turtle ~

A következő "u" parancs az azt megelőző karaktert fogja visszaállítani:

	ng intelligent turtle ~

A következő "u" visszaállítja az u karaktert és így tovább:

	ung intelligent turtle ~
	oung intelligent turtle ~
	young intelligent turtle ~
	 young intelligent turtle ~
	A young intelligent turtle ~

	Megjegyzés:
	Ha az "u" parancsot kétszer adtad ki és eredményként az utolsó példa
	legutolsó sorát kapod, akkor a Vim Vi kompatibilis mdban van. Itt
	nézheted meg, hogy hogyan korrigálhatod ezt ki: |not-compatible|.
	    Ez a leírás a Vim módszer működését tárgyalja, ha szereted a régi
	öreg Vi módszert, semmi probléma, de ez esetben fokozottan kell
	ellenőrizned a szöveget a működésbeli eltérések végett.


MÉGIS

Ha túl sok szerkesztést vonsz vissza, akkor CTRL-R megnyomásával a visszavont
szerkesztést mégis újraalkalmazhatod, magyarul a visszavonásnak a visszavonása.
Hogy lássuk működés közben, üss kétszer CTRL-R-t. Az "A" karakter és a követő
szóköz eltűnik:

	young intelligent turtle ~

A visszavonásnak létezik egy speciális módja, az "U" (sor visszavonás) parancs.
Az "U" parancs visszavonja a kurzor alatt lévő sor összes szerkesztését.
Kétszeri bevitelkor "UU", csak az egyik értelmeződik, míg a másik érvényét
veszti.

	A very intelligent turtle ~
	  xxxx				Törli: very

	A intelligent turtle ~
		      xxxxxx		Törli: turtle

	A intelligent ~
					Sor visszaállítása: "U"
	A very intelligent turtle ~
					"U" visszavonása  "u"-val
	A intelligent ~

Az "U" parancs önmagában értelmezve is változás, ezért vissza is vonható "u"
paranccsal, illetve mégis alkalmazható CTRL-R paranccsal. Ez elég zavarónak
tűnhet. Ne aggódj, az "u" és a CTRL-R parancsokkal bármilyen szituációt le
tudsz kezelni. A témában többet ebben a szekcióban olvashtasz |32.2|.

==============================================================================
*02.6*	Egyéb szerkesztő parancsok

A szöveg szerkesztéséhez még számos parancs áll a rendelkezésre. Lásd |Q_in|
és alább. Összefoglalva ezek a leggyakoribbak:j


HOZZÁFŰZÉS

Az "i" parancs a kurzor alatt lévő karakter elé illeszt be. Ez rendben van, de
mi van akkor, ha nekünk éppen a sor végére kell valamit beszúrnunk? Erre való
a hozzáfűzés parancs "a" (azaz, Append).
    Például változtassuk meg az alábbi sort:

	and that's not saying much for the turtle. ~
erre
	and that's not saying much for the turtle!!! ~

Pozícionáljuk a kurzort a sor végén lévő "." karakterre, majd "x" segítségével
töröljük azt. A kurzor így maradni fog a sor végén, majd gépeljük be:
>
	a!!!<Esc>

a sor végi három felkiáltójel hozzáadásához:

	and that's not saying much for the turtle!!! ~


ÚJ SOR NYITÁSA

Az "o" parancs egy új üres sort hoz létre az aktuális sor alatt, majd a
szerkesztőt Insert módra állítja, így már nem maradt más dolgunk, mint beírni
az új sor tartalmát.
    Tételezzük fel, hogy a kurzor az első sorban tartózkodik (itt azonban
akárhol):

	A very intelligent turtle ~
	Found programming UNIX a hurdle ~


Most nyissunk új sort az "o" (azaz Open) paranccsal, gépeljük:
>
	oThat liked using Vim<Esc>

A végeredmény az alábbi:

	A very intelligent turtle ~
	That liked using Vim ~
	Found programming UNIX a hurdle ~

Az "O" parancs (nagybetűs O) az aktuális sor fölé nyitja az új sor.


MENNYISÉG (COUNT) HASZNÁLATA

Tegyük fel, hogy fel szeretnél ugrani kilenc sort, amit megtehetsz így:
"kkkkkkkkk", vagy elláthatod mennyiséggel a parancsot, például "9k". A parancsok
jellemzően elláthatók ilyen mennyiségi jelzővel. Emlékezzünk vissza, néhány
sorral feljebb a három felkiáltójeles példára, amit így hajtottunk végre:
"a!!!<Esc>". Ennek egy rövidebb módja "3a!<Esc>". A mennyiségi jelzővel ellátott
parancsokat a Vim megismétli (a bevitt értékkel). Ennek alapján, a három karak-
tert törlő parancsot is legyszerűsíthettük volna: "3x". A mennyiségi jelző
mindig megelőzi a pranacsot, melyre hatással van.

==============================================================================
*02.7*	Kilépés

Kilépéshez használd a "ZZ" parancsot. A parancsi automatikusan menti a fájlt.

	Megjegyzés:
	Note:
	A Vim más szövegszerkesztőkkel ellentétben nem készít biztonsági
	másolatot. A "ZZ" parancs kiadása után nincs visszaút. A biztonsági
	mentés beállításairól bővebben itt olvashatsz: |07.4|.


A VÁLTOZTATÁSOK ELDOBÁSA

Sokszor kerülhetsz abba a helyzetbe, hogy a szerkesztés után rádöbbensz, jobb
lenne az elejéről kezdeni a szerkesztést (mentetlenül bezárni a fájlt). Ne
aggódj, a Vim képes erre ezzel a pranccsal:
>
	:q!

Ne felejts el <Enter>-t ütni a parancs begépelése után.

Ha érdekelnek a részletek, az előbb említett kilépési parancs három részből áll.
Az első rész a kettőspont ":", mely megnyitja a Command-line módot, a második
rész a q parancs, mellyel kilép a szerkesztő, a harmadik és utolsó rész az
úgynevezett "felülíró módosító" (!).
    A felülíró módosítóra ebben az esetben szükség van, mivele Vim
alapértelmezetten nem veti el a változtatásokat. Ha csak ennyit írtunk volna ":q",
akkor egy hibaüzenet jelent volna meg:

	E37: No write since last change (use ! to override) ~

A módosító alkalmazásásval gyakorlatilag ezt mondjuk a szerkesztőnek: "Tudom
amit csinálok badarságnak tűnhet, de ezt tényleg szeretném"

Ha a szerkesztést a Vimben szeretnéd folytatni, akkor használd a ":e!" parancsot,
mely betölti újra a fájlt a legutolsó mentett állapota szerint.

==============================================================================
*02.8*	Seítség

A Vim helpfájljai tartalmaznak mindent, melyre a használat során szükséged
lehet (még többet is), ennek ellenére ne légy szégyenlős!

Ha pontosan tudod, mit szeretnél, help fájlok rendszerint jobb lehetőségnek
bizonyulnak, mint péládula a Google.

A beépített help fájlok rendelkeznek azzal az előnyös tulajdonsággal, hogy
kifejezetten a Te Vim verziójáról szólnak. Későbbiekben a help parancsot nem
láthatod, de itt az álalános formátuma:

Általános segítség megnyitása:
>
	:help

Használhatod a billentyűzeted <F1> billentyűjét, vagy a dedikált <Help>
billentyűt (ha ez létezik).
    A ":help" parancs argumentum nélkül az általános problémákra vonatkozó
oldalt nyitja meg.
A Vim készítői nagyon okosan (vagy szimplán csak lustaságból) a help rendszert
úgy alakították ki, hogy az maga is a szerkesztőben nyíljon meg, így az összes
tanult navigációs parancsot használhatod. Ezért a j fel, a k le, a h balra, az
l jobbra mozog.
    Az ablak bezárásához használhatod az előzőleg ismertetett "ZZ" parancsot.
Ez csak bezárja az ablakot, de a Vimet nem.

A pipe "|" karakterek közötti szavak linkeknek minősülnek (pldául |help|). Így
könnyedén megnyithatjuk az adott szóhoz tartozó dokumentációt. Állj rá a
kurzorral a linkelt szavak egyikére, majd nyomj CTRL-]-t (taghez ugrás) és már
az adott résznél is vagy. (A Vim terminológia szerint a hyperlinkek tageknek
minősülnek a Vimben). Tehát a CTRL-] a kurzor alatt lévő taghez ugrik.
    Néhány ugrás után talán már vissza is szeretnél navigálni. A CTRL-T-vel
tudod végrehajtani (pop stack), ami visszalép az előző pozícióra.
As you read the help text, you will notice some text enclosed in vertical bars
(for example, |help|).  This indicates a hyperlink.  If you position the
cursor anywhere between the bars and press CTRL-] (jump to tag), the help
system takes you to the indicated subject.  (For reasons not discussed here,
the Vim terminology for a hyperlink is tag.  So CTRL-] jumps to the location
of the tag given by the word under the cursor.)
   After a few jumps, you might want to go back.  CTRL-T (pop tag) takes you
back to the preceding position.  CTRL-O (jump to older position) also works
nicely here.
   At the top of the help screen, there is the notation *help.txt*.  This name
between "*" characters is used by the help system to define a tag (hyperlink
destination).
   See |29.1| for details about using tags.

To get help on a given subject, use the following command: >

	:help {subject}

To get help on the "x" command, for example, enter the following: >

	:help x

To find out how to delete text, use this command: >

	:help deleting

To get a complete index of all Vim commands, use the following command: >

	:help index

When you need to get help for a control character command (for example,
CTRL-A), you need to spell it with the prefix "CTRL-". >

	:help CTRL-A

The Vim editor has many different modes.  By default, the help system displays
the normal-mode commands.  For example, the following command displays help
for the normal-mode CTRL-H command: >

	:help CTRL-H

To identify other modes, use a mode prefix.  If you want the help for the
insert-mode version of a command, use "i_".  For CTRL-H this gives you the
following command: >

	:help i_CTRL-H

When you start the Vim editor, you can use several command-line arguments.
These all begin with a dash (-).  To find what the -t argument does, for
example, use the command: >

	:help -t

The Vim editor has a number of options that enable you to configure and
customize the editor.  If you want help for an option, you need to enclose it
in single quotation marks.  To find out what the 'number' option does, for
example, use the following command: >

	:help 'number'

The table with all mode prefixes can be found below: |help-summary|.

Special keys are enclosed in angle brackets.  To find help on the up-arrow key
in Insert mode, for instance, use this command: >

	:help i_<Up>

If you see an error message that you don't understand, for example:

	E37: No write since last change (use ! to override) ~

You can use the error ID at the start to find help about it: >

	:help E37


Summary: 					*help-summary*  >

1) Use Ctrl-D after typing a topic and let Vim show all available topics.
   Or press Tab to complete: >
	:help some<Tab>
<   More information on how to use the help: >
	:help helphelp

2) Follow the links in bars to related help.  You can go from the detailed
   help to the user documentation, which describes certain commands more from
   a user perspective and less detailed.  E.g. after: >
	:help pattern.txt
<   You can see the user guide topics |03.9| and |usr_27.txt| in the
   introduction.

3) Options are enclosed in single apostrophes.  To go to the help topic for the
   list option: >
	:help 'list'
<   If you only know you are looking for a certain option, you can also do: >
	:help options.txt
<   to open the help page which describes all option handling and then search
   using regular expressions, e.g. textwidth.
   Certain options have their own namespace, e.g.: >
	:help cpo-<letter>
<   for the corresponding flag of the 'cpoptions' settings, substitute <letter>
   by a specific flag, e.g.: >
	:help cpo-;
<   And for the 'guioptions' flags: >
	:help go-<letter>

4) Normal mode commands do not have a prefix. To go to the help page for the
   "gt" command: >
	:help gt

5) Insert mode commands start with i_.  Help for deleting a word: >
	:help i_CTRL-W

6) Visual mode commands start with v_.  Help for jumping to the other side of
   the Visual area: >
	:help v_o

7) Command line editing and arguments start with c_.  Help for using the
   command argument %: >
	:help c_%

8) Ex-commands always start with ":", so to go to the ":s" command help: >
	:help :s

9) Commands specifically for debugging start with ">".  To go to the help
   for the "cont" debug command: >
	:help >cont

10) Key combinations.  They usually start with a single letter indicating
    the mode for which they can be used.  E.g.: >
	:help i_CTRL-X
<    takes you to the family of CTRL-X commands for insert mode which can be
    used to auto-complete different things.  Note, that certain keys will
    always be written the same, e.g. Control will always be CTRL.
    For normal mode commands there is no prefix and the topic is available at
    :h CTRL-<Letter>. E.g.  >
	:help CTRL-W
<    In contrast >
	:help c_CTRL-R
<    will describe what the CTRL-R does when entering commands in the Command
    line and >
	:help v_CTRL-A
<    talks about incrementing numbers in visual mode and >
	:help g_CTRL-A
<    talks about the "g<C-A>" command (e.g. you have to press "g" then
    <CTRL-A>).  Here the "g" stands for the normal command "g" which always
    expects a second key before doing something similar to the commands
    starting with "z".

11) Regexp items always start with /.  So to get help for the "\+" quantifier
    in Vim regexes: >
	:help /\+
<    If you need to know everything about regular expressions, start reading
    at: >
	:help pattern.txt

12) Registers always start with "quote". To find out about the special ":"
    register: >
	:help quote:

13) Vim script is available at >
	:help eval.txt
<    Certain aspects of the language are available at :h expr-X where "X" is a
    single letter. E.g.  >
	:help expr-!
<    will take you to the topic describing the "!" (Not) operator for Vim
    script.
    Also important is >
	:help function-list
<    to find a short description of all functions available.  Help topics for
    Vim script functions always include the "()", so: >
	:help append()
<    talks about the append Vim script function rather than how to append text
    in the current buffer.

14) Mappings are talked about in the help page :h |map.txt|. Use >
	:help mapmode-i
<    to find out about the |:imap| command.  Also use :map-topic
    to find out about certain subtopics particular for mappings.  e.g: >
	:help :map-local
<    for buffer-local mappings or >
	:help map-bar
<    for how the '|' is handled in mappings.

15) Command definitions are talked about :h command-topic, so use >
	:help command-bar
<    to find out about the '!' argument for custom commands.

16) Window management commands always start with CTRL-W, so you find the
    corresponding help at :h CTRL-W_letter.  E.g. >
	:help CTRL-W_p
<    for moving the previous accessed window.  You can also access >
	:help windows.txt
<    and read your way through if you are looking for window handling
    commands.

17) Use |:helpgrep| to search in all help pages (and also of any installed
    plugins).  See |:helpgrep| for how to use it.
    To search for a topic: >
	:helpgrep topic
<    This takes you to the first match.  To go to the next one: >
	:cnext
<    All matches are available in the quickfix window which can be opened
    with: >
	:copen
<    Move around to the match you like and press Enter to jump to that help.

18) The user manual.  This describes help topics for beginners in a rather
    friendly way.  Start at |usr_toc.txt| to find the table of content (as you
    might have guessed): >
	:help usr_toc.txt
<    Skim over the contents to find interesting topics. The "Digraphs" and
    "Entering special characters" items are in chapter 24, so to go to that
    particular help page: >
	:help usr_24.txt
<    Also if you want to access a certain chapter in the help, the chapter
    number can be accessed directly like this: >
	:help 10.1
<    which goes to chapter 10.1 in |usr_10.txt| and talks about recording
    macros.

19) Highlighting groups.  Always start with hl-groupname.  E.g. >
	:help hl-WarningMsg
<    talks about the WarningMsg highlighting group.

20) Syntax highlighting is namespaced to :syn-topic.  E.g. >
	:help :syn-conceal
<    talks about the conceal argument for the ":syn" command.

21) Quickfix commands usually start with :c while location list commands
    usually start with :l

22) Autocommand events can be found by their name: >
	:help BufWinLeave
<    To see all possible events: >
	:help autocommand-events

23) Command-line switches always start with "-".  So for the help of the -f
    command switch of Vim use: >
	:help -f

24) Optional features always start with "+".  To find out about the
    conceal feature use: >
	:help +conceal

25) Documentation for included filetype specific functionality is usually
    available in the form ft-<filetype>-<functionality>.  So >
	:help ft-c-syntax
<    talks about the C syntax file and the option it provides.  Sometimes,
    additional sections for omni completion >
	:help ft-php-omni
<    or filetype plugins >
	:help ft-tex-plugin
<    are available.

26) Error and Warning codes can be looked up directly in the help.  So >
	:help E297
<    takes you exactly to the description of the swap error message and >
	:help W10
<    talks about the warning "Changing a readonly file".
    Sometimes, however, those error codes are not described, but rather are
    listed at the Vim command that usually causes this.  So: >
	:help E128
<    takes you to the |:function| command


==============================================================================

Next chapter: |usr_03.txt|  Moving around

Copyright: see |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:

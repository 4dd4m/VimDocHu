*usr_22.txt*	For Vim version 8.2.  Last change: 2020 Mar 28

		  Bram Moolenaar: Vim felhasználói kézikönyv

			       Fájlok keresése


A fájlok mindenhol ott vannak. Szóval hogyan találjuk őket meg? A
könyvtárszerkezet böngészésére több módszer is létezik. Akár közvetlenül
fájlból fájlba, szimplán fájlnév alapján, a előzményeket pedig bízd a Vimre.

|22.1|	A fájlböngésző
|22.2|	Aktív könyvtár
|22.3|	Fájlok keresése
|22.4|	A bufferlista

Következő fejezet: |usr_23.txt|  Egyéb fájlok szerkesztése
    Előző fejezet: |usr_21.txt|  Visszatérés adott pontra
  Tartalomjegyzék: |usr_toc.txt|

==============================================================================
*22.1*	A fájlböngésző

A Vimben van beépített fájlböngésző. Próbáld ki: >

	:edit .

Vim szkriptek és autocommandok sokasága stabilan végzi a munkáját, egy
csapással a fájlkezelőben találhatjuk magunkat. Így néz ki:

" ============================================================================ ~
" Netrw Directory Listing                                        (netrw v109) ~
"   Sorted by      name ~
"   Sort sequence: [\/]$,\.h$,\.c$,\.cpp$,*,\.info$,\.swp$,\.o$\.obj$,\.bak$ ~
"   Quick Help: <F1>:help  -:go up dir  D:delete  R:rename  s:sort-by  x:exec ~
" ============================================================================ ~
../ ~
./ ~
check/ ~
Makefile ~
autocmd.txt ~
change.txt ~
eval.txt~ ~
filetype.txt~ ~
help.txt.info ~

Az ábrán látható elemek:

    1.  A fájlböngésző neve, verziószáma
    2.  A könyvtár neve
    3.  A rendezés metódusa (név, idő, méret)
    4.  Nevek rendezése (könyvtárak előre, majd *.h fájlok,
	*.c fájlok, stb.)
    5.  Kézikönyv (<F1> billentyű), és egy rövidített lista az
	elérhető parancsokról
    6.  A fájlok listája, beleértve "../", mely egy könyvtárral
	feljebb vált

Ha a szintaxis kiemelés engedélyezve van, akkor a részek szépen elkülönülnek
egymástól.

A listát a Normal módú parancsokkal járhatod be. Például, vidd a kurzort a
legfelső fájlra és üss <Enter>-t; és már szerkeszted is  a fájlt. A böngészőt
az ":edit ." paranccsal újból visszahozhatod (vagy az :Explore paranccsal,
esetleg CTRL-O). A művelet a szerkesztett fájlt az előző fájlként fogja 
kezelni, melynek megnyitása CTRL-^. 

Próbálj megnyitni egy könyvtárat az <Enter> billentyűvel. A fájlböngésző
megnyitja a kijelölt könyvtárat és listázza a tartalmát. Ha a legeslegfelső
"../" soron ütjük az <Enter> billentyűt, akkor visszaléphetünk a szülő
könyvtárba (azaz egy szinttel feljebb). A "-" ugyanezt a funkciót látja el,
anélkül, hogy a lista tetejére kellene navigálnunk.

Most üss <F1> billentyűt a kézikönyvhöz, hogy lásd, mire képes a netrw
beépülő. Ezt kell látnod:
 >
  

9. Fájlböngésző	 netrw-browse   netrw-dir   netrw-list   netrw-help

MAPPEK								netrw-maps
     <F1>........Segítség.......................................|netrw-help|
     <cr>........Böngészés......................................|netrw-cr|
     <del>.......Fájlok és könyvtárak törlése...................|netrw-delete|
     -...........Váltás fel.....................................|netrw--|
     a...........Fájlok és könyvtárak elrejtése.................|netrw-a|
     mb..........Könyvtárak könyvjelzőzése......................|netrw-mb|
     gb..........Könyvjelzőhöz lépés............................|netrw-gb|
     cd..........Könyvtár aktív könyvtárként....................|netrw-c|
     d...........Új könyvtár létrehozása........................|netrw-d|
     D...........Fájlok és könyvtárak törlése...................|netrw-D|
     <c-h>.......Fájlok és könyvtárak elrejtésének módja........|netrw-ctrl-h|
     i...........Megjelenítési mód váltása......................|netrw-i|
     <c-l>.......Lista frissítése...............................|netrw-ctrl-l|
     o...........Böngészés horizontális splitben................|netrw-o|
     p...........A Betekintési ablak............................|netrw-p|
     P...........Szerkesztés az előző ablakban..................|netrw-p|
     q...........Könyvjelzők és history listázása...............|netrw-qb|
     r...........Fordított sorrend..............................|netrw-r|
    	(stb)

Az <F1> billentyű listázza a beépülő dokumentációját, mely a megszokott help
fájlok formáját követi. |CTRL-]| billentyűvel ugorhatunk a jelölt elemekre,
|CTRL-O|-val pedig vissza.

Fájlok szerkesztése, vagy megjelenítése: (kurzor az adott fájlnéven)

	  <Enter>	Fájl megnyitása (aktív ablakban)	   |netrw-cr|
	    o		Szerkesztés horizontális splitben	   |netrw-o|
	    v		Szerkesztés vertikális splitben		   |netrw-v|
	    p		Betekintés a fájlba (|preview-window|)	   |netrw-p|
	    P		Szerkesztés az előző ablakban		   |netrw-P|
	    t		Fájl megnyitása új fülön		   |netrw-t|

Az alábbi Normal módú parancsokkal az ablak megjelenítési beállításit
változtathatjuk meg:

	i		A lista stílusa (vékony, hosszú, széles és fa)
			A hosszú tartalmazza a méretet és a dátumot
	s		Rendezés megváltoztatása (név, módosítás, méret)
	r		Fordított sorrend

Még több Normal módú parancs:

	cd		A Vim aktív könyvtárának megváltoztatása (a
			fájlböngésző aktuális elérési útjára). A
			|g:netrw_keepdir| befolyással lehet a működésre.
	R		Fájl átnevezése
	D		Könyvtár vagy fájl törlése (megerősítő üzenettel)
	mb gb		mb: könyvjelző létrehozás, gb: könyvjelzőhöz ugrás


Egyéb normál módú parancsok:

	:Explore [directory]	[directory] Könyvtár listázása
	:NetrwSettings		Egy teljes lista a Netrwt érintő beállításokról,
				a vonatkozó dokumentáció linkjeivel
				
A netrwt nem csak a helyi fájlok szerkesztéséhez használhatod; távoli címek
kezelésére is képes:	(a cím végén lévő / karakter fontos)

	:Explore ftp://somehost/path/to/dir/
	:e scp://somehost/path/to/dir/

Lásd: |netrw-browse|.

==============================================================================
*22.2*	Az aktív könyvtár

Mint azt a shell esetén már megszokhattuk, a Vimben is létezik az aktív
könyvtár fogalma.  Tegyük fel, hogy a könyvtáradban vagy szerkesztened kell
"VeryLongFileName" könyvtárban bizonyos fájlokat. Csinálhatod így:

	:edit VeryLongFileName/file1.txt
	:edit VeryLongFileName/file2.txt
	:edit VeryLongFileName/file3.txt

Ha nem szeretnél sokat gépelni, akkor viszont így: >

	:cd VeryLongFileName	 vagy	    :Very<Tab><Enter>
	:edit file1.txt			    :argadd file*<Tab><Enter>
	:edit file2.txt
	:edit file3.txt

A ":cd" parancs átváltja az aktív könyvtárat, melyről meggyőződhetsz az
alábbiképpen: >

	:pwd
	/home/Bram/VeryLongFileName

A Vim tudja, hogy honnan érkeztél, ezért bármikor kiadhatod a "cd -"
parancsot, amely egy könyvtárral feljebb fog váltani. Például: >

	:pwd
	/home/Bram/VeryLongFileName
	:cd /etc
	:pwd
	/etc
	:cd -
	:pwd
	/home/Bram/VeryLongFileName
	:cd -
	:pwd
	/etc


AZ ABLAK LOKÁLIS KÖNYVTÁRA

Splitelés után mindkét ablak ugyanarra a könyvtárra fog mutatni. Lokális
könyvtárra kell váltanod (mely csak az adott ablakra vonatkozik), ha egy másik
könyvtárban szeretnél fájlokat szerkeszteni anélkül, hogy az inaktív
ablakaidnak az aktív könyvtára megváltozzon. >

	:pwd
	/home/Bram/VeryLongFileName
	:split
	:lcd /etc
	:pwd
	/etc
	CTRL-W w
	:pwd
	/home/Bram/VeryLongFileName

Amíg az `:lcd` parancsot használod, a többi ablak könyvtára nem fog
megváltozni, ha bármelyik ablakban kiadod a `:cd` parancsot, az hatással
lesz az összes ablakra (kivéve azokat az ablakokat, melyekben kiadtuk az `:lcd`
parancsot.
   Ha abban az ablakban, amely előzőleg rendelkezett lokális könyvtárral,
kiadjuk a `:cd` parancsot, akkor az aktív könyvtár átvált globálisra, és frissíti
a többi ablak könyvtárát is


FÜLEK LOKÁLIS KÖNYVTÁRA

Ha új fület nyitsz, akkor az aktív könyvár öröklődik a szülő ablaktól. A fülek
lokális könyvtárát a `:tcd` paranccsal határozhatjuk meg. Az adott fül alatt
elhelyezkedő ablakok öröklik a fül könyvtárát, kivéve azokat az ablakokat,
melyek már rendelkeznek lokális könyvtárral. Az újonnan nyíló ablakok
természetesen a fül könyvtárát öröklik. A füleken végzett `:cd` parancs nem
hajt végre könyvtárváltást azokon a füleken, melyek már rendelkeznek `:tcd`
könyvtárral. Ha a fül globális munkakönyvtárát megváltoztatjuk a `:cd` paranccsal, 
az hatással lesz az összes fülre.

==============================================================================
*22.3*	Fájlok keresése

Egy C program forráskódját szerkeszted:

	#include "inits.h" ~

Szeretnéd látni, hogy mi van az "inits.h" fájlban. Vidd rá a kurzort és
gépelj: >

	gf

A Vim megkeresi a fájlt, és megnyitja.
   Mi történik akkor, ha a fájl nem az aktív könyvtár része? Ebben az esetben
a 'path' opció bevonásával történik a keresés. Az opció számos könyvtárat
tartalmaz, melyben a Vim keres.
   Tegyük fel, hogy a beágyazott fájl itt található "c:/prog/include/". Ezt a
könyvtárat hozzá kell adnunk a 'path'-hoz: >

	:set path+=c:/prog/include

A könyvtár abszolút. Nem számít, hogy éppen hol vagy, ugyanarra mutat. Lehet
egy olyan fájlt beágyazni, mely a c:/prog/include/ alkönyvtáraiban van? Ebben
az esetben relatív elérést kell megadnunk, mely "." karakterrel kezdődik:
>
	:set path+=./proto

Ez arra utasítja a Vimet, hogy keressen a "proto" könyvtárban, annak a
könyvtárnak az alkönyvtáraiban, ahol a "gf" parancs megtalálta a fájlt. Ezért
a "gf" parancs az "inits.h" fájlon keresést végez a "proto/inits.h" elérési
úttal és a include könyvtárban is.
   A "./" nélkül a Vim kizárólag csak a "proto" könyvtárban keresne. És fájl
nem biztos, hogy az aktív könyvtár részét képezi.



A 'path' opcióval hozzáadhatjuk a kereséshez tartozó elérési utakat. Nézd meg
a 'path' opció dokumentációját. 
   Az 'isfname' opció segítségével határozzuk meg, hogy mely karaktereket
tekintjük a fájlnév részének (például a feljebb említett " karakter).

Ha tudod a fájl nevét, de nem találod sehol, akkor keresd meg ezzel a
paranccsal: >

	:find inits.h

A 'path' opcióban található elérési utakon elkezdődik a keresés. Ha van
találat, akkor ugyan az, mintha az ":edit" parancsot hívtuk volna meg. 

A fájlt új ablakban a CTRL-W f paranccsal nyithatod meg (a "gf" helyett), vagy
használd az ":sfind" (split find) parancsot a ":find" helyett:

A nice way to directly start Vim to edit a file somewhere in the 'path': >

	vim "+find stdio.h"

This finds the file "stdio.h" in your value of 'path'.  The quotes are
necessary to have one argument |-+c|.

==============================================================================
*22.4*	The buffer list

The Vim editor uses the term buffer to describe a file being edited.
Actually, a buffer is a copy of the file that you edit.  When you finish
changing the buffer, you write the contents of the buffer to the file.
Buffers not only contain file contents, but also all the marks, settings, and
other stuff that goes with it.


HIDDEN BUFFERS

Suppose you are editing the file one.txt and need to edit the file two.txt.
You could simply use ":edit two.txt", but since you made changes to one.txt
that won't work.  You also don't want to write one.txt yet.  Vim has a
solution for you: >

	:hide edit two.txt

The buffer "one.txt" disappears from the screen, but Vim still knows that you
are editing this buffer, so it keeps the modified text.  This is called a
hidden buffer: The buffer contains text, but you can't see it.
   The argument of ":hide" is another command.  ":hide" makes that command
behave as if the 'hidden' option was set.  You could also set this option
yourself.  The effect is that when any buffer is abandoned, it becomes hidden.
   Be careful!  When you have hidden buffers with changes, don't exit Vim
without making sure you have saved all the buffers.


INACTIVE BUFFERS

   When a buffer has been used once, Vim remembers some information about it.
When it is not displayed in a window and it is not hidden, it is still in the
buffer list.  This is called an inactive buffer.  Overview:

   Active		Appears in a window, text loaded.
   Hidden		Not in a window, text loaded.
   Inactive		Not in a window, no text loaded.

The inactive buffers are remembered, because Vim keeps information about them,
like marks.  And remembering the file name is useful too, so that you can see
which files you have edited.  And edit them again.


LISTING BUFFERS

View the buffer list with this command: >

	:buffers

A command which does the same, is not so obvious to list buffers, but is much
shorter to type: >

	:ls

The output could look like this:

  1 #h   "help.txt"			line 62 ~
  2 %a + "usr_21.txt"			line 1 ~
  3      "usr_toc.txt"			line 1 ~

The first column contains the buffer number.  You can use this to edit the
buffer without having to type the name, see below.
   After the buffer number come the flags.  Then the name of the file
and the line number where the cursor was the last time.
   The flags that can appear are these (from left to right):

	u	Buffer is unlisted |unlisted-buffer|.
	 %	Current buffer.
	 #	Alternate buffer.
	  a	Buffer is loaded and displayed.
	  h	Buffer is loaded but hidden.
	   =	Buffer is read-only.
	   -	Buffer is not modifiable, the 'modifiable' option is off.
	    +	Buffer has been modified.


EDITING A BUFFER

You can edit a buffer by its number.  That avoids having to type the file
name: >

	:buffer 2

But the only way to know the number is by looking in the buffer list.  You can
use the name, or part of it, instead: >

	:buffer help

Vim will find the best match for the name you type.  If there is only one
buffer that matches the name, it will be used.  In this case "help.txt".
   To open a buffer in a new window: >

	:sbuffer 3

This works with a name as well.


USING THE BUFFER LIST

You can move around in the buffer list with these commands:

	:bnext		go to next buffer
	:bprevious	go to previous buffer
	:bfirst		go to the first buffer
	:blast		go to the last buffer

To remove a buffer from the list, use this command: >

	:bdelete 3

Again, this also works with a name.
   If you delete a buffer that was active (visible in a window), that window
will be closed.  If you delete the current buffer, the current window will be
closed.  If it was the last window, Vim will find another buffer to edit.  You
can't be editing nothing!

	Note:
	Even after removing the buffer with ":bdelete" Vim still remembers it.
	It's actually made "unlisted", it no longer appears in the list from
	":buffers".  The ":buffers!" command will list unlisted buffers (yes,
	Vim can do the impossible).  To really make Vim forget about a buffer,
	use ":bwipe".  Also see the 'buflisted' option.

==============================================================================

Következő fejezet: |usr_23.txt|  Editing other files

Jogi információk: lásd |manual-copyright|  vim:tw=78:ts=8:noet:ft=help:norl:
